// File: \Side Projects\facecast-vote\src\Components\Utils\BreadCrumbs.jsx
import React from "react";
import { useLocation, Link } from "react-router-dom";

const BreadCrumbs = () => {
  let currentLink = "";
  const location = useLocation();
  const breadCrumbs = location.pathname
    .split("/")
    .filter((crumb) => crumb !== "")
    .map((crumb, index, array) => {
      currentLink += `/${crumb}`;
      return (
        <React.Fragment key={index}>
          <Link
            to={currentLink}
            className="text-blue-500 hover:text-blue-700 font-medium"
          >
            {crumb}
          </Link>
          {index !== array.length - 1 && (
            <span className="mx-1">/</span>
          )}
        </React.Fragment>
      );
    });

  return (
    <div className="text-sm">
      <span className="text-gray-500">{breadCrumbs}</span>
    </div>
  );
};

export default BreadCrumbs;

// File: \Side Projects\facecast-vote\src\Components\Utils\ElectionsDetails.jsx
import React, { useState, useEffect } from "react";
import { CgChevronDoubleRight } from "react-icons/cg";
import { getCollectionById, createDocument } from "../../utils/globals";
import { electionsRef, resultsRef, userVoteRef } from "../../config/firebase";
import { query, where, getDocs } from "firebase/firestore";
import CountdownTimer from "../CountdownTimer";


const getVotesByconstituency = async (
  constituency_id,
  election_id,
  candidate_id
) => {
  const votes = [];
  try {
    // console.log("Getting votes");
    // console.log("Constituency", constituency_id);
    // console.log("Election", election_id);
    // console.log("Candidate", candidate_id);
    const q = query(
      userVoteRef,
      where("constituency_id", "==", constituency_id),
      where("election_id", "==", election_id),
      where("candidate_id", "==", candidate_id)
    );
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      votes.push(doc.data());
    });
    return votes;
  } catch (error) {
    console.error("Error getting votes:", error);
    return null;
  }
};
const ElectionsDetails = ({ title, end, electionType, id }) => {
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);

  const announceResultst = async () => {
    console.log("Time's up!");
    console.log("ID!", id);
    if (!id) {
      return;
    }
    //get election details
    const election = await getCollectionById(electionsRef, id);
    if (!election) {
      return;
    }
    // const electionid = election.id;
    // console.log("Election details", election);
    const fetchedConstituencies = election.constituencies;
    const fetchedCandidates = [];

    // Loop through constituencies and candidates and push them into the arrays
    fetchedConstituencies.forEach((constituency) => {
      if (constituency.candidates && Array.isArray(constituency.candidates)) {
        fetchedCandidates.push(...constituency.candidates);
      }
    });
    // console.log("Constituencies", fetchedConstituencies);
    // console.log("Candidates", fetchedCandidates);
    setConstituencies(fetchedConstituencies);
    setCandidates(fetchedCandidates);

    const resultData = {
      electionTitle: election.title,
      totalVotes: 0,
      electionID: id,
      constituencies: [],
    };

    for (const constituency of fetchedConstituencies) {
      const constituencyData = {
        name: constituency.name,
        id: constituency.const_id,
        candidates: [],
      };
      for (const candidate of fetchedCandidates) {
        // console.log("Candidate", candidate.id);
        // console.log("Constituency", constituency.const_id);
        const votes = await getVotesByconstituency(
          constituency.const_id,
          id,
          candidate.id
        );
        // console.log("Votes", votes);
        const candidateData = {
          name: candidate.name,
          id: candidate.id,
          votes: votes ? votes.length : 0, // Check if votes exist and get the length
        };
        constituencyData.candidates.push(candidateData);
        if (votes) {
          resultData.totalVotes += votes.length;
        }
      }
      resultData.constituencies.push(constituencyData);
    }
    // console.log("Result Data", resultData);

    // inserting data to result collection

    const resultRef = await createDocument(resultsRef, resultData);
    if (resultRef) {
      console.log("Results saved successfully");
    } else {
      console.log("Error saving results");
    }
  };

  

  return (
    <div className="border-b border-b-stone-300 mb-0">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
         
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResultst}
          />
        </div>
      </div>
      <div className="py-2">
        <a className="flex items-center gap-1 text-regal-blue-600">
          Learn more <CgChevronDoubleRight className="h-10 pt-1" />
        </a>
      </div>
    </div>
  );
};

export default ElectionsDetails;

// File: \Side Projects\facecast-vote\src\Components\Utils\StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = '';
  let textColor = '';

  switch (status) {
    case 'online':
      bgColor = 'bg-green-600';
      textColor = 'text-white';
      break;
    case 'offline':
      bgColor = 'bg-red-600';
      textColor = 'text-white';
      break;
    case 'upcoming':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      break;
    default:
      bgColor = 'bg-gray-600';
      textColor = 'text-white';
  }

  return (
    <span className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}>
      {status}
    </span>
  );
};

export default StatusBadge;

// File: \Side Projects\facecast-vote\src\Components\Alert.jsx
import React, { useState, useEffect } from "react";
import { IoCloseCircleOutline } from "react-icons/io5";
import { IoMdInformationCircleOutline } from "react-icons/io";
const Alert = ({ message, type, dismissible, autoHideDelay }) => {
  const [show, setShow] = useState(true);

  useEffect(() => {
    if (autoHideDelay && autoHideDelay > 0) {
      const timeoutId = setTimeout(() => {
        setShow(false);
      }, autoHideDelay);

      return () => clearTimeout(timeoutId);
    }
  }, [autoHideDelay]);

  const handleClose = () => {
    setShow(false);
  };

  return (
    <div
      className={`fixed top-20 inset-0 flex items-end justify-center px-4 py-6 pointer-events-none sm:p-6 sm:items-start sm:justify-end ${
        show ? "" : "hidden"
      }`}
    >
      <div
        className={`max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden ${
          type === "success"
            ? "border-green-400"
            : type === "error"
            ? "border-red-400"
            : type === "warning"
            ? "border-yellow-400"
            : ""
        }`}
      >
        <div className="p-4">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <IoMdInformationCircleOutline className="h-6 w-6" />
            </div>
            <div className="ml-3 w-0 flex-1 pt-0.5">
              <p
                className={`text-sm font-medium ${
                  type === "success"
                    ? "text-gray-900"
                    : type === "error"
                    ? "text-gray-900"
                    : type === "warning"
                    ? "text-gray-900"
                    : "text-gray-900"
                }`}
              >
                {message}
              </p>
            </div>
            {dismissible && (
              <div className="ml-4 flex-shrink-0 flex">
                <button
                  onClick={handleClose}
                  className="inline-flex text-gray-400 focus:outline-none focus:text-gray-500 transition ease-in-out duration-150"
                >
                  <IoCloseCircleOutline className="h-6 w-6" />
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Alert;

// File: \Side Projects\facecast-vote\src\Components\AppHeader.jsx
import React from "react";
import { useAuth } from "../context/AuthContext";
import AuthHeaderUser from "./AuthHeaderUser";
import AuthHeaderGuest from "./AuthHeaderGuest";
import AuthHeaderAdmin from "./AuthHeaderAdmin";
const AppHeader = () => {
  const { currUser, roles } = useAuth();

  return (
    <>
      {currUser ? (
        roles === "admin" ? (
          <AuthHeaderAdmin userData={currUser} />
        ) : roles === "voter" ? (
          <AuthHeaderUser userData={currUser} />
        ) : (
          <AuthHeaderGuest />
        )
      ) : (
        <AuthHeaderGuest />
      )}
    </>
  );
};

export default AppHeader;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderAdmin.jsx
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { AiOutlineClose, AiOutlineMenu } from "react-icons/ai";
import { Transition } from "@headlessui/react";
import { useRef, useState, useEffect } from "react";
import DropDown from "./DropDown";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
const AuthHeaderAdmin = () => {
  const navigate = useNavigate();
  const { logOut, currUser } = useAuth();
  const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);
  const handleLogout = () => {
    try {
      logOut();
      navigate("/signin");
      toast.success("Logged Out Successfully");
      console.log("Logged Out");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  useEffect(() => {
    console.log("AuthHeaderAdmin.jsx", "line: 1", "useEffect");
  }, []);
  const menuItemsAdminApp = [
    {
      label: "Results",
      to: "/admin/results",
    },
    {
      label: "Complaints",
      to: "/admin/complaints",
    },
    {
      label: "Settings",
      to: "/admin/settings",
    },
  ];
  const menuItemsUser = [
    {
      label: "logout",
      to: "/admin",
    },
  ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
        <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/admin" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/admin/elections" className="hover:opacity-90">
              Election
            </Link>
            <Link to="/admin/candidate" className="hover:opacity-90">
              Candidate
            </Link>
            <Link to="/admin/constituency" className="hover:opacity-90">
              Constituency
            </Link>
            <Link to="/admin/party" className="hover:opacity-90">
              Party
            </Link>

            <DropDown title={"More"} menuItems={menuItemsAdminApp} />
            <div className="flex gap-2">
              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                Logout
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/admin" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/admin/elections" className="hover:opacity-90">
                Election
              </Link>
              <Link to="/admin/candidate" className="hover:opacity-90">
                Candidate
              </Link>
              <Link to="/admin/constituency" className="hover:opacity-90">
                Constituency
              </Link>
              <Link to="/admin/party" className="hover:opacity-90">
                Party
              </Link>

              <DropDown title={"More"} menuItems={menuItemsAdminApp} />
              <div className="flex gap-2">
                <button
                  onClick={handleLogout}
                  className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 rounded-md hover:bg-regal-blue-900/80"
                >
                  Logout
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderAdmin;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderGuest.jsx
import React from "react";
import { useState, useRef } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
// import DropDown from "./DropDown";
import { Link } from "react-router-dom";
// import { useAuth } from "../context/AuthContext";

const AuthHeaderUser = () => {
  //   const { logOut, currUser } = useAuth();
  //   const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);

  //   const menuItemsAdminApp = [
  //     {
  //       label: "Elections",
  //       to: "/elections",
  //     },
  //     {
  //       label: "Candidates",
  //       to: "/candidate",
  //     },
  //     {
  //       label: "Parties",
  //       to: "/party",
  //     },
  //     {
  //       label: "Constituency",
  //       to: "/const",
  //     },
  //   ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>

          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/results" className="hover:opacity-90">
              Results
            </Link>
            {/* <Link to="vote" className="hover:opacity-90">
              Vote
            </Link> */}

            {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
            <div className="flex gap-2">
              {/* <DropDown
                title={username}
                type={"userAccount"}
                menuItems={menuItemsUser}
              /> */}
              <button className=" text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:opacity-90">
                <Link to="/signin">Sign In</Link>
              </button>
              <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80">
                <Link to="/signup">Sign Up</Link>
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/results" className="hover:opacity-90">
                Results
              </Link>

              {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
              <div className="flex gap-2">
                {/* <DropDown
                  title={"Muhammd Saad"}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                /> */}
                <button className=" text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:opacity-90">
                  <Link to="/signin">Sign In</Link>
                </button>
                <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80">
                  <Link to="/signup">Sign Up</Link>
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderUser;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderUser.jsx
import React from "react";
import { useState, useRef, useEffect } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
import DropDown from "./DropDown";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getProfileByEmail } from "../utils/profile";
import { MdOutlineAccountBalanceWallet } from "react-icons/md";
import CryptoWalletModal from "./CryptoWalletModal";
import toast from "react-hot-toast";

const AuthHeaderUser = () => {
  const { logOut, currUser } = useAuth();
  // const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const [profile, setProfile] = useState([]);
  const mobileNavRef = useRef(null);
  const handleLogout = () => {
    try {
      logOut();
      console.log("Logged Out");
      toast.success("Logged Out Successfully");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  const menuItemsUser = [
    {
      label: "Profile",
      to: "/voter/profile",
    },
    {
      label: "Update Profile",
      to: "/voter/profile/update",
    },
  ];
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []);

  // const [isModalOpen, setIsModalOpen] = useState(false);

  // const openModal = () => {
  //   setIsModalOpen(true);
  // };

  // const closeModal = () => {
  //   setIsModalOpen(false);
  // };
  //   const menuItemsAdminApp = [
  //     {
  //       label: "Elections",
  //       to: "/elections",
  //     },
  //     {
  //       label: "Candidates",
  //       to: "/candidate",
  //     },
  //     {
  //       label: "Parties",
  //       to: "/party",
  //     },
  //     {
  //       label: "Constituency",
  //       to: "/const",
  //     },
  //   ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      {/* <CryptoWalletModal isOpen={isModalOpen} onClose={closeModal} /> */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/voter" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/voter/vote" className="hover:opacity-90">
              Vote
            </Link>
            <Link to="/voter/results" className="hover:opacity-90">
              Results
            </Link>

            {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
            <div className="flex gap-4">
              {/* <button onClick={openModal}>
                <MdOutlineAccountBalanceWallet className="h-6 w-6" />
              </button> */}
              <DropDown
                title={profile.fname}
                type={"userAccount"}
                menuItems={menuItemsUser}
              />

              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                Logout
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <div className="flex flex-row gap-6 items-center">
                {/* <button onClick={openModal}>
                  <MdOutlineAccountBalanceWallet className="h-6 w-6" />
                </button> */}
                <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
              </div>
            ) : (
              <div className="flex flex-row gap-6 items-center">
                {/* <button onClick={openModal}>
                  <MdOutlineAccountBalanceWallet className="h-6 w-6" />
                </button> */}
                <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
              </div>
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/voter" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/voter/vote" className="hover:opacity-90">
                Vote
              </Link>
              <Link to="/voter/results" className="hover:opacity-90">
                Results
              </Link>
              {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
              <div className="flex gap-2">
                <DropDown
                  title={profile.fname}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                />
                <button
                  onClick={handleLogout}
                  className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2  rounded-md hover:bg-regal-blue-900/80"
                >
                  Logout
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderUser;

// File: \Side Projects\facecast-vote\src\Components\CountdownTimer.jsx
import React, { useState, useEffect } from "react";

const CountdownTimer = ({ targetDate, startTime, endTime, onTimerEnd }) => {
  const calculateTimeLeft = () => {
    const now = new Date();
    const target = new Date(targetDate);
    const start = new Date(target.toDateString() + " " + startTime);
    const end = new Date(target.toDateString() + " " + endTime);

    let difference = 0;

    if (now < target) {
      // If current time is before the target date, set the difference to the time until target date
      difference = target - now;
    } else if (now >= start && now <= end) {
      // If current time is between start and end time, set the difference to the time until end time
      difference = end - now;
    }

    let timeLeft = {};

    if (difference > 0) {
      timeLeft = {
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
    }

    return timeLeft;
  };

  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

  useEffect(() => {
    const timer = setTimeout(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearTimeout(timer);
  });

  useEffect(() => {
    if (
      timeLeft.hours === 0 &&
      timeLeft.minutes === 0 &&
      timeLeft.seconds === 0
    ) {
      onTimerEnd();
    }
  }, [timeLeft, onTimerEnd]);

  const timerComponents = [];

  Object.keys(timeLeft).forEach((interval) => {
    if (!timeLeft[interval]) {
      return;
    }

    timerComponents.push(
      <div className="text-center" key={interval}>
        <h4 className="mb-1 text-2xl font-bold">{timeLeft[interval]}</h4>
        <p className="text-md mb-0">{interval}</p>
      </div>
    );
  });

  return (
    <div className="flex flex-row gap-3 justify-content-center">
      {timerComponents.length ? (
        timerComponents
      ) : (
        <h3 className="text-red-600 font-semibold">Time's up!</h3>
      )}
    </div>
  );
};

export default CountdownTimer;

// File: \Side Projects\facecast-vote\src\Components\CryptoWalletModal.jsx
import React from "react";
import { Dialog } from "@headlessui/react";
import { useSelector } from "react-redux";
const CryptoWalletModal = ({ isOpen, onClose }) => {
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  return (
    <Dialog open={isOpen} onClose={onClose}>
      <Dialog.Overlay className="fixed inset-0 bg-black opacity-50" />

      <div className="px-6 py-8 bg-white rounded-lg shadow-lg fixed top-12 z-10 right-36 max-w-sm flex gap-10 flex-col">
        <Dialog.Title className="text-md text-center font-semibold text-gray-900 mb-2">
          Facecast Wallet
        </Dialog.Title>

        <Dialog.Description className="flex items-center justify-center flex-col text-sm text-center font-medium text-regal-blue-600 mb-4">
          <span>Total Assets:</span>
          <span className="text-6xl font-bold pl-3">{walletValue} <span className="text-sm text-gray-800">FSC</span></span>
        </Dialog.Description>

        <p className="text-sm text-gray-600">
          5 FSC coins are required to cast a vote
        </p>

        <div className="mt-4 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm text-white bg-regal-blue-600 rounded-md hover:bg-regal-blue-700 focus:outline-none focus:ring focus:ring-blue-200"
          >
            Close
          </button>
        </div>
      </div>
    </Dialog>
  );
};

export default CryptoWalletModal;

// File: \Side Projects\facecast-vote\src\Components\DataLine.jsx
import React from "react";

const DataLine = ({ title, value }) => {
  return (
    <div class="flex border-b border-gray-200 py-2">
      <span class="text-gray-500">{title}</span>
      <span class="ml-auto text-gray-900">{value}</span>
    </div>
  );
};

export default DataLine;

// File: \Side Projects\facecast-vote\src\Components\DropDown.jsx
import { FaChevronDown } from "react-icons/fa";
import { Menu, Transition } from "@headlessui/react";
import { Fragment } from "react";

import React from "react";
import { Link } from "react-router-dom";

const DropDown = ({ title, type, menuItems }) => {
  return (
    <div className="text-right z-0">
      <Menu as="div" className="relative inline-block text-left">
        <div>
          <Menu.Button
            className={`inline-flex w-full justify-center rounded-md text-md text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75 ${
              type
                ? "p-2 border border-regal-blue-800 bg-regal-blue-800 hover:bg-regal-blue-900/80"
                : ""
            }`}
          >
            {title ? title : "Options"}
            <FaChevronDown
              className="relative mt-2 ml-2 h-3 w-3 text-regal-blue-50 hover:text-regal-blue-100"
              aria-hidden="true"
            />
          </Menu.Button>
        </div>
        <Transition
          as={Fragment}
          enter="transition ease-out duration-100"
          enterFrom="transform opacity-0 scale-95"
          enterTo="transform opacity-100 scale-100"
          leave="transition ease-in duration-75"
          leaveFrom="transform opacity-100 scale-100"
          leaveTo="transform opacity-0 scale-95"
        >
          <Menu.Items
            className={
              type
                ? "absolute right-0 mt-2 w-full origin-top-right rounded-md border border-regal-blue-800  bg-white shadow-md focus:outline-none"
                : "absolute right-0 mt-2 w-32 origin-top-right rounded-md border border-regal-blue-800  bg-white shadow-md focus:outline-none"
            }
          >
            {menuItems.map((item, index) => (
              <Menu.Item key={index}>
                {({ active }) => (
                  <Link to={item.to}>
                    <button
                      className={`${
                        active ? "text-regal-blue-800" : "text-black"
                      } text-regal-blue-900 group flex w-full items-center px-2 py-2 text-sm font-medium`}
                    >
                      {item.label}
                    </button>
                  </Link>
                )}
              </Menu.Item>
            ))}
          </Menu.Items>
        </Transition>
      </Menu>
    </div>
  );
};

export default DropDown;

// File: \Side Projects\facecast-vote\src\Components\ElectionCard.jsx
// ElectionCard.jsx
import React from "react";

const ElectionCard = ({ candidate, onVote, disabled }) => {
  const handleVoteClick = () => {
    onVote(candidate.id);
  };
  console.log("Candidate qqq2233", candidate);

  return (
    <section className="text-gray-600 mb-4">
      <div className="">
        <div className="flex flex-wrap">
          <div className="">
            <div className="h-full border-2 border-gray-200 border-opacity-60 rounded-lg overflow-hidden">
              <img
                className="lg:h-48 md:h-36  object-cover object-center"
                src={candidate.partyImg || "https://via.placeholder.com/150"}
                alt="blog"
              />
              <div className="p-6">
                <h1 className="title-font text-xl font-medium text-gray-900 mb-3">
                  {candidate.name}
                </h1>
                {/* <p className="leading-relaxed mb-3">{party}</p> */}
                <div className="flex items-center flex-wrap ">
                  <button
                    onClick={handleVoteClick}
                    className={`text-regal-blue-50 bg-regal-blue-700 rounded-md w-full text-center py-2 inline-flex items-center justify-center md:mb-2 lg:mb-0 ${disabled ? 'cursor-not-allowed opacity-50' : ''}`}
                    disabled={disabled}
                  >
                    Vote
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ElectionCard;

// File: \Side Projects\facecast-vote\src\Components\ElectionCard1.jsx
import React from "react";

const ElectionCard1 = () => {
  return (
    <section className="text-gray-600 mb-4">
      <div className="">
        <div className="flex flex-wrap">
          <div className="">
            <div className="h-full border-2 border-gray-200 border-opacity-60 rounded-lg overflow-hidden">
              <img
                className="lg:h-48 md:h-36 w-full object-cover object-center"
                src="https://dummyimage.com/720x400"
                alt="blog"
              />
              <div className="p-6">
                <h1 className="title-font text-xl font-medium text-gray-900 mb-3">
                  Party Name
                </h1>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ElectionCard1;

// File: \Side Projects\facecast-vote\src\Components\Footer.jsx
import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { useLocation } from "react-router-dom";
const Footer = () => {
  const { roles } = useAuth();
  const location = useLocation();
  const getVoterScreenLocation = location.pathname.includes("/voter/vote");
  console.log("location", getVoterScreenLocation);
  return (
    <footer class="flex flex-col items-center bg-regal-blue-700 text-center text-white">
      {roles === "voter" && !getVoterScreenLocation ? (
        <div class="container p-6">
          <div class="">
            <p class="flex items-center justify-center">
              <Link
                to="/voter/vote"
                class="inline-block rounded-full border-2 border-neutral-50 px-6 pb-[6px] pt-2 text-xs font-medium uppercase leading-normal text-neutral-50 transition duration-150 ease-in-out hover:border-neutral-300 hover:text-neutral-200 focus:border-neutral-300 focus:text-neutral-200 focus:outline-none focus:ring-0 active:border-neutral-300 active:text-neutral-200 dark:hover:bg-neutral-600 dark:focus:bg-neutral-600"
              >
                Vote Now
              </Link>
            </p>
          </div>
        </div>
      ) : null}
      <div class="w-full bg-black/20 p-4 text-center">
        <p class="text-xs text-white">
          &copy; 2024 FaceCast Vote. All rights reserved.
        </p>
      </div>
    </footer>
  );
};

export default Footer;

// File: \Side Projects\facecast-vote\src\Components\Header.jsx
import React from "react";
import { useState, useRef } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
import DropDown from "./DropDown";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
const Header = () => {
  const { logOut } = useAuth();
  const handleLogout = () => {
    try {
      logOut();
      console.log("Logged Out");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  const menuItemsUser = [
    {
      label: "Profile",
      to: "/",
    },
    {
      label: "Edit Profile",
      to: "/",
    },
    {
      label: "Logout",
      to: "/",
    },
  ];
  const menuItemsAdminApp = [
    {
      label: "Elections",
      to: "/elections",
    },
    {
      label: "Candidates",
      to: "/candidate",
    },
    {
      label: "Parties",
      to: "/party",
    },
    {
      label: "Constituency",
      to: "/const",
    },
  ];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <h1 className="text-xl md:text-2xl font-semibold">
            <Link to="/">
              <img
                src={process.env.PUBLIC_URL + "/facecast_no_bg.png"}
                alt="logo"
              />
            </Link>
          </h1>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/" className="hover:opacity-90">
              Home
            </Link>
            <Link to="vote" className="hover:opacity-90">
              Vote
            </Link>

            <DropDown title={"More"} menuItems={menuItemsAdminApp} />
            <div className="flex gap-2">
              <DropDown
                title={"Muhammd Saad"}
                type={"userAccount"}
                menuItems={menuItemsUser}
              />
              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                <Link to="/">Logout</Link>
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/" className="hover:opacity-90">
                VoteNow
              </Link>
              <DropDown title={"More"} menuItems={menuItemsAdminApp} />
              <div className="flex gap-2">
                <DropDown
                  title={"Muhammd Saad"}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                />
                <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2  rounded-md hover:bg-regal-blue-900/80">
                  <Link to="/">Logout</Link>
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default Header;

// File: \Side Projects\facecast-vote\src\Components\Instructions.jsx
import React from "react";

const Instructions = ({ stepNumber, description }) => {
  return (
    <div className="flex items-center mb-2">
      <div className="flex-shrink-0 h-5 w-5 rounded-md bg-slate-200 flex items-center justify-center text-slate-700">
        {stepNumber}
      </div>
      <div className="ml-4">
        <p className="text-base font-medium text-gray-900">{description}</p>
      </div>
    </div>
  );
};

export default Instructions;

// File: \Side Projects\facecast-vote\src\Components\PrivateRoute.jsx
import React from "react";
import { Outlet, Navigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

const PrivateRoute = () => {
  const { currUser, roles } = useAuth();
  console.log("currUser", currUser);
  console.log("user roles", roles);
  return currUser && roles ? <Outlet /> : <Navigate to="/signin" />;
};

export default PrivateRoute;

// File: \Side Projects\facecast-vote\src\Components\Utils\BreadCrumbs.jsx
import React from "react";
import { useLocation, Link } from "react-router-dom";

const BreadCrumbs = () => {
  let currentLink = "";
  const location = useLocation();
  const breadCrumbs = location.pathname
    .split("/")
    .filter((crumb) => crumb !== "")
    .map((crumb, index, array) => {
      currentLink += `/${crumb}`;
      return (
        <React.Fragment key={index}>
          <Link
            to={currentLink}
            className="text-blue-500 hover:text-blue-700 font-medium"
          >
            {crumb}
          </Link>
          {index !== array.length - 1 && (
            <span className="mx-1">/</span>
          )}
        </React.Fragment>
      );
    });

  return (
    <div className="text-sm">
      <span className="text-gray-500">{breadCrumbs}</span>
    </div>
  );
};

export default BreadCrumbs;

// File: \Side Projects\facecast-vote\src\Components\Utils\ElectionsDetails.jsx
import React, { useState, useEffect } from "react";
import { CgChevronDoubleRight } from "react-icons/cg";
import { getCollectionById, createDocument } from "../../utils/globals";
import { electionsRef, resultsRef, userVoteRef } from "../../config/firebase";
import { query, where, getDocs } from "firebase/firestore";
import CountdownTimer from "../CountdownTimer";


const getVotesByconstituency = async (
  constituency_id,
  election_id,
  candidate_id
) => {
  const votes = [];
  try {
    // console.log("Getting votes");
    // console.log("Constituency", constituency_id);
    // console.log("Election", election_id);
    // console.log("Candidate", candidate_id);
    const q = query(
      userVoteRef,
      where("constituency_id", "==", constituency_id),
      where("election_id", "==", election_id),
      where("candidate_id", "==", candidate_id)
    );
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      votes.push(doc.data());
    });
    return votes;
  } catch (error) {
    console.error("Error getting votes:", error);
    return null;
  }
};
const ElectionsDetails = ({ title, end, electionType, id }) => {
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);

  const announceResultst = async () => {
    console.log("Time's up!");
    console.log("ID!", id);
    if (!id) {
      return;
    }
    //get election details
    const election = await getCollectionById(electionsRef, id);
    if (!election) {
      return;
    }
    // const electionid = election.id;
    // console.log("Election details", election);
    const fetchedConstituencies = election.constituencies;
    const fetchedCandidates = [];

    // Loop through constituencies and candidates and push them into the arrays
    fetchedConstituencies.forEach((constituency) => {
      if (constituency.candidates && Array.isArray(constituency.candidates)) {
        fetchedCandidates.push(...constituency.candidates);
      }
    });
    // console.log("Constituencies", fetchedConstituencies);
    // console.log("Candidates", fetchedCandidates);
    setConstituencies(fetchedConstituencies);
    setCandidates(fetchedCandidates);

    const resultData = {
      electionTitle: election.title,
      totalVotes: 0,
      electionID: id,
      constituencies: [],
    };

    for (const constituency of fetchedConstituencies) {
      const constituencyData = {
        name: constituency.name,
        id: constituency.const_id,
        candidates: [],
      };
      for (const candidate of fetchedCandidates) {
        // console.log("Candidate", candidate.id);
        // console.log("Constituency", constituency.const_id);
        const votes = await getVotesByconstituency(
          constituency.const_id,
          id,
          candidate.id
        );
        // console.log("Votes", votes);
        const candidateData = {
          name: candidate.name,
          id: candidate.id,
          votes: votes ? votes.length : 0, // Check if votes exist and get the length
        };
        constituencyData.candidates.push(candidateData);
        if (votes) {
          resultData.totalVotes += votes.length;
        }
      }
      resultData.constituencies.push(constituencyData);
    }
    // console.log("Result Data", resultData);

    // inserting data to result collection

    const resultRef = await createDocument(resultsRef, resultData);
    if (resultRef) {
      console.log("Results saved successfully");
    } else {
      console.log("Error saving results");
    }
  };

  

  return (
    <div className="border-b border-b-stone-300 mb-0">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
         
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResultst}
          />
        </div>
      </div>
      <div className="py-2">
        <a className="flex items-center gap-1 text-regal-blue-600">
          Learn more <CgChevronDoubleRight className="h-10 pt-1" />
        </a>
      </div>
    </div>
  );
};

export default ElectionsDetails;

// File: \Side Projects\facecast-vote\src\Components\Utils\StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = '';
  let textColor = '';

  switch (status) {
    case 'online':
      bgColor = 'bg-green-600';
      textColor = 'text-white';
      break;
    case 'offline':
      bgColor = 'bg-red-600';
      textColor = 'text-white';
      break;
    case 'upcoming':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      break;
    default:
      bgColor = 'bg-gray-600';
      textColor = 'text-white';
  }

  return (
    <span className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}>
      {status}
    </span>
  );
};

export default StatusBadge;

// File: \Side Projects\facecast-vote\src\config\Slices\complaintsToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  allowedComplaints: true,
};

export const complaintsToggleSlice = createSlice({
  name: "complaintsToggle",
  initialState,
  reducers: {
    toggleComplaints: (state) => {
      state.allowedComplaints = !state.allowedComplaints;
    },
  },
});

export const { toggleComplaints } = complaintsToggleSlice.actions;
export default complaintsToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\signUpToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  signUp: true,
};

export const signUpToggleSlice = createSlice({
  name: "signUpToggle",
  initialState,
  reducers: {
    toggleSignUp: (state) => {
      state.signUp = !state.signUp;
    },
  },
});

export const { toggleSignUp } = signUpToggleSlice.actions;
export default signUpToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\walletSlice.js
// walletSlice.js
import { createSlice } from "@reduxjs/toolkit";

const walletSlice = createSlice({
  name: "wallet",
  initialState: {
    value: 10,
  },
  reducers: {
    decrementVoteAmount: (state) => {
      state.value -= 5;
    },
  },
});

export const { decrementVoteAmount } = walletSlice.actions;

export default walletSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\faceio.js
import faceIO from "@faceio/fiojs";

export const faceio = new faceIO("fioa43b1");

// File: \Side Projects\facecast-vote\src\config\firebase.js
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getFirestore, collection } from "firebase/firestore";
import { getStorage, ref } from "firebase/storage";
import { getAuth } from "firebase/auth"; // Import getAuth for authentication

// const firebaseConfig = {
//   apiKey: "AIzaSyB789z6xX9_PFhc3e3zBEiGl3GDIibQ6QU",
//   authDomain: "learn-firebase-662c8.firebaseapp.com",
//   projectId: "learn-firebase-662c8",
//   storageBucket: "learn-firebase-662c8.appspot.com",
//   messagingSenderId: "1076449994534",
//   appId: "1:1076449994534:web:0a174140669e6af5e903e7",
// };

const firebaseConfig = {
  apiKey: "AIzaSyAYY3QIH3M9Alg9BBHz3t5NW1vf_huLWJI",
  authDomain: "facecastvote.firebaseapp.com",
  projectId: "facecastvote",
  storageBucket: "facecastvote.appspot.com",
  messagingSenderId: "220175011601",
  appId: "1:220175011601:web:b69a9764dd82ad84d106b0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);
export const constituenciesRef = collection(db, "constituencies");
export const candidatesRef = collection(db, "candidate");
export const storageRef = ref(storage, 'candidates/');
export const userVoteRef = collection(db, "user_vote");
export const electionsRef = collection(db, "election");
export const usersRef = collection(db, "users");
export const partyRef = collection(db, "party");
export const resultsRef = collection(db, "results");

export const complainRef = collection(db, "complain");
export const userActionLogs = collection(db, "user_action_logs");

// permission constants
export const permissionRef = collection(db, "permissions");

// File: \Side Projects\facecast-vote\src\config\store.js
// store.js
import { configureStore } from "@reduxjs/toolkit"; // Importing the default export
import walletReducer from "./Slices/walletSlice"; // Importing the default export

const store = configureStore({
  reducer: {
    voteAmountWallet: walletReducer,
  },
});

export default store;

// File: \Side Projects\facecast-vote\src\config\Slices\complaintsToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  allowedComplaints: true,
};

export const complaintsToggleSlice = createSlice({
  name: "complaintsToggle",
  initialState,
  reducers: {
    toggleComplaints: (state) => {
      state.allowedComplaints = !state.allowedComplaints;
    },
  },
});

export const { toggleComplaints } = complaintsToggleSlice.actions;
export default complaintsToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\signUpToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  signUp: true,
};

export const signUpToggleSlice = createSlice({
  name: "signUpToggle",
  initialState,
  reducers: {
    toggleSignUp: (state) => {
      state.signUp = !state.signUp;
    },
  },
});

export const { toggleSignUp } = signUpToggleSlice.actions;
export default signUpToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\walletSlice.js
// walletSlice.js
import { createSlice } from "@reduxjs/toolkit";

const walletSlice = createSlice({
  name: "wallet",
  initialState: {
    value: 10,
  },
  reducers: {
    decrementVoteAmount: (state) => {
      state.value -= 5;
    },
  },
});

export const { decrementVoteAmount } = walletSlice.actions;

export default walletSlice.reducer;

// File: \Side Projects\facecast-vote\src\context\AuthContext.js
import { createContext } from "react";
import { auth } from "../config/firebase";
import { useState, useContext, useEffect } from "react";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import { getuserByid } from "../utils/profile";
export const AuthContext = createContext();
export const useAuth = () => {
  return useContext(AuthContext);
};
export const AuthProvider = ({ children }) => {
  const [currUser, setCurrUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [roles, setRoles] = useState("");
  const PERMISSIONSID = "OpiESu73rRsy4wgO3xoG";

  const signUp = (email, password) => {
    const message = createUserWithEmailAndPassword(auth, email, password);
    console.log("context sign up ", message);
    return message;
  };
  const logIn = async (email, password) => {
    const message = await signInWithEmailAndPassword(auth, email, password);
    console.log("context login ", message.user.uid);
    const user = await getuserByid(message.user.uid);
    console.log("user", user);
    if (user) {
      console.log("admin");
      console.log("user", user.roles);
      
      setRoles(user.roles);

    }
    console.log("user roles", roles);
    return message;
  };
  //   const logIn = async (email, password) => {
  //     try {
  //       const { user } = await signInWithEmailAndPassword(auth, email, password);
  //       console.log("User context:", user);
  //       setCurrUser(user);
  //       // return userRoles;
  //     } catch (error) {
  //       console.error("Error logging in:", error);
  //       throw error;
  //     }
  //   };
  const logOut = () => {
    return signOut(auth);
  };
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setLoading(false);
      setCurrUser(user);
      console.log("user", user);
    });
    return unsubscribe;
  }, []);
  const value = { currUser, signUp, logIn, logOut, roles, PERMISSIONSID };
  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

// File: \Side Projects\facecast-vote\src\data\cand.js
export const candidates = [
    {
      id: "1",
      name: "Ali Khan",
      party: "Pakistan Tehreek-e-Insaf",
      constituency_id: "PK-123",
      constituency_address: "House No. 456, Street 789, Lahore",
      image_url: "https://example.com/candidate1-image.jpg",
      age: 45,
      gender: "Male",
      education: [
        { degree: "Masters in Political Science", institution: "University Name", year: 2010 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 1234567",
      email: "ali.khan@example.com",
      address: {
        house_no: "123",
        area: "Area Name",
        city: "Lahore",
        province: "Punjab"
      },
      assets: {
        savings: "5000000 PKR",
        jewelry: "2000000 PKR"
      },
      languages_spoken: ["Urdu", "English", "Punjabi"],
      manifesto: "Focus on education, healthcare, and infrastructure development",
      election_history: [
        {
          type: "Provincial",
          name: "Punjab Provincial Election",
          position: "Member Provincial Assembly",
          result: "Won",
          year: 2023
        }
      ],
      id_card: "35201-1234567-8",
      social_media: {
        twitter: "@alikhan_pk",
        facebook: "alikhanofficial",
        instagram: "alikhan_pk"
      },
      bank_accounts: [
        { name: "Bank of Punjab" },
        { name: "Habib Bank Limited" }
      ],
      investments: [
        { type: "Stocks" },
        { type: "Property" }
      ],
      volunteer_information: [
        {
          title: "Campaign Volunteer",
          location: "Lahore",
          description: "Assist in door-to-door campaign outreach"
        },
        {
          title: "Event Coordinator",
          location: "Lahore",
          description: "Organize campaign rallies and events"
        }
      ],
      awards_and_recognition: {
        label: "Community Service Award",
        type: "Local Recognition"
      }
    },
    {
      id: "2",
      name: "Sana Ahmed",
      party: "Pakistan Muslim League-Nawaz",
      constituency_id: "PK-456",
      constituency_address: "House No. 789, Street 101, Karachi",
      image_url: "https://example.com/candidate2-image.jpg",
      age: 38,
      gender: "Female",
      education: [
        { degree: "Bachelor's in Business Administration", institution: "University Name", year: 2008 },
        { degree: "Master's in Public Administration", institution: "University Name", year: 2012 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 9876543",
      email: "sana.ahmed@example.com",
      address: {
        house_no: "789",
        area: "Area Name",
        city: "Karachi",
        province: "Sindh"
      },
      assets: {
        savings: "3000000 PKR",
        jewelry: "1500000 PKR"
      },
      languages_spoken: ["Urdu", "Sindhi", "English"],
      manifesto: "Focus on economic development and women's empowerment",
      election_history: [
        {
          type: "National",
          name: "National Assembly Election",
          position: "Member National Assembly",
          result: "Won",
          year: 2023
        }
      ],
      id_card: "35202-9876543-7",
      social_media: {
        twitter: "@sanaahmed_pmln",
        facebook: "sanaahmedofficial",
        instagram: "sana_ahmed_pmln"
      },
      bank_accounts: [
        { name: "National Bank of Pakistan" },
        { name: "Standard Chartered Bank" }
      ],
      investments: [
        { type: "Bonds" },
        { type: "Mutual Funds" }
      ],
      volunteer_information: [
        {
          title: "Youth Coordinator",
          location: "Karachi",
          description: "Engage with youth for political awareness and participation"
        },
        {
          title: "Campaign Manager",
          location: "Karachi",
          description: "Coordinate campaign activities and outreach"
        }
      ],
      awards_and_recognition: {
        label: "Outstanding Leadership Award",
        type: "National Recognition"
      }
    },
    {
      id: "3",
      name: "Ahmed Hassan",
      party: "Pakistan People's Party",
      constituency_id: "PK-789",
      constituency_address: "House No. 101, Street 202, Islamabad",
      image_url: "https://example.com/candidate3-image.jpg",
      age: 50,
      gender: "Male",
      education: [
        { degree: "Doctor of Medicine", institution: "University Name", year: 1998 },
        { degree: "Master's in Public Health", institution: "University Name", year: 2005 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 7654321",
      email: "ahmed.hassan@example.com",
      address: {
        house_no: "101",
        area: "Area Name",
        city: "Islamabad",
        province: "Islamabad Capital Territory"
      },
      languages_spoken: ["Urdu", "English"],
      manifesto: "Focus on healthcare reform and social welfare programs",
      election_history: [
        {
          type: "National",
          name: "National Assembly Election",
          position: "Member National Assembly",
          result: "Lost",
          year: 2023
        }
      ],
      cnic: "35203-7654321-6",
      social_media: {
        twitter: "@ahmedhassan_ppp",
        facebook: "ahmedhassanofficial",
        instagram: "ahmed_hassan_ppp"
      },
      bank_accounts: [
        { name: "United Bank Limited" },
        { name: "Meezan Bank" }
      ],
      investments: [
        { type: "Government Bonds" },
        { type: "Property" }
      ],
      volunteer_information: [
        {
          title: "Healthcare Campaign Volunteer",
          location: "Islamabad",
          description: "Assist in organizing healthcare camps and awareness sessions"
        },
        {
          title: "Community Outreach Coordinator",
          location: "Islamabad",
          description: "Engage with local communities to address their concerns"
        }
      ],
      awards_and_recognition: {
        label: "Medical Excellence Award",
        type: "National Recognition"
      }
    },
    {
      id: "4",
      name: "Fatima Khan",
      party: "Pakistan Awami Tehreek",
      constituency_id: "PK-101",
      constituency_address: "House No. 303, Street 404, Peshawar",
      image_url: "https://example.com/candidate4-image.jpg",
      age: 35,
      gender: "Female",
      education: [
        { degree: "Master's in Social Work", institution: "University Name", year: 2010 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 1112223",
      email: "fatima.khan@example.com",
      address: {
        house_no: "303",
        area: "Area Name",
        city: "Peshawar",
        province: "Khyber Pakhtunkhwa"
      },
      assets: {
        savings: "4000000 PKR",
        jewelry: "800000 PKR"
      },
      languages_spoken: ["Pashto", "Urdu", "English"],
      manifesto: "Focus on women's rights, education, and community development",
      election_history: [
        {
          type: "Provincial",
          name: "Khyber Pakhtunkhwa Provincial Election",
          position: "Member Provincial Assembly",
          result: "Lost",
          year: 2023
        }
      ],
      id_card: "35204-1112223-9",
      social_media: {
        twitter: "@fatimakhan_pat",
        facebook: "fatimakhanofficial",
        instagram: "fatima_khan_pat"
      },
      bank_accounts: [
        { name: "Askari Bank" }
      ],
      investments: [
        { type: "Savings Bonds" }
      ],
      volunteer_information: [
        {
          title: "Women's Rights Activist",
          location: "Peshawar",
          description: "Organize advocacy campaigns and workshops for women's empowerment"
        },
        {
          title: "Community Development Volunteer",
          location: "Peshawar",
          description: "Work on projects to improve local infrastructure and amenities"
        }
      ],
      awards_and_recognition: {
        label: "Social Activism Award",
        type: "Local Recognition"
      }
    }
  ];
  

// File: \Side Projects\facecast-vote\src\data\const.js
export const constituencies = [
  {
    id: "1",
    name: "Karachi East",
    code: "KE-001",
    region: "Sindh",
    assembly: "Sindh Assembly",
    registered_voters: 50000,
    total_votes_cast: 30000,
    winning_candidate: "candidate1",
    constituency_population: 150000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 30000,
        adults: 45000,
        middleaged: 45000,
        seniors: 30000,
      },
      gender_distribution: { male: 75000, female: 75000, other: 0 },
      education_levels: {
        primary_school: 50000,
        secondary_school: 40000,
        higher_education: 60000,
      },
    },
  },
  {
    id: "2",
    name: "Lahore Central",
    code: "LC-002",
    region: "Punjab",
    assembly: "Punjab Assembly",
    registered_voters: 60000,
    total_votes_cast: 40000,
    winning_candidate: "candidate4",
    constituency_population: 200000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 40000,
        adults: 60000,
        middleaged: 60000,
        seniors: 40000,
      },
      gender_distribution: { male: 100000, female: 100000, other: 0 },
      education_levels: {
        primary_school: 70000,
        secondary_school: 60000,
        higher_education: 90000,
      },
    },
  },
  {
    id: "3",
    name: "Islamabad West",
    code: "IW-003",
    region: "Islamabad Capital Territory",
    assembly: "National Assembly",
    registered_voters: 45000,
    total_votes_cast: 35000,
    winning_candidate: "candidate7",
    constituency_population: 180000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 35000,
        adults: 60000,
        middleaged: 55000,
        seniors: 30000,
      },
      gender_distribution: { male: 90000, female: 90000, other: 0 },
      education_levels: {
        primary_school: 60000,
        secondary_school: 50000,
        higher_education: 70000,
      },
    },
  },
  {
    id: "4",
    name: "Quetta South",
    code: "QS-004",
    region: "Balochistan",
    assembly: "Balochistan Assembly",
    registered_voters: 35000,
    total_votes_cast: 25000,
    winning_candidate: "candidate10",
    constituency_population: 120000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        under25: 25000,
        adults: 40000,
        middleaged: 40000,
        seniors: 15000,
      },
      gender_distribution: { male: 60000, female: 60000, other: 0 },
      education_levels: {
        primary_school: 40000,
        secondary_school: 30000,
        higher_education: 50000,
      },
    },
  },
  {
    id: "5",
    name: "Peshawar East",
    code: "PE-005",
    region: "Khyber Pakhtunkhwa",
    assembly: "Khyber Pakhtunkhwa Assembly",
    registered_voters: 40000,
    total_votes_cast: 0,
    winning_candidate: "",
    constituency_population: 160000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 30000,
        adults: 50000,
        middleaged: 50000,
        seniors: 30000,
      },
      gender_distribution: { male: 80000, female: 80000, other: 0 },
      education_levels: {
        primary_school: 45000,
        secondary_school: 35000,
        higher_education: 55000,
      },
    },
  },
];

// File: \Side Projects\facecast-vote\src\data\elections.js
export const elections = [
  {
    id: "1",
    title: "General Elections 2023",
    type: "national",
    election_date: "2024-06-25",
    start_at: "08:00:00", // Assuming time format HH:mm:ss
    end_at: "12:00:00", // Assuming time format HH:mm:ss
    created_at: "2023-04-01T09:00:00",
    status: "online",
    constituencies: [
      {
        const_id: "23",
        name: "Lahore",
        candidates: [
          {
            id: "50",
            name: "Imran Khan",
            party: "Pakistan Tehreek-e-Insaf (PTI)"
          },
          {
            id: "51",
            name: "Maryam Nawaz",
            party: "Pakistan Muslim League-Nawaz (PML-N)"
          },
          {
            id: "52",
            name: "Bilawal Bhutto Zardari",
            party: "Pakistan Peoples Party (PPP)"
          }
        ]
      },
      {
        const_id: "56",
        name: "Karachi",
        candidates: [
          {
            id: "12",
            name: "Mustafa Kamal",
            party: "Pak Sarzameen Party (PSP)"
          },
          {
            id: "56",
            name: "Altaf Hussain",
            party: "Muttahida Qaumi Movement (MQM)"
          }
        ]
      }
    ]
  }
];

// File: \Side Projects\facecast-vote\src\data\election_results.js
const electionResultsAnnouncement = {
    election_id: "election_id", // ID of the election
    voter_turnout: {
      percentage: 70, // Voter turnout percentage for the election
      total_votes: 700000, // Total number of votes cast in the election
      // Optionally include more detailed turnout information if needed
    },
    results: [
      {
        constituency_id: "PK-123", // ID of the constituency
        winner: {
          candidate_id: "candidate_id_1", // ID of the winning candidate in the constituency
          votes_received: 35000, // Number of votes received by the winning candidate
          // Optionally include more details about the winning candidate
        },
        // Optionally include more details about the results of this constituency
      },
      // Include results for other constituencies as needed
    ],
    announcements: [
      {
        type: "preliminary_results", // Type of announcement
        date: new Date("2023-07-26T10:00:00"), // Date of the announcement
        details: "Preliminary results for constituency PK-123 declared." // Details or summary of the announcement
      },
      // Include other announcements made during the election process
    ]
  };
  

// File: \Side Projects\facecast-vote\src\data\parties.js
export const politicalParties = [
    {
      id: "1",
      name: "Pakistan Tehreek-e-Insaf",
      acronym: "PTI",
      leader: "Imran Khan",
      foundation_year: 1996,
      ideology: "Centrism, Populism, Social Conservatism",
      headquarters: "Islamabad, Pakistan",
      manifesto: "Naya Pakistan Agenda",
      symbol_url: "https://example.com/pti-symbol.jpg",
      contact_info: {
        phone: "+92 51 8487080",
        email: "info@insaf.pk",
        address: "House No. 2, Street 4, Sector J-5, Islamabad"
      },
      party_registration_number: "123456",
      party_campaign_budget: 10000000, // 10 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "MQM, GDA"
      }
    },
    {
      id: "2",
      name: "Pakistan Muslim League-Nawaz",
      acronym: "PML-N",
      leader: "Nawaz Sharif",
      foundation_year: 1988,
      ideology: "Conservatism, Economic Liberalism",
      headquarters: "Lahore, Pakistan",
      manifesto: "Sher Ka Pakistan",
      symbol_url: "https://example.com/pmln-symbol.jpg",
      contact_info: {
        phone: "+92 42 99203091",
        email: "info@pmln.org",
        address: "House No. 123, Street 456, Model Town, Lahore"
      },
      party_registration_number: "654321",
      party_campaign_budget: 15000000, // 15 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-Q, ANP"
      }
    },
    {
      id: "3",
      name: "Pakistan Peoples Party",
      acronym: "PPP",
      leader: "Bilawal Bhutto Zardari",
      foundation_year: 1967,
      ideology: "Social Democracy, Liberalism",
      headquarters: "Karachi, Pakistan",
      manifesto: "Roti, Kapra, Makaan",
      symbol_url: "https://example.com/ppp-symbol.jpg",
      contact_info: {
        phone: "+92 21 99251669",
        email: "info@ppp.org",
        address: "Bilawal House, Clifton, Karachi"
      },
      party_registration_number: "789012",
      party_campaign_budget: 12000000, // 12 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-Q, JUI-F"
      }
    },
    {
      id: "4",
      name: "Muttahida Qaumi Movement-Pakistan",
      acronym: "MQM-P",
      leader: "Khalid Maqbool Siddiqui",
      foundation_year: 1984,
      ideology: "Ethnic Politics, Urban Sindh Rights",
      headquarters: "Karachi, Pakistan",
      manifesto: "Empowering the Urban Poor",
      symbol_url: "https://example.com/mqm-symbol.jpg",
      contact_info: {
        phone: "+92 21 36313690",
        email: "info@mqm.org",
        address: "90 Azizabad, Karachi"
      },
      party_registration_number: "135792",
      party_campaign_budget: 8000000, // 8 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PTI, PSP"
      }
    },
    {
      id: "5",
      name: "Awami National Party",
      acronym: "ANP",
      leader: "Asfandyar Wali Khan",
      foundation_year: 1986,
      ideology: "Pashtun Nationalism, Secularism",
      headquarters: "Peshawar, Pakistan",
      manifesto: "Peace, Democracy, Development",
      symbol_url: "https://example.com/anp-symbol.jpg",
      contact_info: {
        phone: "+92 91 9216436",
        email: "info@anp.org",
        address: "Bacha Khan Markaz, Peshawar"
      },
      party_registration_number: "246801",
      party_campaign_budget: 7000000, // 7 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-N, JUI-F"
      }
    },
    // Add more political parties with different data
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\Auth\LoginLayout.jsx
import React, { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import { useNavigate } from "react-router-dom";
import { usersRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { Link } from "react-router-dom";
import logo from "./facecast-no-bg.png";
import toast from "react-hot-toast";
// import { getCollectionById } from "../../utils/globals";
const LoginLayout = () => {
  const { logIn } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loginAllowed, setLoginAllowed] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [role, setRole] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // Set loading to true while sign-up is in progress
    setErrorMessage("");

    try {
      const loginuser = await logIn(email, password);
      setEmail("");
      setPassword("");
      console.log("login user", loginuser.user.uid);
      if (loginuser) {
        const userData = await getCollectionById(usersRef, loginuser.user.uid);
        // toast.success("Login Successful");

        if (userData.roles === "voter") {
          toast.success("Voter Login Successful");
          navigate("/voter");
        } else if (userData.roles === "admin") {
          toast.success("Admin Login Successful");
          navigate("/admin");
        } else {

          navigate("/signin");
        }
      } else {
        setErrorMessage("Invalid email or password");
      }
    } catch (error) {
      // Handle signup errors
      console.error("Error during sign-up:", error);
      setErrorMessage("Invalid email or password");
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="max-w-4xl mx-auto mt-16">
      <main className=" grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 shadow-md p-10 border-stone-200 bg-stone-50">
        <section className="shadow-sm flex items-center flex-col gap-5    justify-center pb-14">
          <img src={logo} alt="Face cast logo" className="md:max-w-sm w-48" />
        </section>
        <section class="md:border-l border-stone-300 md:p-6 md:py-10 md:px-10 ">
          {errorMessage && (
            <Alert message={errorMessage} type="error" dismissible={true} />
          )}
          {/* {successMessage && <Alert message={successMessage} type="success" />} */}
          <h2 class="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Welcome Abroad
          </h2>
          <form
            action=""
            onSubmit={handleSubmit}
            class=" mx-auto flex flex-col items-left gap-4"
          >
            <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4">
              <div>
                <label htmlFor="name1" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  class="form-input text-md"
                />
              </div>

              <div>
                <label for="password" className="form-label">
                  Password
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  class="form-input text-md"
                />
              </div>
            </div>
            <div>
              Already have an account
              <Link
                to="/signup"
                className="pl-2 py-2 font-bold text-regal-blue-600"
              >
                Create Account
              </Link>
            </div>
            <div class="flex items-center justify-between">
              <button
                class={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Signing In..." : "Sign In"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default LoginLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\SignupLayout.jsx
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../../context/AuthContext";
import { setDoc, doc } from "firebase/firestore";
import Alert from "../../Components/Alert";
import Select from "react-select";
import { options } from "./data/options";
import { useNavigate } from "react-router-dom";
import { db } from "../../config/firebase";
import { BsPersonBoundingBox } from "react-icons/bs";
import { faceio } from "../../config/faceio";
import { permissionRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { FaInfoCircle, FaCheck, FaTimes } from "react-icons/fa";
import toast from "react-hot-toast";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";

const SignupLayout = () => {
  const navigate = useNavigate();
  const [signUpAllowed, setSignUpAllowed] = useState(true);
  const { signUp, PERMISSIONSID } = useAuth();

  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

  const emailRef = useRef();
  const pwdRef = useRef();

  const [email, setEmail] = useState("");
  const [validEmail, setValidEmail] = useState(false);
  const [emailFocus, setEmailFocus] = useState("");

  const [password, setPassword] = useState("");
  const [validPassword, setValidPassword] = useState(false);
  const [passwordFocus, setPasswordFocus] = useState("");

  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCninc] = useState("");
  const [phone, setPhone] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [area, setArea] = useState("");
  const [faceData, setFaceData] = useState("");

  const [loading, setLoading] = useState(false);
  const [faceEnrolled, setFaceEnrolled] = useState(false);

  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    setValidEmail(EMAIL_REGEX.test(email));
  }, [email]);

  useEffect(() => {
    setValidPassword(PWD_REGEX.test(password));
  }, [password]);

  useEffect(() => {
    const fetchPermissions = async () => {
      const permissionData = await getCollectionById(
        permissionRef,
        PERMISSIONSID
      );
      if (permissionData) {
        setSignUpAllowed(permissionData.signUp);
      }
    };
    fetchPermissions();
  }, [PERMISSIONSID]);

  const handleFaceRegister = async () => {
    try {
      let response = await faceio.enroll({
        locale: "auto",
        payload: {
          email: email,
        },
      });
      console.log(`Unique Facial ID: ${response.facialId}
      Enrollment Date: ${response.timestamp}
      Gender: ${response.details.gender}
      Age Approximation: ${response.details.age}`);

      setFaceData(response);
      setFaceEnrolled(true);
    } catch (error) {
      console.log(error);
      setFaceEnrolled(false);
      setErrorMessage("Face enrollment failed. Please try again.");
    }
  };

  const handleProvinceChange = (selectedOption) => {
    setProvince(selectedOption);
    setCity("");
    setArea("");
  };

  const handleCityChange = (selectedOption) => {
    setCity(selectedOption);
    setArea("");
  };

  const handleAreaChange = (selectedOption) => {
    setArea(selectedOption);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!faceEnrolled) {
      setErrorMessage("Face enrollment is required to sign up.");
      return;
    }
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");

    try {
      const userCredential = await signUp(email, password);
      const user = userCredential.user;
      if (user) {
        const userId = user.uid;
        await setDoc(doc(db, "users", userId), {
          email,
          fname,
          lname,
          cnic,
          phone,
          address: {
            province: province.label || "",
            city: city.label || "",
            area: area.label || "",
          },
          faceData: faceData,
          roles: "voter",
        });
        toast.success("User Created Successfully");

        setCninc("");
        setFname("");
        setLname("");
        setPhone("");
      }
      setEmail("");
      setPassword("");
      setSuccessMessage("Sign-up successful!");
      navigate("/voter");
    } catch (error) {
      console.error("Error during sign-up:", error);
      switch (error.code) {
        case "auth/email-already-in-use":
          setErrorMessage(
            "Email is already in use. Please choose a different email."
          );
          break;
        case "auth/weak-password":
          setErrorMessage(
            "The password is too weak. Please choose a stronger password."
          );
          break;
        default:
          setErrorMessage(
            "An error occurred during sign-up. Please try again later."
          );
          break;
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <main>
        <section className="p-6 max-w-2xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Signup
          </h2>
          {errorMessage && (
            <Alert
              message={errorMessage}
              type="error"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {successMessage && (
            <Alert
              message={successMessage}
              type="success"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {signUpAllowed ? (
            <form
              action=""
              onSubmit={handleSubmit}
              className="mx-auto flex flex-col items-left gap-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="fname"
                    className="text-lg font-normal text-slate-900"
                  >
                    First name
                  </label>
                  <input
                    type="text"
                    id="fname"
                    name="fname"
                    value={fname}
                    onChange={(e) => setFname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="lname"
                    className="text-lg font-normal text-slate-900"
                  >
                    Last name
                  </label>
                  <input
                    type="text"
                    id="lname"
                    name="lname"
                    value={lname}
                    onChange={(e) => setLname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="cnic"
                    className="text-lg font-normal text-slate-900"
                  >
                    ID number (cnic)
                  </label>
                  <input
                    type="number"
                    id="cnic"
                    name="cnic"
                    value={cnic}
                    onChange={(e) => setCninc(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="phone"
                    className="text-lg font-normal text-slate-900"
                  >
                    Phone
                  </label>
                  <PhoneInput
                    country={"pk"}
                    onlyCountries={["pk"]}
                    value={phone}
                    onChange={(value) => setPhone(value)}
                  />
                </div>
                <div>
                  <label
                    htmlFor="province"
                    className="text-lg font-normal text-slate-900"
                  >
                    Province
                  </label>
                  <Select
                    value={province}
                    onChange={handleProvinceChange}
                    options={options}
                    placeholder="Select Province"
                  />
                </div>

                <div>
                  <label
                    htmlFor="city"
                    className="text-lg font-normal text-slate-900"
                  >
                    City
                  </label>
                  <Select
                    value={city}
                    onChange={handleCityChange}
                    options={province.cities}
                    placeholder="Select City"
                  />
                </div>

                {city && city.areas && (
                  <div>
                    <label
                      htmlFor="area"
                      className="text-lg font-normal text-slate-900"
                    >
                      Area
                    </label>
                    <Select
                      value={area}
                      onChange={handleAreaChange}
                      options={city.areas.map((area) => ({
                        label: area,
                        value: area,
                      }))}
                      placeholder="Select Area"
                    />
                  </div>
                )}
                <div>
                  <label
                    htmlFor="email"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Email
                    <span
                      id="emailnote"
                      className={validEmail ? "m-2 text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      id="emailnote"
                      className={
                        validEmail || !email ? "hidden" : "text-red-600 m-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="email"
                    ref={emailRef}
                    value={email}
                    aria-invalid={validEmail ? "false" : "true"}
                    aria-describedby="emailnote"
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Please Enter"
                    onBlur={() => setEmailFocus(false)}
                    onFocus={() => setEmailFocus(true)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    className={
                      emailFocus && !validEmail
                        ? "text-red-600 flex items-center gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="" />
                    Invalid Email
                  </p>
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Password
                    <span
                      id="uidnote"
                      className={validPassword ? "text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      className={
                        validPassword || !password
                          ? "hidden"
                          : "text-red-600 flex items-center gap-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="password"
                    required
                    aria-invalid={validPassword ? "false" : "true"}
                    aria-describedby="pwdnote"
                    ref={pwdRef}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Please Enter"
                    onFocus={() => setPasswordFocus(true)}
                    onBlur={() => setPasswordFocus(false)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    id="pwdnote"
                    className={
                      passwordFocus && !validPassword
                        ? "text-red-600 flex  gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="w-6 h-6" />
                    8 to 24 characters.
                    <br />
                    Must include uppercase and lowercase letters, a number and a
                    special character.
                    <br />
                  </p>
                </div>
                <div>
                  <label
                    htmlFor="faceauth"
                    className="text-lg font-normal text-slate-900"
                  >
                    Face Authentication
                  </label>
                  <div
                    onClick={handleFaceRegister}
                    className="w-full cursor-pointer p-2 border border-gray-300 rounded-md flex items-center gap-2"
                  >
                    <BsPersonBoundingBox />
                    <span className="ml-2">Authenticate</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mt-4">
                <button
                  type="submit"
                  className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                    loading || !faceEnrolled
                      ? "opacity-50 cursor-not-allowed"
                      : ""
                  }`}
                  disabled={loading || !faceEnrolled}
                >
                  {loading ? "Signing up..." : "Sign up"}
                </button>
              </div>
            </form>
          ) : (
            <div className="bg-red-200 p-4 flex items-center rounded-md">
              <p className="text-red-800 font-semibold">
                Registration is temporarily disabled. Come back later.
              </p>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default SignupLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\user\VoteNowLayout.jsx
import React from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import { Outlet } from "react-router-dom";
const VoteNowLayout = () => {
  return (
    <main className="mx-auto max-w-5xl py-4">
      <BreadCrumbs />
      <Outlet />
    </main>
  );
};

export default VoteNowLayout;

// File: \Side Projects\facecast-vote\src\Layout\AdminLayout.jsx
import { Link } from "react-router-dom";
import React from "react";
import { MdPinDrop } from "react-icons/md";
import { BsPersonArmsUp } from "react-icons/bs";
import { MdOutlineHowToVote } from "react-icons/md";
import { FaRegHandPointRight } from "react-icons/fa6";
const AdminLayout = () => {
  return (
    <div>
      <main className="mx-auto max-w-4xl">
        <h1 className="text-xl font-semibold text-left sm:text-2xl mb-6 py-3 text-slate-900">
          Welcome Admin
        </h1>
        <hr className="py-2 border-t-2 border-gray-300" />
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4">
          <Link to="/admin/elections">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <MdOutlineHowToVote className="h-20 w-20 text-blue-500" />
              <label>Elections</label>
            </div>
          </Link>
          <Link to="/admin/candidate">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <BsPersonArmsUp className="h-20 w-20 text-blue-500" />
              <label>Candidates</label>
            </div>
          </Link>
          <Link to="/admin/constituency">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <MdPinDrop className="h-20 w-20 text-blue-500" />
              <label>Constituency</label>
            </div>
          </Link>
        </div>
        <h1 className="text-xl font-semibold text-left sm:text-xl mb-2 py-1 text-slate-900">
          Utilities
        </h1>
        <DataLine
          value="Complaints"
          label="View Complaints"
          path="/admin/complaints"
        />
        <DataLine
          value="Settings"
          label="View Settings"
          path="/admin/settings"
        />
      </main>
    </div>
  );
};
const DataLine = ({ value, label, path }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className=" text-gray-900">{value}</span>
      <Link to={path} className="text-regal-blue-600 ">
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

export default AdminLayout;

// File: \Side Projects\facecast-vote\src\Layout\CandidatesLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const CandidatesLayout = () => {
  return (
    <div className="">
      <SubMenu />
      <main className="md:mx-auto max-w-5xl py-4 ">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/candidate"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};
export default CandidatesLayout;

// File: \Side Projects\facecast-vote\src\Layout\ComplaintLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ComplaintLayout = () => {
  return (
    <div className="">
      <main className="md:mx-auto max-w-5xl py-4 ">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default ComplaintLayout;

// File: \Side Projects\facecast-vote\src\Layout\ConstituencyLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ConstituencyLayout = () => {
  

  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};
const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/constituency"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default ConstituencyLayout;

// File: \Side Projects\facecast-vote\src\Layout\ElectionLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const ElectionLayout = () => {
  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/elections"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create Election
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default ElectionLayout;

// File: \Side Projects\facecast-vote\src\Layout\PartyLayout.jsx
import React, { useState } from "react";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
import { Outlet, Link } from "react-router-dom";
const PartyLayout = () => {
  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};
const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/party"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};
export default PartyLayout;

// File: \Side Projects\facecast-vote\src\Layout\ProfileLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ProfileLayout = () => {
  return (
    <div>
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default ProfileLayout;

// File: \Side Projects\facecast-vote\src\Layout\RootLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import Footer from "../Components/Footer";
import AppHeader from "../Components/AppHeader";
import { Toaster } from "react-hot-toast";
const RootLayout = () => {
  return (
    <div>
      {/* <Header /> */}
      <AppHeader />
      <Toaster />
      <main className="min-h-screen">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export default RootLayout;

// File: \Side Projects\facecast-vote\src\Layout\SettingsLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const SettingsLayout = () => {
  return (
    <div className="">
      <main className="lg:mx-auto lg:max-w-5xl lg:py-4 md:px-6 sm:px-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default SettingsLayout;

// File: \Side Projects\facecast-vote\src\Layout\VoterLayout.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getCollections } from "../utils/globals";
import { electionsRef } from "../config/firebase";
import { generatePDF } from "../utils/pdgGen";
import Select from "react-select";
import { SlEnvolopeLetter } from "react-icons/sl";
import { IoMdArrowDropright } from "react-icons/io";
import ComplaintModal from "../Pages/ComplaintModal";
import { getProfileByEmail } from "../utils/profile";
import { MdOutlineHowToVote } from "react-icons/md";
import { FaRegHandPointRight } from "react-icons/fa6";
import { LiaBoxOpenSolid } from "react-icons/lia";

const DataLine = ({ value, label, path }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className=" text-gray-900">{value}</span>
      <Link to={path} className="text-regal-blue-600 ">
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

const VoterLayout = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState([]);
  const [titles, setTitles] = useState([]);
  const [electionsData, setElectionsData] = useState([]);
  const [selectedElection, setSelectedElection] = useState(null);
  const [isOpen, setIsOpen] = useState(false);

  const getElectionTitles = async () => {
    try {
      const electionData = await getCollections(electionsRef);
      const titlesArray = electionData.map((election) => ({
        value: election,
        label: election.title,
      }));
      setTitles(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };

  useEffect(() => {
    getElectionTitles();
  }, []);

  useEffect(() => {
    console.log("elections", electionsData);
  }, [electionsData]);
  const handleSelectChange = (selectedOption) => {
    setSelectedElection(selectedOption);
    generatePDF(selectedOption.value);
  };

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);

  // complain
  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };
  return (
    <main className="mx-auto max-w-4xl">
      <h1 className="text-xl font-semibold text-left sm:text-xl mb-2 py-10 text-slate-900">
        Welcome
        <span className="font-bold pl-3">
          {profile.fname + " " + profile.lname}
        </span>
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ComplaintModal isOpen={isOpen} closeModal={closeModal} />
      <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-5">
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <SlEnvolopeLetter className="h-20 w-20 text-blue-500 mb-2" />
          <div className="flex gap-1 flex-col">
            <ul>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <Link to="/voter/complaint" className="text-regal-blue-700">
                  <div className="flex items-center justify-between">
                    <span className="text-regal-blue-700">View Complaints</span>
                    <IoMdArrowDropright />
                  </div>
                </Link>
              </li>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <div
                  onClick={openModal}
                  className="flex items-center justify-between text-regal-blue-700"
                >
                  <span className="text-regal-blue-700">File Complaints</span>
                  <IoMdArrowDropright />
                </div>
              </li>
            </ul>
          </div>
        </div>
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <MdOutlineHowToVote className="h-20 w-20 text-blue-500 mb-2" />
          <span className="text-regal-blue-700 text-left py-1">Elections Reports</span>
          <Select
            options={titles}
            value={selectedElection}
            onChange={handleSelectChange}
            className="w-60"
          />
        </div>
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <LiaBoxOpenSolid className="h-20 w-20 text-blue-500 mb-2" />
          <div className="flex gap-1 flex-col">
            <ul>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <Link to="/voter/vote" className="text-regal-blue-700">
                  <div className="flex items-center justify-between">
                    <span className="text-regal-blue-700">
                      Vote Your Candidate
                    </span>
                    <IoMdArrowDropright />
                  </div>
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <DataLine value="Results" label="View Results" path="/voter/results" />
    </main>
  );
};

export default VoterLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\Auth\LoginLayout.jsx
import React, { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import { useNavigate } from "react-router-dom";
import { usersRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { Link } from "react-router-dom";
import logo from "./facecast-no-bg.png";
import toast from "react-hot-toast";
// import { getCollectionById } from "../../utils/globals";
const LoginLayout = () => {
  const { logIn } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loginAllowed, setLoginAllowed] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [role, setRole] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // Set loading to true while sign-up is in progress
    setErrorMessage("");

    try {
      const loginuser = await logIn(email, password);
      setEmail("");
      setPassword("");
      console.log("login user", loginuser.user.uid);
      if (loginuser) {
        const userData = await getCollectionById(usersRef, loginuser.user.uid);
        // toast.success("Login Successful");

        if (userData.roles === "voter") {
          toast.success("Voter Login Successful");
          navigate("/voter");
        } else if (userData.roles === "admin") {
          toast.success("Admin Login Successful");
          navigate("/admin");
        } else {

          navigate("/signin");
        }
      } else {
        setErrorMessage("Invalid email or password");
      }
    } catch (error) {
      // Handle signup errors
      console.error("Error during sign-up:", error);
      setErrorMessage("Invalid email or password");
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="max-w-4xl mx-auto mt-16">
      <main className=" grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 shadow-md p-10 border-stone-200 bg-stone-50">
        <section className="shadow-sm flex items-center flex-col gap-5    justify-center pb-14">
          <img src={logo} alt="Face cast logo" className="md:max-w-sm w-48" />
        </section>
        <section class="md:border-l border-stone-300 md:p-6 md:py-10 md:px-10 ">
          {errorMessage && (
            <Alert message={errorMessage} type="error" dismissible={true} />
          )}
          {/* {successMessage && <Alert message={successMessage} type="success" />} */}
          <h2 class="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Welcome Abroad
          </h2>
          <form
            action=""
            onSubmit={handleSubmit}
            class=" mx-auto flex flex-col items-left gap-4"
          >
            <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4">
              <div>
                <label htmlFor="name1" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  class="form-input text-md"
                />
              </div>

              <div>
                <label for="password" className="form-label">
                  Password
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  class="form-input text-md"
                />
              </div>
            </div>
            <div>
              Already have an account
              <Link
                to="/signup"
                className="pl-2 py-2 font-bold text-regal-blue-600"
              >
                Create Account
              </Link>
            </div>
            <div class="flex items-center justify-between">
              <button
                class={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Signing In..." : "Sign In"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default LoginLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\SignupLayout.jsx
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../../context/AuthContext";
import { setDoc, doc } from "firebase/firestore";
import Alert from "../../Components/Alert";
import Select from "react-select";
import { options } from "./data/options";
import { useNavigate } from "react-router-dom";
import { db } from "../../config/firebase";
import { BsPersonBoundingBox } from "react-icons/bs";
import { faceio } from "../../config/faceio";
import { permissionRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { FaInfoCircle, FaCheck, FaTimes } from "react-icons/fa";
import toast from "react-hot-toast";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";

const SignupLayout = () => {
  const navigate = useNavigate();
  const [signUpAllowed, setSignUpAllowed] = useState(true);
  const { signUp, PERMISSIONSID } = useAuth();

  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

  const emailRef = useRef();
  const pwdRef = useRef();

  const [email, setEmail] = useState("");
  const [validEmail, setValidEmail] = useState(false);
  const [emailFocus, setEmailFocus] = useState("");

  const [password, setPassword] = useState("");
  const [validPassword, setValidPassword] = useState(false);
  const [passwordFocus, setPasswordFocus] = useState("");

  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCninc] = useState("");
  const [phone, setPhone] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [area, setArea] = useState("");
  const [faceData, setFaceData] = useState("");

  const [loading, setLoading] = useState(false);
  const [faceEnrolled, setFaceEnrolled] = useState(false);

  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    setValidEmail(EMAIL_REGEX.test(email));
  }, [email]);

  useEffect(() => {
    setValidPassword(PWD_REGEX.test(password));
  }, [password]);

  useEffect(() => {
    const fetchPermissions = async () => {
      const permissionData = await getCollectionById(
        permissionRef,
        PERMISSIONSID
      );
      if (permissionData) {
        setSignUpAllowed(permissionData.signUp);
      }
    };
    fetchPermissions();
  }, [PERMISSIONSID]);

  const handleFaceRegister = async () => {
    try {
      let response = await faceio.enroll({
        locale: "auto",
        payload: {
          email: email,
        },
      });
      console.log(`Unique Facial ID: ${response.facialId}
      Enrollment Date: ${response.timestamp}
      Gender: ${response.details.gender}
      Age Approximation: ${response.details.age}`);

      setFaceData(response);
      setFaceEnrolled(true);
    } catch (error) {
      console.log(error);
      setFaceEnrolled(false);
      setErrorMessage("Face enrollment failed. Please try again.");
    }
  };

  const handleProvinceChange = (selectedOption) => {
    setProvince(selectedOption);
    setCity("");
    setArea("");
  };

  const handleCityChange = (selectedOption) => {
    setCity(selectedOption);
    setArea("");
  };

  const handleAreaChange = (selectedOption) => {
    setArea(selectedOption);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!faceEnrolled) {
      setErrorMessage("Face enrollment is required to sign up.");
      return;
    }
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");

    try {
      const userCredential = await signUp(email, password);
      const user = userCredential.user;
      if (user) {
        const userId = user.uid;
        await setDoc(doc(db, "users", userId), {
          email,
          fname,
          lname,
          cnic,
          phone,
          address: {
            province: province.label || "",
            city: city.label || "",
            area: area.label || "",
          },
          faceData: faceData,
          roles: "voter",
        });
        toast.success("User Created Successfully");

        setCninc("");
        setFname("");
        setLname("");
        setPhone("");
      }
      setEmail("");
      setPassword("");
      setSuccessMessage("Sign-up successful!");
      navigate("/voter");
    } catch (error) {
      console.error("Error during sign-up:", error);
      switch (error.code) {
        case "auth/email-already-in-use":
          setErrorMessage(
            "Email is already in use. Please choose a different email."
          );
          break;
        case "auth/weak-password":
          setErrorMessage(
            "The password is too weak. Please choose a stronger password."
          );
          break;
        default:
          setErrorMessage(
            "An error occurred during sign-up. Please try again later."
          );
          break;
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <main>
        <section className="p-6 max-w-2xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Signup
          </h2>
          {errorMessage && (
            <Alert
              message={errorMessage}
              type="error"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {successMessage && (
            <Alert
              message={successMessage}
              type="success"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {signUpAllowed ? (
            <form
              action=""
              onSubmit={handleSubmit}
              className="mx-auto flex flex-col items-left gap-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="fname"
                    className="text-lg font-normal text-slate-900"
                  >
                    First name
                  </label>
                  <input
                    type="text"
                    id="fname"
                    name="fname"
                    value={fname}
                    onChange={(e) => setFname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="lname"
                    className="text-lg font-normal text-slate-900"
                  >
                    Last name
                  </label>
                  <input
                    type="text"
                    id="lname"
                    name="lname"
                    value={lname}
                    onChange={(e) => setLname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="cnic"
                    className="text-lg font-normal text-slate-900"
                  >
                    ID number (cnic)
                  </label>
                  <input
                    type="number"
                    id="cnic"
                    name="cnic"
                    value={cnic}
                    onChange={(e) => setCninc(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="phone"
                    className="text-lg font-normal text-slate-900"
                  >
                    Phone
                  </label>
                  <PhoneInput
                    country={"pk"}
                    onlyCountries={["pk"]}
                    value={phone}
                    onChange={(value) => setPhone(value)}
                  />
                </div>
                <div>
                  <label
                    htmlFor="province"
                    className="text-lg font-normal text-slate-900"
                  >
                    Province
                  </label>
                  <Select
                    value={province}
                    onChange={handleProvinceChange}
                    options={options}
                    placeholder="Select Province"
                  />
                </div>

                <div>
                  <label
                    htmlFor="city"
                    className="text-lg font-normal text-slate-900"
                  >
                    City
                  </label>
                  <Select
                    value={city}
                    onChange={handleCityChange}
                    options={province.cities}
                    placeholder="Select City"
                  />
                </div>

                {city && city.areas && (
                  <div>
                    <label
                      htmlFor="area"
                      className="text-lg font-normal text-slate-900"
                    >
                      Area
                    </label>
                    <Select
                      value={area}
                      onChange={handleAreaChange}
                      options={city.areas.map((area) => ({
                        label: area,
                        value: area,
                      }))}
                      placeholder="Select Area"
                    />
                  </div>
                )}
                <div>
                  <label
                    htmlFor="email"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Email
                    <span
                      id="emailnote"
                      className={validEmail ? "m-2 text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      id="emailnote"
                      className={
                        validEmail || !email ? "hidden" : "text-red-600 m-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="email"
                    ref={emailRef}
                    value={email}
                    aria-invalid={validEmail ? "false" : "true"}
                    aria-describedby="emailnote"
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Please Enter"
                    onBlur={() => setEmailFocus(false)}
                    onFocus={() => setEmailFocus(true)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    className={
                      emailFocus && !validEmail
                        ? "text-red-600 flex items-center gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="" />
                    Invalid Email
                  </p>
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Password
                    <span
                      id="uidnote"
                      className={validPassword ? "text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      className={
                        validPassword || !password
                          ? "hidden"
                          : "text-red-600 flex items-center gap-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="password"
                    required
                    aria-invalid={validPassword ? "false" : "true"}
                    aria-describedby="pwdnote"
                    ref={pwdRef}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Please Enter"
                    onFocus={() => setPasswordFocus(true)}
                    onBlur={() => setPasswordFocus(false)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    id="pwdnote"
                    className={
                      passwordFocus && !validPassword
                        ? "text-red-600 flex  gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="w-6 h-6" />
                    8 to 24 characters.
                    <br />
                    Must include uppercase and lowercase letters, a number and a
                    special character.
                    <br />
                  </p>
                </div>
                <div>
                  <label
                    htmlFor="faceauth"
                    className="text-lg font-normal text-slate-900"
                  >
                    Face Authentication
                  </label>
                  <div
                    onClick={handleFaceRegister}
                    className="w-full cursor-pointer p-2 border border-gray-300 rounded-md flex items-center gap-2"
                  >
                    <BsPersonBoundingBox />
                    <span className="ml-2">Authenticate</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mt-4">
                <button
                  type="submit"
                  className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                    loading || !faceEnrolled
                      ? "opacity-50 cursor-not-allowed"
                      : ""
                  }`}
                  disabled={loading || !faceEnrolled}
                >
                  {loading ? "Signing up..." : "Sign up"}
                </button>
              </div>
            </form>
          ) : (
            <div className="bg-red-200 p-4 flex items-center rounded-md">
              <p className="text-red-800 font-semibold">
                Registration is temporarily disabled. Come back later.
              </p>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default SignupLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\user\VoteNowLayout.jsx
import React from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import { Outlet } from "react-router-dom";
const VoteNowLayout = () => {
  return (
    <main className="mx-auto max-w-5xl py-4">
      <BreadCrumbs />
      <Outlet />
    </main>
  );
};

export default VoteNowLayout;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandCreate.jsx
import React, { useEffect, useState } from "react";
import Select from "react-select";
import { MajorAreasOfPakistan } from "../Constituency/AreasSelect";
import { religions, languages, affiliations, genders } from "./data";
import Alert from "../../Components/Alert";
import { createCandidate } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import toast from "react-hot-toast";
const CandCreate = () => {
  const [name, setName] = useState("");
  // const [age, setAge] = useState("");
  const [dob, setDob] = useState("");
  const [gender, setGender] = useState("");
  const [constituency, setConstituency] = useState("");
  const [education, setEducation] = useState([
    { degree: "", institute: "", year: "" },
  ]);
  const [religion, setReligion] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [address, setAddress] = useState({
    houseNo: "",
    area: "",
    city: "",
    province: "",
  });
  const [assets, setAssets] = useState({});
  const [affiliation, setAffiliation] = useState([]); //party
  const [language, setLanguage] = useState("");
  const [loading, setLoading] = useState(false);
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Data fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching:", error);
      }
    };

    fetchData();
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleLanguageChange = (selectedOption) => {
    console.log(selectedOption.value);
    setLanguage(selectedOption.value);
  };
  const handleGenderChange = (selectedOption) => {
    console.log(selectedOption.value);
    setGender(selectedOption.value);
  };

  const handleAffiliationChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAffiliation(selectedOption.value);
  };
  const handleHouseNumberChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, houseNo: e.target.value });
  };
  const handleAreaChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAddress({ ...address, area: selectedOption.value });
  };
  const handleCityChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, city: e.target.value });
  };
  const handleProvinceChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, province: e.target.value });
  };

  const handleAddEducation = () => {
    setEducation([...education, { degree: "", institute: "", year: "" }]);
  };

  const handleRemoveEducation = (indexToRemove) => {
    setEducation(education.filter((_, index) => index !== indexToRemove));
  };

  const handleDegreeChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].degree = e.target.value;
    setEducation(updatedEducation);
  };

  const handleInstitutionChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].institute = e.target.value;
    setEducation(updatedEducation);
  };

  const handleYearChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].year = e.target.value;
    setEducation(updatedEducation);
  };

  const handleReligionChange = (selectedOption) => {
    console.log(selectedOption.value);
    setReligion(selectedOption.value);
  };
  const customStyles = {
    container: (provided) => ({
      ...provided,
      position: "relative", // Ensure the container has a relative position
    }),
  };

  const [message, setMessage] = useState("");
  const [errMessage, setErrMessage] = useState("");
  // useEffect(() => {});
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("first");
    if (
      !name ||
      // !age ||
      !dob ||
      !gender ||
      !constituency ||
      !education ||
      !religion ||
      !phone ||
      !email ||
      !manifesto ||
      !address ||
      !assets ||
      !affiliation ||
      !language ||
      !image
    ) {
      setErrMessage("Please fill in all fields");
      setLoading(false);
      return;
    }
    console.log("first");
    const data = {
      name: name,
      dob: dob,
      gender: gender,
      constituency: constituency,
      education: education ? education : {},
      religion: religion,
      phone: phone,
      email: email,
      manifesto: manifesto,
      address: address ? address : {},
      assets: assets,
      affiliation: affiliation,
      language: language,
      imageURL: "",
    };
    try {
      console.log("first in try");
      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      if (!imagePath) {
        setErrMessage("Error Uploading Image");
        setLoading(false);
        return;
      }
      data.imageURL = imagePath;

      const candidate = await createCandidate(data);
      console.log("Candidate created with ID:", candidate);
      if (candidate) {
        console.log("first in try success");
        toast.success("Candidate Created Successfully");
        // setMessage("Candidate Created Successfully");
      } else {
        setErrMessage("Error Creating Candidate");
        toast.error("Error Creating Candidate");
      }
    } catch (error) {
      console.log("Error creating candidate", error);
      // setErrMessage("Error Creating Candidate");
      console.log("first in try catch");
      toast.error("Error Creating Candidate");
    } finally {
      console.log("first in try finally");
      setLoading(false);
    }
  };
  return (
    <section>
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {errMessage && (
        <Alert
          message={errMessage}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />

      <form onSubmit={handleSubmit}>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Personal Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={(e) => handleImageUpload(e)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Gender
            </label>
            <Select
              options={genders}
              value={gender}
              onChange={handleGenderChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Date of Birth
            </label>
            <input
              type="date"
              id="dob"
              name="dob"
              value={dob}
              onChange={(e) => setDob(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Relegion
            </label>
            <Select
              options={religions}
              value={religion}
              onChange={handleReligionChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Languages Spoken
            </label>
            <Select
              options={languages}
              value={language}
              onChange={handleLanguageChange}
              styles={customStyles}
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">Address</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              House Number
            </label>
            <input
              type="text"
              id="hno"
              name="hno"
              value={address.houseNo}
              onChange={handleHouseNumberChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              Area
            </label>
            <Select
              options={MajorAreasOfPakistan}
              value={address.area}
              onChange={handleAreaChange}
              styles={customStyles}
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={address.city}
              onChange={handleCityChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={address.province}
              onChange={handleProvinceChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Education Info
        </h2>
        {education.map((edu, index) => (
          <div
            key={index}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          >
            <div>
              <label
                htmlFor={`degree-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Degree
              </label>
              <input
                type="text"
                id={`degree-${index}`}
                name={`degree-${index}`}
                value={edu.degree}
                onChange={(e) => handleDegreeChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`institute-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Institute
              </label>
              <input
                type="text"
                id={`institute-${index}`}
                name={`institute-${index}`}
                value={edu.institute}
                onChange={(e) => handleInstitutionChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`year-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Year
              </label>
              <input
                type="date"
                id={`year-${index}`}
                name={`year-${index}`}
                value={edu.year}
                onChange={(e) => handleYearChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            {index > 0 && (
              <div className="flex justify-start py-4">
                <button
                  className="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                  onClick={() => handleRemoveEducation(index)}
                >
                  <span className="font-semibold text-base">Remove</span>
                </button>
              </div>
            )}
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button
            className="bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600"
            onClick={handleAddEducation}
          >
            <span className="font-semibold text-base">Add Education</span>
          </button>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Political Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="const"
              className="text-lg font-normal text-slate-900"
            >
              Constituency
            </label>
            <input
              type="text"
              id="const"
              name="const"
              value={constituency}
              onChange={(e) => setConstituency(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.label}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Financial Information
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Total Assets Amount
            </label>
            <input
              type="number"
              id="total"
              name="total"
              value={assets}
              className="w-full p-1 border border-gray-300 rounded-md"
              onChange={(e) => setAssets(e.target.value)}
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating Candidate..." : "Create Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandCreate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew, MdDelete } from "react-icons/md";
import { getCandidates, deleteCandidate } from "../../utils/candidates";

const CandHome = () => {
  const [candidates, setCandidates] = useState([]);

  useEffect(() => {
    const fetchCandidates = async () => {
      const data = await getCandidates();
      setCandidates(data);
    };
    fetchCandidates();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this candidate?"
    );
    if (confirmDelete) {
      await deleteCandidate(id);
      setCandidates(candidates.filter((candidate) => candidate.id !== id));
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <MdDelete />
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">
        Candidate Home
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email/Phone
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Affiliation
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {candidates.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.email} / {item.phone}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.affiliation.name || " "}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CandHome;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import Alert from "../../Components/Alert";
import { getCandidatesById } from "../../utils/candidates";
import DataLine from "../../Components/DataLine";
const CandPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const candData = await getCandidatesById(id);
        if (!candData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", candData);

        setData(candData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name || "N/A"} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Education</Tab>
          <Tab>Assets</Tab>
        </TabList>

        <TabPanel>
          <div>
            <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
              Overview
            </h4>

            <DataLine
              title="Affiliation"
              value={data.affiliation.name || "N/A"}
            />
            <div>
              <img
                src={data.affiliation.symbol_url}
                alt={data.name}
                className="w-16 h-16 rounded-full mr-4"
              />
            </div>
            <DataLine title="Email" value={data.email || "N/A"} />
            <DataLine title="Phone" value={data.phone || "N/A"} />
            <DataLine
              title="Address"
              value={
                `${data.address.houseNo} ${data.address.area} ${data.address.city} ${data.address.province}` ||
                "N/A"
              }
            />
            <DataLine title="Province" value={data.address.province || "N/A"} />
            {/* Add more DataLine components for other data */}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render education data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Education Details
          </h4>
          <div>
            {data.education.map((edu, index) => (
              <div key={index}>
                <DataLine title="Degree" value={edu.degree} />
                <DataLine title="Institution" value={edu.institute} />
                <DataLine title="Year" value={edu.year} />
              </div>
            ))}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render assets data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Assets
          </h4>
          <div>
            <DataLine title="Total Assets" value={data.assets} />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <div className="flex items-center">
            <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
              {title}
            </h2>
          </div>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <img
              src={data.imageURL}
              alt={data.name}
              className="w-16 h-16 rounded-full mr-4"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default CandPreview;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandUpdate.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { useParams } from "react-router-dom";
import { getCandidatesById, updateCandidates } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import Alert from "../../Components/Alert";

const CandUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [area, setArea] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [affiliation, setAffiliation] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [options, setOptions] = useState([]);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleAffiliationChange = (selectedOption) => {
    setAffiliation(selectedOption.value);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getCandidatesById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        setSuccess("Candidate found Successfully");
        console.log("Candidate data for update:", data);
        setName(data.name);
        setEmail(data.email);
        setPhone(data.phone);
        setHouseNumber(data.address.houseNo);
        setArea(data.address.area);
        setCity(data.address.city);
        setProvince(data.address.province);
        setAffiliation(data.affiliation);
      } catch (error) {
        console.error("Error fetching candidate", error);
        setError("Error fetching Candidate");
      }
    };
    fetchData();
  }, [id]);

  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Options fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching options:", error);
      }
    };

    fetchOptions();
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    try {
      const data = {
        name,
        email,
        phone,
        houseNumber,
        area,
        city,
        province,
        affiliation,
        imageURL: "",
      };

      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      data.imageURL = imagePath;

      const success = await updateCandidates(id, data);
      if (success) {
        setSuccess("Candidate updated successfully!");
        console.log("Candidate updated successfully!");
        // Reset form fields
        setHouseNumber("");
        setArea("");
        setCity("");
        setProvince("");
        setName("");
        setEmail("");
        setPhone("");
        setAffiliation("");
        setImage(null);
        setImageUrl("");
      } else {
        setError("Error updating Candidate");
      }
    } catch (error) {
      console.error("Error updating candidate: ", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert message={error} type="error" dismissible autoHideDelay={3000} />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Personal Information
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="image"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={handleImageUpload}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="phone"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Address
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="houseNumber"
              className="text-lg font-normal text-slate-900"
            >
              House Number
            </label>
            <input
              type="text"
              id="houseNumber"
              name="houseNumber"
              value={houseNumber}
              onChange={(e) => setHouseNumber(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={province}
              onChange={(e) => setProvince(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Political Affiliation
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="affiliation"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.find((option) => option.value === affiliation)}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button
            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
            type="submit"
          >
            <span className="font-semibold text-base">
              {loading ? "Loading..." : "Update Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\data.js
const languages = [
  { value: "Urdu", label: "Urdu" },
  { value: "Sindhi", label: "Sindhi" },
  { value: "English", label: "English" },
  { value: "Punjabi", label: "Punjabi" },
  { value: "Pashto", label: "Pashto" },
  { value: "Balochi", label: "Balochi" },
  { value: "Saraiki", label: "Saraiki" },
  { value: "Hindko", label: "Hindko" },
  { value: "Kashmiri", label: "Kashmiri" },
  { value: "Shina", label: "Shina" },
  { value: "Brahui", label: "Brahui" },
  { value: "Hazaragi", label: "Hazaragi" },
  { value: "Wakhi", label: "Wakhi" },
  { value: "Burushaski", label: "Burushaski" },
  { value: "Other", label: "Other" },
];
const religions = [
  { value: "Muslim", label: "Muslim" },
  { value: "Christian", label: "Christian" },
  { value: "Hindu", label: "Hindu" },
  { value: "Sikh", label: "Sikh" },
  { value: "Buddhist", label: "Buddhist" },
  { value: "Bahai", label: "Bahai" },
  { value: "Jain", label: "Jain" },
  { value: "Zoroastrian", label: "Zoroastrian" },
  { value: "Jewish", label: "Jewish" },
  { value: "Other", label: "Other" },
];
const affiliations = [
  { value: "PTI", label: "Pakistan Tehreek E Insaaf" },
  { value: "PMLN", label: "Pakistan Muslim Leagues (N)" },
  { value: "IND", label: "Independant" },
  { value: "NOT SURE", label: "Not Sure" },
];
const genders = [
  { value: "Male", label: "Male" },
  { value: "Female", label: "Female" },
  { value: "Trans", label: "Trans" },
  { value: "Other", label: "Other" },
];

module.exports = { languages, religions, affiliations,genders };

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreaCodes.js
const areaCodes = [
    { value: 'NA-118', label: 'NA-118 - Lahore 1 (Shahdara, Harbanspura, Nishtar Town)' },
    { value: 'NA-119', label: 'NA-119 - Lahore 2 (Gulberg, Model Town, Faisal Town)' },
    { value: 'NA-120', label: 'NA-120 - Lahore 3 (Ravi Town, Aziz Bhatti Town, Data Gunj Buksh Town)' },
    { value: 'NA-121', label: 'NA-121 - Lahore 4 (Walled City, Shalimar, Wagah, Lahore Cantt)' },
    { value: 'NA-122', label: 'NA-122 - Lahore 5 (Raiwind, Township, Samanabad)' },
    { value: 'NA-123', label: 'NA-123 - Lahore 6 (Iqbal Town, Green Town, Sabzazar)' },
    { value: 'NA-124', label: 'NA-124 - Lahore 7 (Johar Town, Wapda Town, Township)' },
    { value: 'NA-125', label: 'NA-125 - Lahore 8 (Cavalry Ground, DHA, Askari)' },
    { value: 'NA-126', label: 'NA-126 - Lahore 9 (Shadman, Kot Lakhpat, Ichra)' },
    { value: 'NA-127', label: 'NA-127 - Lahore 10 (Barki, Bedian Road, Kahna Nau)' },
    { value: 'NA-128', label: 'NA-128 - Lahore 11 (DHA Phase 1, Nishtar Colony, Garden Town)' },
    { value: 'NA-129', label: 'NA-129 - Lahore 12 (Sui Gas Housing Society, Punjab University, Wahdat Colony)' },
    { value: 'NA-130', label: 'NA-130 - Lahore 13 (Lahore Airport, Gulshan-e-Ravi, Baghbanpura)' },
    { value: 'NA-131', label: 'NA-131 - Lahore 14 (Jallo Park, Shah Kamal, Raiwind Road)' },
    { value: 'NA-132', label: 'NA-132 - Lahore 15 (Thokar Niaz Baig, Multan Road, Chung)' }
  ];
  
  export default areaCodes;
  

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreasSelect.js
export const MajorAreasOfPakistan = [
  { value: "Karachi", label: "Karachi" },
  { value: "Hyderabad", label: "Hyderabad" },
  { value: "Sukkur", label: "Sukkur" },
  { value: "Larkana", label: "Larkana" },
  { value: "Mirpur Khas", label: "Mirpur Khas" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Thatta", label: "Thatta" },
  { value: "Dadu", label: "Dadu" },
  { value: "Jacobabad", label: "Jacobabad" },
  { value: "Shikarpur", label: "Shikarpur" },
  { value: "Sanghar", label: "Sanghar" },
  { value: "Ghotki", label: "Ghotki" },
  { value: "Umerkot", label: "Umerkot" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Badin", label: "Badin" },
  { value: "Kotri", label: "Kotri" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tando Adam", label: "Tando Adam" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Moro", label: "Moro" },
  { value: "Kandhkot", label: "Kandhkot" },
  { value: "Daharki", label: "Daharki" },
  { value: "Rohri", label: "Rohri" },
  { value: "Jamshoro", label: "Jamshoro" },
  { value: "Mithi", label: "Mithi" },
  { value: "Hala", label: "Hala" },
  { value: "Sehwan", label: "Sehwan" },
  { value: "Naudero", label: "Naudero" },
  { value: "Warah", label: "Warah" },
  { value: "Ranipur", label: "Ranipur" },
  { value: "Kamber", label: "Kamber" },
  { value: "Rohri", label: "Rohri" },
  { value: "Meerwah", label: "Meerwah" },
  { value: "Dokri", label: "Dokri" },
  { value: "Tando Muhammad Khan", label: "Tando Muhammad Khan" },
  { value: "Moro", label: "Moro" },
  { value: "Digri", label: "Digri" },
  { value: "Qambar", label: "Qambar" },
  { value: "Wahi Pandhi", label: "Wahi Pandhi" },
  { value: "Khipro", label: "Khipro" },
  { value: "Sakrand", label: "Sakrand" },
  { value: "Mehrabpur", label: "Mehrabpur" },
  { value: "Khanpur", label: "Khanpur" },
  { value: "Matiari", label: "Matiari" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Jhol", label: "Jhol" },
  { value: "Shahdadpur", label: "Shahdadpur" },
  { value: "Sinjhoro", label: "Sinjhoro" },
  { value: "Khipro", label: "Khipro" },
  { value: "Thari Mirwah", label: "Thari Mirwah" },
  { value: "Tando Bago", label: "Tando Bago" },
  { value: "Rohri", label: "Rohri" },
  { value: "Kashmore", label: "Kashmore" },
  { value: "Ghari Khairo", label: "Ghari Khairo" },
  { value: "Madeji", label: "Madeji" },
  { value: "Tangwani", label: "Tangwani" },
  { value: "Sobho Dero", label: "Sobho Dero" },
  { value: "Lakhi", label: "Lakhi" },
  { value: "Qubo Saeed Khan", label: "Qubo Saeed Khan" },
  { value: "Daur", label: "Daur" },
  { value: "Bhiria", label: "Bhiria" },
  { value: "Mehar", label: "Mehar" },
  { value: "Bhiria Road", label: "Bhiria Road" },
  { value: "Hala New", label: "Hala New" },
  { value: "Jhudo", label: "Jhudo" },
  { value: "Sindhri", label: "Sindhri" },
  { value: "Bakrani", label: "Bakrani" },
  { value: "Samaro", label: "Samaro" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Therhi", label: "Therhi" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Sukrand", label: "Sukrand" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Mardan", label: "Mardan" },
  { value: "Swat", label: "Swat" },
  { value: "Abbottabad", label: "Abbottabad" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kohat", label: "Kohat" },
  { value: "Haripur", label: "Haripur" },
  { value: "Bannu", label: "Bannu" },
  { value: "Chitral", label: "Chitral" },
  { value: "Batagram", label: "Batagram" },
  { value: "Tank", label: "Tank" },
  { value: "Dir", label: "Dir" },
  { value: "Hangu", label: "Hangu" },
  { value: "Shangla", label: "Shangla" },
  { value: "Karak", label: "Karak" },
  { value: "Swabi", label: "Swabi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Kohistan", label: "Kohistan" },
  { value: "Buner", label: "Buner" },
  { value: "Malakand", label: "Malakand" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Mingora", label: "Mingora" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kabal", label: "Kabal" },
  { value: "Topi", label: "Topi" },
  { value: "Alpuri", label: "Alpuri" },
  { value: "Rustam", label: "Rustam" },
  { value: "Parachinar", label: "Parachinar" },
  { value: "Thana", label: "Thana" },
  { value: "Daggar", label: "Daggar" },
  { value: "Pabbi", label: "Pabbi" },
  { value: "Risalpur", label: "Risalpur" },
  { value: "Bakhshali", label: "Bakhshali" },
  { value: "Bela", label: "Bela" },
  { value: "Chakdara", label: "Chakdara" },
  { value: "Chakku", label: "Chakku" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Chitral", label: "Chitral" },
  { value: "Daggar", label: "Daggar" },
  { value: "Dargai", label: "Dargai" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Dir", label: "Dir" },
  { value: "Drosh", label: "Drosh" },
  { value: "Haripur", label: "Haripur" },
  { value: "Karak", label: "Karak" },
  { value: "Kohat", label: "Kohat" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Malakand", label: "Malakand" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Mardan", label: "Mardan" },
  { value: "Mingora", label: "Mingora" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Paharpur", label: "Paharpur" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Rustam", label: "Rustam" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Shangla", label: "Shangla" },
  { value: "Swabi", label: "Swabi" },
  { value: "Swat", label: "Swat" },
  { value: "Tank", label: "Tank" },
  { value: "Thana", label: "Thana" },
  { value: "Topi", label: "Topi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Quetta", label: "Quetta" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Chaman", label: "Chaman" },
  { value: "Turbat", label: "Turbat" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Sibi", label: "Sibi" },
  { value: "Zhob", label: "Zhob" },
  { value: "Loralai", label: "Loralai" },
  { value: "Dera Bugti", label: "Dera Bugti" },
  { value: "Nushki", label: "Nushki" },
  { value: "Mastung", label: "Mastung" },
  { value: "Kharan", label: "Kharan" },
  { value: "Panjgur", label: "Panjgur" },
  { value: "Kalat", label: "Kalat" },
  { value: "Mach", label: "Mach" },
  { value: "Awaran", label: "Awaran" },
  { value: "Qila Abdullah", label: "Qila Abdullah" },
  { value: "Ormara", label: "Ormara" },
  { value: "Pasni", label: "Pasni" },
  { value: "Kohlu", label: "Kohlu" },
  { value: "Dalbandin", label: "Dalbandin" },
  { value: "Wadh", label: "Wadh" },
  { value: "Dera Murad Jamali", label: "Dera Murad Jamali" },
  { value: "Bela", label: "Bela" },
  { value: "Kech", label: "Kech" },
  { value: "Sui", label: "Sui" },
  { value: "Gandava", label: "Gandava" },
  { value: "Chagai", label: "Chagai" },
  { value: "Harnai", label: "Harnai" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Lasbela", label: "Lasbela" },
  { value: "Makran", label: "Makran" },
  { value: "Mangochar", label: "Mangochar" },
  { value: "Mekhtar", label: "Mekhtar" },
  { value: "Pishin", label: "Pishin" },
  { value: "Killa Saifullah", label: "Killa Saifullah" },
  { value: "Musa Khel Bazar", label: "Musa Khel Bazar" },
  { value: "Killa Abdullah", label: "Killa Abdullah" },
  { value: "Barkhan", label: "Barkhan" },
  { value: "Sherani", label: "Sherani" },
  { value: "Lehri", label: "Lehri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Chaman", label: "Chaman" },
  { value: "Taftan", label: "Taftan" },
  { value: "Mand", label: "Mand" },
  { value: "Tump", label: "Tump" },
  { value: "Turbat", label: "Turbat" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Pasni", label: "Pasni" },
  { value: "Ormara", label: "Ormara" },
  { value: "Jiwani", label: "Jiwani" },
  { value: "Gaddani", label: "Gaddani" },
  { value: "Hub", label: "Hub" },
  { value: "Winder", label: "Winder" },
  { value: "Uthal", label: "Uthal" },
  { value: "Mach", label: "Mach" },
  { value: "Dera Allah Yar", label: "Dera Allah Yar" },
  { value: "Jaffarabad", label: "Jaffarabad" },
  { value: "Jhal Magsi", label: "Jhal Magsi" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Kalat", label: "Kalat" },
  { value: "Ziarat", label: "Ziarat" },
  { value: "Hanna Lake", label: "Hanna Lake" },
  { value: "Urak Valley", label: "Urak Valley" },
  { value: "Bolan Pass", label: "Bolan Pass" },
  { value: "Gaddani Beach", label: "Gaddani Beach" },
  { value: "Hingol National Park", label: "Hingol National Park" },
  { value: "Astola Island", label: "Astola Island" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Lahore", label: "Lahore" },
  { value: "Faisalabad", label: "Faisalabad" },
  { value: "Rawalpindi", label: "Rawalpindi" },
  { value: "Multan", label: "Multan" },
  { value: "Gujranwala", label: "Gujranwala" },
  { value: "Sialkot", label: "Sialkot" },
  { value: "Bahawalpur", label: "Bahawalpur" },
  { value: "Sargodha", label: "Sargodha" },
  { value: "Gujrat", label: "Gujrat" },
  { value: "Jhelum", label: "Jhelum" },
  { value: "Sahiwal", label: "Sahiwal" },
  { value: "Okara", label: "Okara" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Chiniot", label: "Chiniot" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Kasur", label: "Kasur" },
  { value: "Muzaffargarh", label: "Muzaffargarh" },
  { value: "Rahim Yar Khan", label: "Rahim Yar Khan" },
  { value: "Pakpattan", label: "Pakpattan" },
  { value: "Dera Ghazi Khan", label: "Dera Ghazi Khan" },
  { value: "Narowal", label: "Narowal" },
  { value: "Jhang", label: "Jhang" },
  { value: "Attock", label: "Attock" },
  { value: "Layyah", label: "Layyah" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Khushab", label: "Khushab" },
  { value: "Chakwal", label: "Chakwal" },
  { value: "Vehari", label: "Vehari" },
  { value: "Hafizabad", label: "Hafizabad" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Toba Tek Singh", label: "Toba Tek Singh" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Burewala", label: "Burewala" },
  { value: "Gojra", label: "Gojra" },
  { value: "Muridke", label: "Muridke" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Ahmedpur East", label: "Ahmedpur East" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Vihari", label: "Vihari" },
  { value: "Hasilpur", label: "Hasilpur" },
  { value: "Kahna Nau", label: "Kahna Nau" },
  { value: "Chichawatni", label: "Chichawatni" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Murree", label: "Murree" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Kot Addu", label: "Kot Addu" },
  { value: "Lodhran", label: "Lodhran" },
  { value: "Kharian", label: "Kharian" },
  { value: "Jaranwala", label: "Jaranwala" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Arifwala", label: "Arifwala" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Talagang", label: "Talagang" },
  { value: "Kahror Pakka", label: "Kahror Pakka" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Pind Dadan Khan", label: "Pind Dadan Khan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Shujaabad", label: "Shujaabad" },
  { value: "Bhalwal", label: "Bhalwal" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Bhawana", label: "Bhawana" },
  { value: "Jampur", label: "Jampur" },
  { value: "Kot Mithan", label: "Kot Mithan" },
  { value: "Pattoki", label: "Pattoki" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Kunjah", label: "Kunjah" },
  { value: "Choa Saidan Shah", label: "Choa Saidan Shah" },
  { value: "Daska", label: "Daska" },
  { value: "Hazro", label: "Hazro" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Dunyapur", label: "Dunyapur" },
  { value: "Kot Radha Kishan", label: "Kot Radha Kishan" },
  { value: "Chak Jhumra", label: "Chak Jhumra" },
  { value: "Qadirabad", label: "Qadirabad" },
  { value: "Kamra", label: "Kamra" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kahror Lal Essan", label: "Kahror Lal Essan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Lala Musa", label: "Lala Musa" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Minchinabad", label: "Minchinabad" },
  { value: "Mitha Tiwana", label: "Mitha Tiwana" },
  { value: "Monga", label: "Monga" },
  { value: "Mubarikpur", label: "Mubarikpur" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Pasrur", label: "Pasrur" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sohawa", label: "Sohawa" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Tarogil", label: "Tarogil" },
  { value: "Ugoke", label: "Ugoke" },
  { value: "Wah", label: "Wah" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Zafarwal", label: "Zafarwal" },
  { value: "Gujar Khan", label: "Gujar Khan" },
  { value: "Haveli Lakha", label: "Haveli Lakha" },
  { value: "Jalalpur Pirwala", label: "Jalalpur Pirwala" },
  { value: "Kallar Kahar", label: "Kallar Kahar" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Kharian", label: "Kharian" },
  { value: "Kot Momin", label: "Kot Momin" },
  { value: "Kundian", label: "Kundian" },
  { value: "Lalian", label: "Lalian" },
  { value: "Liaqatpur", label: "Liaqatpur" },
  { value: "Mamukanjan", label: "Mamukanjan" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Qila Didar Singh", label: "Qila Didar Singh" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Sangla Hill", label: "Sangla Hill" },
  { value: "Shahkot", label: "Shahkot" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Shamsabad", label: "Shamsabad" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sillanwali", label: "Sillanwali" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Wah Cantt", label: "Wah Cantt" },
  { value: "Bhera", label: "Bhera" },
  { value: "Chunian", label: "Chunian" },
  { value: "Darya Khan", label: "Darya Khan" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Haroonabad", label: "Haroonabad" },
  { value: "Jand", label: "Jand" },
  { value: "Jatoi", label: "Jatoi" },
  { value: "Kahna", label: "Kahna" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kallar Syedan", label: "Kallar Syedan" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Kot Sultan", label: "Kot Sultan" },
  { value: "Lalamusa", label: "Lalamusa" },
  { value: "Liaquatpur", label: "Liaquatpur" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Nowshera Virkan", label: "Nowshera Virkan" },
  { value: "Pindi Bhattian", label: "Pindi Bhattian" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Rabwah", label: "Rabwah" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Sarai Alamgir", label: "Sarai Alamgir" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Sharaqpur", label: "Sharaqpur" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Sodhra", label: "Sodhra" },
  { value: "Taunsa", label: "Taunsa" },
  { value: "Thatta Ghulamka Dheroka", label: "Thatta Ghulamka Dheroka" },
  { value: "Tibba Sultanpur", label: "Tibba Sultanpur" },
  { value: "F-6", label: "F-6" },
  { value: "F-7", label: "F-7" },
  { value: "F-8", label: "F-8" },
  { value: "F-9", label: "F-9" },
  { value: "F-10", label: "F-10" },
  { value: "F-11", label: "F-11" },
  { value: "G-5", label: "G-5" },
  { value: "G-6", label: "G-6" },
  { value: "G-7", label: "G-7" },
  { value: "G-8", label: "G-8" },
  { value: "G-9", label: "G-9" },
  { value: "G-10", label: "G-10" },
  { value: "G-11", label: "G-11" },
  { value: "G-12", label: "G-12" },
  { value: "H-8", label: "H-8" },
  { value: "H-9", label: "H-9" },
  { value: "H-10", label: "H-10" },
  { value: "I-8", label: "I-8" },
  { value: "I-9", label: "I-9" },
  { value: "I-10", label: "I-10" },
  { value: "I-11", label: "I-11" },
  { value: "E-7", label: "E-7" },
  { value: "E-8", label: "E-8" },
  { value: "E-9", label: "E-9" },
  { value: "E-10", label: "E-10" },
  { value: "E-11", label: "E-11" },
  { value: "F-5", label: "F-5" },
  { value: "G-13", label: "G-13" },
  { value: "G-14", label: "G-14" },
  { value: "G-15", label: "G-15" },
  { value: "G-16", label: "G-16" },
  { value: "G-17", label: "G-17" },
  { value: "H-11", label: "H-11" },
  { value: "H-12", label: "H-12" },
  { value: "H-13", label: "H-13" },
  { value: "H-14", label: "H-14" },
  { value: "I-12", label: "I-12" },
  { value: "I-13", label: "I-13" },
  { value: "I-14", label: "I-14" },
  { value: "I-15", label: "I-15" },
  { value: "I-16", label: "I-16" },
  { value: "I-17", label: "I-17" },
  { value: "I-18", label: "I-18" },
  { value: "D-12", label: "D-12" },
  { value: "D-13", label: "D-13" },
  { value: "D-14", label: "D-14" },
  { value: "E-6", label: "E-6" },
  { value: "E-12", label: "E-12" },
  { value: "E-13", label: "E-13" },
  { value: "E-14", label: "E-14" },
  { value: "F-12", label: "F-12" },
  { value: "F-13", label: "F-13" },
  { value: "F-14", label: "F-14" },
  { value: "G-18", label: "G-18" },
  { value: "H-15", label: "H-15" },
  { value: "H-16", label: "H-16" },
  { value: "H-17", label: "H-17" },
  { value: "I-19", label: "I-19" },
  { value: "I-20", label: "I-20" },
  { value: "I-21", label: "I-21" },
];

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstCreate.jsx
import React, { useState } from "react";
import Select from "react-select";
import { addDoc } from "firebase/firestore";
import { constituenciesRef } from "../../config/firebase.js";
import { MajorAreasOfPakistan } from "./AreasSelect.js";
import toast from "react-hot-toast";
const ConstCreate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null); // Initialize to null
  const [selectedType, setSelectedType] = useState(null); // Initialize to null
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const [ageDistribution, setAgeDistribution] = useState({
    young_adults: "",
    adults: "",
    middleaged: "",
    seniors: "",
  });
  const [genderDistribution, setGenderDistribution] = useState({
    male: "",
    female: "",
    other: "",
  });
  const [educationLevels, setEducationLevels] = useState({
    primary_school: "",
    secondary_school: "",
    higher_education: "",
  });
  const AssemblyOptions = [
    { value: "Punjab", label: "Punjab" },
    { value: "Sindh", label: "Sindh" },
    { value: "Balochistan", label: "Balochistan" },
    { value: "KPK", label: "KPK" },
    { value: "National", label: "National" },
  ];

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  const handleTypeChange = (selectedOptions) => {
    console.log("Selected Type", selectedOptions.value);
    setSelectedType(selectedOptions.value);
  };
  const data = {
    name: name,
    code: code,
    assembly: selectedType,
    region: selectedRegion,
    population: population,
    voters: voters,
    area: area,
    age_distribution: ageDistribution
      ? ageDistribution
      : { young_adults: "", adults: "", middleaged: "", seniors: "" },
    gender_distribution: genderDistribution
      ? genderDistribution
      : { male: "", female: "", other: "" },
    education_levels: educationLevels
      ? educationLevels
      : { primary_school: "", secondary_school: "", higher_education: "" },
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Data to be added", data);
      const docRef = await addDoc(constituenciesRef,data);
      console.log("Document written with ID: ", docRef.id);
      toast.success("Constituency Created Successfully");
      // Reset form fields
      setName("");
      setCode("");
      setSelectedRegion("");
      setSelectedType("");
      setPopulation("");
      setVoters("");
      setArea("");
      setAgeDistribution({
        young_adults: "",
        adults: "",
        middleaged: "",
        seniors: "",
      });
      setGenderDistribution({
        male: "",
        female: "",
        other: "",
      });
      setEducationLevels({
        primary_school: "",
        secondary_school: "",
        higher_education: "",
      });
    } catch (error) {
      console.log(error);
      toast.error("Error creating Constituency");
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="code"
              className="text-lg font-normal text-slate-900"
            >
              Code
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="assembly"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            {/* Assuming AssemblyOptions is imported */}
            <Select
              options={AssemblyOptions}
              value={selectedType}
              onChange={handleTypeChange}
            />
          </div>
          <div>
            <label
              htmlFor="region"
              className="text-lg font-normal text-slate-900"
            >
              Region
            </label>
            {/* Assuming areas is imported */}
            <Select
              options={MajorAreasOfPakistan}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label
              htmlFor="population"
              className="text-lg font-normal text-slate-900"
            >
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="voters"
              className="text-lg font-normal text-slate-900"
            >
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="young_adults"
              className="text-lg font-normal text-slate-900"
            >
              Young Adults
            </label>
            <input
              type="number"
              id="young_adults"
              name="young_adults"
              value={ageDistribution.young_adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  young_adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="adults"
              className="text-lg font-normal text-slate-900"
            >
              Adults
            </label>
            <input
              type="number"
              id="adults"
              name="adults"
              value={ageDistribution.adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="middleaged"
              className="text-lg font-normal text-slate-900"
            >
              Middle-aged
            </label>
            <input
              type="number"
              id="middleaged"
              name="middleaged"
              value={ageDistribution.middleaged}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  middleaged: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="seniors"
              className="text-lg font-normal text-slate-900"
            >
              Seniors
            </label>
            <input
              type="number"
              id="seniors"
              name="seniors"
              value={ageDistribution.seniors}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  seniors: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="male"
              className="text-lg font-normal text-slate-900"
            >
              Male
            </label>
            <input
              type="number"
              id="male"
              name="male"
              value={genderDistribution.male}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  male: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="female"
              className="text-lg font-normal text-slate-900"
            >
              Female
            </label>
            <input
              type="number"
              id="female"
              name="female"
              value={genderDistribution.female}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  female: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="other"
              className="text-lg font-normal text-slate-900"
            >
              Other
            </label>
            <input
              type="number"
              id="other"
              name="other"
              value={genderDistribution.other}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  other: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="primary_school"
              className="text-lg font-normal text-slate-900"
            >
              Primary School
            </label>
            <input
              type="number"
              id="primary_school"
              name="primary_school"
              value={educationLevels.primary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  primary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="secondary_school"
              className="text-lg font-normal text-slate-900"
            >
              Secondary School
            </label>
            <input
              type="number"
              id="secondary_school"
              name="secondary_school"
              value={educationLevels.secondary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  secondary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="higher_education"
              className="text-lg font-normal text-slate-900"
            >
              Higher Education
            </label>
            <input
              type="number"
              id="higher_education"
              name="higher_education"
              value={educationLevels.higher_education}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  higher_education: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Create Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstCreate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import {
  getConstituencies,
  deleteConstituency,
} from "../../utils/constituency";

const ConstHome = () => {
  const [constituencies, setConstituencies] = useState([]);

  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const data = await getConstituencies();
        setConstituencies(data);
      } catch (error) {
        console.error("Error fetching constituencies", error);
      }
    };
    fetchConstituencies();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this constituency?"
    );
    if (confirmDelete) {
      const isSuccess = await deleteConstituency(id);
      if (isSuccess) {
        setConstituencies(constituencies.filter((item) => item.id !== id));
      } else {
        console.error("Error deleting constituency");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        Delete
      </button>
    </div>
  );

  if (!constituencies.length) {
    return <div>Loading...</div>;
  }

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 py-4">
          Constituency Home
        </h1>
      </div>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assembly
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Code
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Region
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Voters
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {constituencies.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.assembly}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.code}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.region}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.voters}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConstHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
// import { constituencies } from "../../data/const.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getConstituencyById } from "../../utils/constituency.js";

const ConstPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const constData = await getConstituencyById(id);
        if (!constData) {
          return <div>No Data Found.</div>;
        }
        console.log("Constituency data:", constData);
        setData(constData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Demographics</Tab>
          <Tab>Age Distribution</Tab>
          <Tab>Gender Distribution</Tab>
          <Tab>Education Levels</Tab>
        </TabList>

        <TabPanel>
          <DataLine title="Registered Voters" value={data.voters || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Age
          </h4>
          {data.age_distribution && (
            <>
              <DataLine
                title="Young Adults (18yo - 25yo)"
                value={data.age_distribution.young_adults || "N/A"}
              />
              <DataLine
                title="Adults (26yo - 40yo)"
                value={data.age_distribution.adults || "N/A"}
              />
              <DataLine
                title="Middle Ages (41yo - 60yo)"
                value={data.age_distribution.middleaged || "N/A"}
              />
              <DataLine
                title="Seniors (60yo +)"
                value={data.age_distribution.seniors || "N/A"}
              />
            </>
          )}
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Gender
          </h4>
          <DataLine
            title="Male"
            value={data.gender_distribution.male || "N/A"}
          />
          <DataLine
            title="Female"
            value={data.gender_distribution.female || "N/A"}
          />
          <DataLine
            title="Others"
            value={data.gender_distribution.other || "N/A"}
          />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Education Levels
          </h4>
          <DataLine
            title="Primary School"
            value={data.education_levels.primary_school || "N/A"}
          />
          <DataLine
            title="Secondary School"
            value={data.education_levels.secondary_school || "N/A"}
          />
          <DataLine
            title="Higher Education"
            value={data.education_levels.higher_education || "N/A"}
          />
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Area</p>
            <p className="text-lg font-semibold">{data.region || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConstPreview;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstUpdate.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Select from "react-select";
import { areas } from "./data";
import {
  getConstituencyById,
  updateConstituency,
} from "../../utils/constituency";
import toast from "react-hot-toast";

const ConstUpdate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const { id } = useParams();

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region:", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getConstituencyById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Constituency data for update:", data);
        setName(data.name);
        setCode(data.code);
        setSelectedRegion(data.region);
        setPopulation(data.population);
        setVoters(data.voters);
        setArea(data.area);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [id]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const data = {
        name: name,
        code: code,
        region: selectedRegion,
        population: population,
        voters: voters,
        area: area,
      };

      const success = await updateConstituency(id, data);
      if (success) {
        console.log("Constituency updated successfully!");
        toast.success("Constituency updated successfully!");
        // Reset form fields
        setArea("");
        setCode("");
        setName("");
        setPopulation("");
        setSelectedRegion("");
        setVoters("");
      }
    } catch (error) {
      console.error("Error updating constituency: ", error);
      toast.error("Error updating constituency!");
    }
  };
  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Code
            </label>
            <input
              type="code"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Region
            </label>
            <Select
              options={areas}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Update Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\data.js
const areas = [
    { value: 'Shahdara', label: 'Shahdara' },
    { value: 'Harbanspura', label: 'Harbanspura' },
    { value: 'Nishtar Town', label: 'Nishtar Town' },
    { value: 'Gulberg', label: 'Gulberg' },
    { value: 'Model Town', label: 'Model Town' },
    { value: 'Faisal Town', label: 'Faisal Town' },
    { value: 'Ravi Town', label: 'Ravi Town' },
    { value: 'Aziz Bhatti Town', label: 'Aziz Bhatti Town' },
    { value: 'Data Gunj Buksh Town', label: 'Data Gunj Buksh Town' },
    { value: 'Walled City', label: 'Walled City' },
    { value: 'Shalimar', label: 'Shalimar' },
    { value: 'Wagah', label: 'Wagah' },
    { value: 'Lahore Cantt', label: 'Lahore Cantt' },
    { value: 'Raiwind', label: 'Raiwind' },
    { value: 'Township', label: 'Township' },
    { value: 'Samanabad', label: 'Samanabad' },
    { value: 'Iqbal Town', label: 'Iqbal Town' },
    { value: 'Green Town', label: 'Green Town' },
    { value: 'Sabzazar', label: 'Sabzazar' },
    { value: 'Johar Town', label: 'Johar Town' },
    { value: 'Wapda Town', label: 'Wapda Town' },
    { value: 'Shadman', label: 'Shadman' },
    { value: 'Kot Lakhpat', label: 'Kot Lakhpat' },
    { value: 'Ichra', label: 'Ichra' },
    { value: 'Barki', label: 'Barki' },
    { value: 'Bedian Road', label: 'Bedian Road' },
    { value: 'Kahna Nau', label: 'Kahna Nau' },
    { value: 'DHA Phase 1', label: 'DHA Phase 1' },
    { value: 'Nishtar Colony', label: 'Nishtar Colony' },
    { value: 'Garden Town', label: 'Garden Town' },
    { value: 'Sui Gas Housing Society', label: 'Sui Gas Housing Society' },
    { value: 'Punjab University', label: 'Punjab University' },
    { value: 'Wahdat Colony', label: 'Wahdat Colony' },
    { value: 'Lahore Airport', label: 'Lahore Airport' },
    { value: 'Gulshan-e-Ravi', label: 'Gulshan-e-Ravi' },
    { value: 'Baghbanpura', label: 'Baghbanpura' },
    { value: 'Jallo Park', label: 'Jallo Park' },
    { value: 'Shah Kamal', label: 'Shah Kamal' },
    { value: 'Raiwind Road', label: 'Raiwind Road' },
    { value: 'Thokar Niaz Baig', label: 'Thokar Niaz Baig' },
    { value: 'Multan Road', label: 'Multan Road' },
    { value: 'Chung', label: 'Chung' }
  ];
  
  const AssemblyOptions = [
    { value: "national", label: "National Assembly" },
    { value: "punjab", label: "Punjab Assembly" },
    { value: "sindh", label: "Sindh Assembly" },
    { value: "kpk", label: "KPK Assembly" },
    { value: "balochistan", label: "Balochistan Assembly" },
    // Add more options as needed
  ];
  export { areas, AssemblyOptions };
  

// File: \Side Projects\facecast-vote\src\Pages\Elections\CreateElection.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { createElections } from "../../utils/elections";
import {
  candidatesRef,
  constituenciesRef,
  partyRef,
} from "../../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../../utils/utilityFunctions";
import toast  from "react-hot-toast";
const CreateElection = () => {
  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState("");

  const [startDateTime, setStartDataTime] = useState("");
  const [endDateTime, setEndDateTime] = useState("");
  const [selectedAssembly, setSelectedAssembly] = useState(null);
  const [selectedConstituencies, setSelectedConstituencies] = useState([]);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [constituencyOptions, setConstituencyOptions] = useState([]);
  const [candidateOptions, setCandidateOptions] = useState([]);
  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const fieldsToRetrieve = ["name", "region", "assembly"];
        const filterField = "assembly";
        const filterValue = selectedAssembly.value; // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollection(
          constituenciesRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        setConstituencyOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", constituencyOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchConstituencies(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedAssembly]);
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const fieldsToRetrieve = ["name", "affiliation",];
        // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollectionWithOutFilter(
          candidatesRef,
          fieldsToRetrieve
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        // console.log("Formatted Party Data", formattedPartyData);
        setCandidateOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", candidateOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchCandidates(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedConstituencies]);

  const handleTypeChange = (event) => {
    setSelectedType(event.target.value);
  };

  const handleAssemblyChange = (selectedOptions) => {
    setSelectedAssembly(selectedOptions);
  };

  const handleConstituencyChange = (selectedOptions) => {
    setSelectedConstituencies(selectedOptions);
  };

  const handleCandidateChange = (index, selectedOptions) => {
    const updatedCandidates = [...selectedCandidates];
    updatedCandidates[index] = selectedOptions;
    setSelectedCandidates(updatedCandidates);
  };
  const AssemblyOptions = [
    { value: "National Assembly", label: "National Assembly" },
    { value: "Punjab", label: "Punjab Assembly" },
    { value: "Sindh", label: "Sindh Assembly" },
    // Add more options as needed
  ];

  const data = {
    title,
    selectedType,
    startDateTime,
    endDateTime,
    selectedAssembly,
    selectedConstituencies,
    selectedCandidates,
  };
  const getPartyImagebyName = async (name) => {
    try {
      const data = await fetchSpecificFieldsFromCollection(
        partyRef,
        ["symbol_url"],
        "name",
        name
      );

      console.log("Party Image Data", data);
      return data;
    } catch (error) {
      console.error("Error fetching party image:", error);
    }
  };
  useEffect(() => {
    const fetchData = async () => {
      const data = await getPartyImagebyName("Pakistan Tehreek-e-Insaf");
      console.log("Party Image Data", data);
    };
    fetchData();
  }, []);

  const electionData = {
    title: data.title,
    type: data.selectedType,
    start_at: data.startDateTime,
    end_at: data.endDateTime,
    created_at: new Date().toISOString(),
    constituencies: data.selectedConstituencies
      ? data.selectedConstituencies.map((constituency, index) => {
          return {
            const_id: constituency.value.id, // You may use a unique ID here
            name: constituency.value.name,
            candidates: data.selectedCandidates[index]
              ? data.selectedCandidates[index].map((candidate) => {
                  return {
                    id: candidate.value.id, // You may use a unique ID here
                    name: candidate.value.name,
                    partyImg: candidate.value.affiliation.symbol_url,
                  };
                })
              : [],
          };
        })
      : [],
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setLoading(true);
    setError(false); // Reset error state

    try {
      console.log("Election Data", electionData);
      const id = await createElections(electionData);
      console.log("Election Created Successfully", id);
      toast.success("Election created successfully!");
      
      // Clear form fields after successful submission
      setTitle("");
      setStartDataTime("");
      setEndDateTime("");
      setSelectedAssembly([]);
      setSelectedCandidates([]);
      setSelectedConstituencies([]);
      setSelectedType("");
    } catch (error) {
      setError(true);
      console.error("Error creating election:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Election
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Title
            </label>
            <input
              type="text"
              id="firstname"
              name="firstname"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            <Select
              options={AssemblyOptions}
              value={selectedAssembly}
              onChange={handleAssemblyChange}
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Start at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              name="date-time"
              value={startDateTime}
              onChange={(e) => setStartDataTime(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              End at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              value={endDateTime}
              onChange={(e) => setEndDateTime(e.target.value)}
              name="endtime"
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Type
            </label>
            <select
              name="type"
              id="type"
              className="w-full p-1 border border-gray-300 rounded-md"
              value={selectedType}
              onChange={handleTypeChange}
            >
              <option value="">Select an option</option>
              <option value="general">General</option>
              <option value="by-election">By-Election</option>
              {/* Add more options as needed */}
            </select>
          </div>
        </div>
        <div>
          <label htmlFor="name1" className="text-lg font-normal text-slate-900">
            Constituencies
          </label>
          <Select
            isMulti
            options={constituencyOptions}
            value={selectedConstituencies}
            onChange={handleConstituencyChange}
          />
        </div>
        {selectedConstituencies.map((constituency, index) => (
          <div key={index}>
            <label
              htmlFor={`candidates-${index}`}
              className="text-lg font-normal text-slate-900"
            >
              Candidates for {constituency.label}
            </label>
            <Select
              isMulti
              id={`candidates-${index}`}
              options={candidateOptions}
              onChange={(selectedOptions) =>
                handleCandidateChange(index, selectedOptions)
              }
            />
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              Create Election {loading ? "...." : ""} {error ? "(Error!)" : ""}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreateElection;

// File: \Side Projects\facecast-vote\src\Pages\Elections\EditModal.jsx
import React, { useState, useEffect } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { updateElection, getElectiontById } from "../../utils/elections";
const EditModal = ({ isOpen, closeModal, electionId }) => {
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");

  const [loading, setLoading] = useState(false);
  const [updated, setUpdated] = useState(false);
  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getElectiontById(electionId);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Election data for update:", data);

        setStartTime(data.start_at);
        setEndTime(data.end_at);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [electionId]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    try {
      const data = {
        start_at: startTime,
        end_at: endTime,
      };
      const success = await updateElection(electionId, data);
      if (success) {
        console.log("Election updated successfully");
        closeModal();
      }
    } catch (error) {
      console.error("Error updating election", error);
    } finally {
      setLoading(false);
    }
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Edit Schedule
              </Dialog.Title>
              <div className="mt-2">
                {updated ? (
                  <div>
                    <p className="text-lg text-regal-blue-700">
                      Election Updated Successfully.
                    </p>
                  </div>
                ) : (
                  <form>
                    <div className="flex flex-col gap-2">
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          Start Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={startTime}
                          onChange={(e) => setStartTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          End Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={endTime}
                          onChange={(e) => setEndTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>

                      <div className="flex justify-start py-4">
                        <button
                          onClick={handleSubmit}
                          className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                        >
                          <span className="font-semibold text-base">
                            {loading ? "Updating..." : "Update Election"}
                          </span>
                        </button>
                      </div>
                    </div>
                  </form>
                )}
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default EditModal;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionHome.jsx
import React, { useEffect, useState } from "react";
import EditModal from "./EditModal";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { getElections } from "../../utils/elections";
import { MdOutlineLocalPrintshop } from "react-icons/md";

const ElectionHome = () => {
  // Define data
  const [elections, setElections] = useState([]);
  const [isOpen, setIsOpen] = useState(false);

  const closeModal = () => {
    setIsOpen(false);
  };

  const [selectedElectionId, setSelectedElectionId] = useState(null);

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedElectionId(id);
  };
  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElections();
        console.log("data", data);
        if (data) {
          setElections(data);
        }
      } catch (error) {
        console.error("Error fetching documents:", error);
      }
    };
    fetchData();
  }, []);

  const generatePDF = (election) => {
    if (!election) return;

    // Get current date
    const currentDate = new Date();
    // Convert election date string to Date object
    const electionDate = new Date(election.election_date);

    // Create a new jsPDF instance with orientation 'p' for portrait mode
    const pdf = new jsPDF("p", "mm", "a4");

    // Add a header with Election Commission of Pakistan logo and title
    // Add announcement if current date is before election date

    // Add a title to the PDF
    pdf.setFontSize(18);
    pdf.setTextColor("#006600"); // Green color for title
    pdf.text("Election Data", 105, 20, { align: "center" });

    if (currentDate < electionDate) {
      // Additional text about the election announcement
      pdf.setFont("times", "normal");
      pdf.setFontSize(12);
      pdf.setTextColor("#000000"); // Black color for text
      pdf.text("Announcement:", 10, 40);
      pdf.text(
        "The Election Commission of Pakistan announces the details of the upcoming election.",
        10,
        50
      );
    }

    // Add election details to the PDF
    pdf.setFont("times", "normal");
    pdf.setFontSize(14);
    pdf.setTextColor("#000000"); // Black color for text
    pdf.text("Election Details:", 10, currentDate < electionDate ? 70 : 40);
    pdf.text(
      `Title: ${election.title}`,
      10,
      currentDate < electionDate ? 80 : 50
    );
    pdf.text(
      `Type: ${election.type}`,
      10,
      currentDate < electionDate ? 90 : 60
    );
    pdf.text(
      `Election Date: ${election.election_date}`,
      10,
      currentDate < electionDate ? 100 : 70
    );

    // Add constituencies and candidates to the PDF
    let yPosition = currentDate < electionDate ? 120 : 90; // Starting y-position for constituency data
    election.constituencies.forEach((constituency) => {
      pdf.setFont("times", "bold");
      pdf.setFontSize(16);
      pdf.text(`Constituency: ${constituency.name}`, 10, yPosition);
      yPosition += 10;
      constituency.candidates.forEach((candidate) => {
        pdf.setFont("times", "normal");
        pdf.setFontSize(14);
        pdf.text(`- ${candidate.name}`, 15, yPosition);
        yPosition += 5;
      });
      yPosition += 5; // Add spacing between constituencies
    });

    // Save the PDF file with a filename
    pdf.save("election_announcement_ecp.pdf");
  };

  // Save the PDF file with a filename

  // const difference = +new Date(election.end_at) - +new Date();
  const renderActions = (elections) => (
    <div className="flex items-center justify-between gap-4">
      <button
        className="bg-regal-blue-700 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-700/80"
        onClick={() => generatePDF(elections)} // Pass the current election item to generatePDF
      >
        <MdOutlineLocalPrintshop />
      </button>
      {
      +new Date(elections.end_at) - +new Date() > 0 ? (
        <button
          className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
          onClick={() => openModal(elections.id)} // Pass id to onEdit function
        >
          <FaRegEdit />
        </button>
      ) : null}
      <Link to={`${elections.id}`} className="text-green-600 hover:underline">
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
    </div>
  );

  return (
    <>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Elections Home
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <EditModal
        isOpen={isOpen}
        closeModal={closeModal}
        electionId={selectedElectionId}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Type
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Start datetime - End datetime
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Election Date
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          -
          {elections.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.title}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.type}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).getHours() +
                    ":" +
                    new Date(item.start_at).getMinutes() +
                    " - " +
                    new Date(item.end_at).getHours() +
                    ":" +
                    new Date(item.end_at).getMinutes()}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).toISOString().split("T")[0]}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};

export default ElectionHome;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionPreview.jsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { getElectiontById } from "../../utils/elections";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";

const ElectionPreview = () => {
  const { id } = useParams();
  const [election, setElection] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElectiontById(id);
        if (data) {
          setElection(data);
        }
      } catch (error) {
        console.error("Error fetching election:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!election) {
    return <div>No election found with the provided id.</div>;
  }

  return (
    <section>
      <ElectionDetails
        title={election.title}
        status={election.status}
        startdate={election.start_at}
        enddate={election.end_at}
        election_Date={election.election_date}
      />
      <Tabs>
        <TabList>
          <Tab>Constituencies</Tab>
          {election.constituencies.map((constituency) => (
            <Tab key={constituency.id}>{constituency.name}</Tab>
          ))}
        </TabList>

        <TabPanel>
          <ConstituenciesTabPanel election={election} />
        </TabPanel>
        {election.constituencies.map((constituency) => (
          <TabPanel key={constituency.id}>
            <CandidatesTabPanel candidates={constituency.candidates} />
          </TabPanel>
        ))}
      </Tabs>
    </section>
  );
};

const ElectionDetails = ({ title, startdate, enddate, election_Date }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <StatusBadge electionDate={election_Date} />
          <p className="text-sm text-gray-500">{election_Date}</p>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Start time</p>
            <p className="text-lg font-semibold">{startdate}</p>
          </div>
          <div>
            <p className="text-base font-medium">End time</p>
            <p className="text-lg font-semibold">{enddate}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatusBadge = ({ electionDate }) => {
  const currentDate = new Date().getDate();
  const electionDateObj = new Date(electionDate).getDate();
  console.log("election date obj", electionDateObj, "currentDAte", currentDate);

  if (electionDateObj < currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-blue-500 rounded-full uppercase font-semibold">
        Upcoming
      </span>
    );
  } else if (electionDateObj > currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-gray-500 rounded-full uppercase font-semibold">
        Offline
      </span>
    );
  } else {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-green-500 rounded-full uppercase font-semibold">
        Online
      </span>
    );
  }
};
const ConstituenciesTabPanel = ({ election }) => {
  return (
    <div>
      {election.constituencies.map((constituency) => (
        <div key={constituency.id}>
          <DataLine title={constituency.name} />
        </div>
      ))}
    </div>
  );
};

const CandidatesTabPanel = ({ candidates }) => {
  return (
    <div>
      {candidates.map((candidate) => (
        <div key={candidate.id}>
          <DataLine title="Candidate" value={candidate.name} />
        </div>
      ))}
    </div>
  );
};

export default ElectionPreview;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyCreate.jsx
import React, { useState } from "react";
import { createParty } from "../../utils/parties";
import { uploadImage } from "../../utils/globals";
import Alert from "../../Components/Alert";
import toast from "react-hot-toast";
const PartyCreate = () => {
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      name: name,
      acronym: acronym,
      leader: leader,
      ideology: ideology,
      founded: founded,
      headQuaters: headQuaters,
      manifesto: manifesto,
      email: email,
      phone: phone,
      address: address,
      symbol: symbol,
      symbol_url: "",
    };
    try {
      if (image) {
        const url = await uploadImage(image, "images/party");

        console.log(url);
        data.symbol_url = url;
        setImageUrl(url);
        console.log("Image URL:", url);
      }

      const docRef = await createParty(data);
      console.log("Party created with ID:", docRef);
      if (!docRef) {
        console.log("Error creating Party");
        setError("Error creating Party");
      }
      toast.success("Party Created Successfully");
    } catch (error) {
      console.log(error);

      toast.error("Error creating Party");
    }
    setLoading(false);
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyCreate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { getParties, deleteParty } from "../../utils/parties";

const PartyHome = () => {
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [alertMessage, setAlertMessage] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await getParties();
        setParties(response);
      } catch (error) {
        setError("Error Fetching Data");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleDelete = async (id) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this party?"
    );
    if (confirmed) {
      try {
        await deleteParty(id);
        setParties(parties.filter((party) => party.id !== id));
        setAlertMessage("Party deleted successfully");
      } catch (error) {
        setAlertMessage("Error deleting party");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
        onClick={() => handleDelete(id)}
      >
        Delete
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Party Home</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      {alertMessage && (
        <div
          className={`alert ${
            alertMessage.includes("successfully")
              ? "alert-success"
              : "alert-error"
          }`}
        >
          {alertMessage}
        </div>
      )}
      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div>{error}</div>
      ) : (
        <table className="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Reg Number
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Foundation Year
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Leader
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {parties.map((item, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.reg_number}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.name}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.founded}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.leader}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                  {renderActions(item.id)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PartyHome;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { getPartybyId, updateParty } from "../../utils/parties";
import { useParams } from "react-router-dom";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";
const PartyUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };
  const data = {
    name: name,
    acronym: acronym,
    leader: leader,
    ideology: ideology,
    founded: founded,
    headQuaters: headQuaters,
    manifesto: manifesto,
    email: email,
    phone: phone,
    address: address,
    symbol_url: "",
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const url = await uploadImage(image, "images/party");
      setSuccess("Image uploaded successfully");
      data.symbol_url = url;
      setImageUrl(url);
      console.log("Image URL:", url);
      const docRef = await updateParty(id, data);
      console.log("Party created with ID:", docRef);
      setSuccess("Party updated successfully");
      if (!docRef) {
        console.log("Error creating Party");
        toast.error("Error creating Party");
      }
    } catch (error) {
      console.log(error);
      setError("Error creating Party");
    }
    setLoading(false);
  };
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const partyData = await getPartybyId(id);
        console.log("Party Data:", partyData);
        setName(partyData.name);
        setAcronym(partyData.acronym);
        setLeader(partyData.leader);
        setIdeology(partyData.ideology);
        setFounded(partyData.founded);
        setHeadQuaters(partyData.headQuaters);
        setManifesto(partyData.manifesto);
        setEmail(partyData.email);
        setPhone(partyData.phone);
        setAddress(partyData.address);
        setSymbol(partyData.symbol);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [id]);

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyView.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { politicalParties } from "../../data/parties.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getPartybyId } from "../../utils/parties";
const PartyView = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const partyData = await getPartybyId(id);
        if (!partyData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", partyData);

        setData(partyData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <HeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Contact Information</Tab>
          <Tab>Sybmol</Tab>
        </TabList>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Overview
          </h4>
          <DataLine title="Acronym" value={data.acronym || "N/A"} />
          <DataLine title="Leader" value={data.leader || "N/A"} />
          <DataLine title="Foundation Year" value={data.founded || "N/A"} />
          <DataLine title="Ideology" value={data.ideology || "N/A"} />
          <DataLine title="Headquarters" value={data.headQuaters || "N/A"} />
          <DataLine title="Manifesto" value={data.manifesto || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Contact Information
          </h4>
          <DataLine title="Phone" value={data.phone || "N/A"} />
          <DataLine title="Email" value={data.email || "N/A"} />
          <DataLine title="Address" value={data.address || "N/A"} />
        </TabPanel>
        <TabPanel>
          <DataLine title="Party Symbol" value="" />
          <div>
            <img
              src={data.symbol_url}
              alt={data.name}
              className="w-40 h-40 rounded-sm"
            />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const HeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Registeration Number</p>
            <p className="text-lg font-semibold">{data.reg_number || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PartyView;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfilePage.jsx
import React, { useState, useEffect } from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import DataLine from "../../Components/DataLine";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail } from "../../utils/profile";
const ProfilePage = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []); // Add currUser as a dependency to useEffect
  return (
    <div class="">
      <div class="p-8 bg-white shadow mt-12 ">
        <div class="grid grid-cols-1 md:grid-cols-3 ">
          <div></div>
          <div class="relative">
            <div className="w-48 h-48 border-2 mx-auto rounded-full absolute inset-x-0 top-0 -mt-24 flex items-center justify-center text-regal-blue-50">
              {profile.image ? (
                <img
                  className="h-44 w-44 rounded-full"
                  src={profile.image}
                  alt={profile.fname + "Profile Image"}
                />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-24 w-24 bg-regal-blue-700 rounded-full"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
              )}
            </div>
          </div>
          <div></div>
        </div>

        <div class="mt-32 text-center border-b pb-10 max-w-xl mx-auto">
          <div class="bg-white overflow-hidden rounded-md border">
            <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
              <div class="sm:divide-y sm:divide-gray-200">
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Full name
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.fname + " " + profile.lname}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Email address
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.email}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Phone number
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.phone}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">CNIC</span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.cnic}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* <div class="mt-12 flex flex-col justify-center">
          <p class="text-gray-600 text-center font-light lg:px-16">
            An artist of considerable range, Ryan — the name taken by
            Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs and
            records all of his own music, giving it a warm, intimate feel with a
            solid groove structure. An artist of considerable range.
          </p>
          <button class="text-indigo-500 py-2 px-4  font-medium mt-4">
            Show more
          </button>
        </div> */}
      </div>
    </div>
  );
};

export default ProfilePage;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfileUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail, updateProfileByEmail } from "../../utils/profile";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";

const ProfileUpdate = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCnic] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
        setFname(userProfile.fname);
        setLname(userProfile.lname);
        setCnic(userProfile.cnic);
        setPhone(userProfile.phone);
        setImageUrl(userProfile.image);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");
  
    try {
      if (currUser) {
        let updatedProfile = {
          email: currUser.email,
          fname,
          lname,
          cnic,
          phone,
          image: imageUrl, // Use the existing image URL if no new image is uploaded
        };
  
        if (image) {
          // If a new image is uploaded, upload it and update the profile with the new image path
          const imagePath = await uploadImage(image, "/user/profile");
          console.log("Image Path", imagePath);
          updatedProfile = { ...updatedProfile, image: imagePath };
        }
  
        await updateProfileByEmail(currUser.email, updatedProfile);
        setSuccessMessage("Profile updated successfully!");
        toast.success("Profile updated successfully!");
      }
    } catch (error) {
      console.error("Error during profile update:", error);
      setErrorMessage("Failed to update profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div>
      <main>
        <section className="p-6 max-w-4xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Update Profile
          </h2>
          {errorMessage && <Alert message={errorMessage} type="error" />}
          {successMessage && <Alert message={successMessage} type="success" />}
          <form
            onSubmit={handleSubmit}
            className="mx-auto flex flex-col items-left gap-4"
          >
            <div>
              <label
                htmlFor="name"
                className="text-lg font-normal text-slate-900"
              >
                Image
              </label>
              <input
                type="file"
                id="image"
                name="image"
                accept="image/*"
                onChange={(e) => handleImageUpload(e)}
                
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="fname"
                  className="text-lg font-normal text-slate-900"
                >
                  First name
                </label>
                <input
                  type="text"
                  id="fname"
                  name="fname"
                  value={fname}
                  onChange={(e) => setFname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your first name"
                />
              </div>
              <div>
                <label
                  htmlFor="lname"
                  className="text-lg font-normal text-slate-900"
                >
                  Last name
                </label>
                <input
                  type="text"
                  id="lname"
                  name="lname"
                  value={lname}
                  onChange={(e) => setLname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your last name"
                />
              </div>
              <div>
                <label
                  htmlFor="cnic"
                  className="text-lg font-normal text-slate-900"
                >
                  ID number (CNIC)
                </label>
                <input
                  type="number"
                  id="cnic"
                  name="cnic"
                  value={cnic}
                  onChange={(e) => setCnic(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your CNIC number"
                />
              </div>
              <div>
                <label
                  htmlFor="phone"
                  className="text-lg font-normal text-slate-900"
                >
                  Phone
                </label>
                <input
                  type="phone"
                  id="phone"
                  name="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your phone number"
                />
              </div>
            </div>
            <div className="flex items-center justify-between mt-4">
              <button
                className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Updating..." : "Update"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default ProfileUpdate;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\AnnounceResult.js
export const AnnounceResults = (id) => {
  console.log("Election has ended. Results will be announced soon.", id);
};

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\Modal.jsx
import React, { useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { checkUserExists } from "../../utils/profile";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const Modal = ({ isOpen, closeModal, onUserExists }) => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const { currUser } = useAuth();
  const navigate = useNavigate();

  // Function to handle input change for email
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
    setError(""); // Clear any previous errors when user types in the email field
  };

  // Function to check if the user exists based on the input email
  const handleCheckUserExists = async () => {
    try {
      const exists = await checkUserExists(email, currUser);
      if (exists) {
        onUserExists(exists);
        toast.success("User exists. Please proceed.");
        closeModal();
        // User exists, navigate or perform desired action
        // For example, navigate to a specific page
        // navigate("/da/shboard");
      } else {
        // User does not exist, display an error message or take appropriate action
        toast.error("User does not exist. Please try again.");
      }
    } catch (error) {
      console.error("Error checking user existence:", error);
      toast.error("Error checking user existence. Please try again.");
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Please verify
              </Dialog.Title>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Please verify your identity to proceed
                </p>
              </div>
              <div className="mt-4">
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="mt-1 p-2 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  placeholder="Enter your email"
                  value={email}
                  onChange={handleEmailChange}
                />
              </div>
              {error && <p className="text-sm text-red-500 mt-2">{error}</p>}
              <div className="mt-4">
                <button
                  onClick={handleCheckUserExists}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                >
                  Verify
                </button>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default Modal;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteHome.jsx
import React, { useState, useEffect } from "react";
// import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import { getElections } from "../../utils/elections";
import CountdownTimer from "../../Components/CountdownTimer";
import { getProfileByEmail } from "../../utils/profile";
import Instructions from "../../Components/Instructions";
import { Link } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";


const VoteHome = () => {
  const { currUser } = useAuth();
  const [elections, setElections] = useState([]);
  const [userElection, setUserElection] = useState([]);
  const [timeRem, setTimeRem] = useState(0);

  // useEffect(() => {

  //   const fetchElections = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //       } else {
  //         console.log("No data found");
  //         return;
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   fetchElections();
  // }, [currUser]);

  // useEffect(() => {
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //         const filteredElections = elections.filter((election) => {
  //           const userArea = profile.address.area;

  //           return election.constituencies.some((constituency) => {
  //             const constituencyArea = constituency.name;
  //             return constituencyArea.includes(userArea);
  //           });
  //         });

  //         console.log("filteredElections", filteredElections);
  //         setUserElection(filteredElections); // Update userElection state with filtered elections
  //       } else {
  //         console.log("No data found");
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  //   elections && elections.map((election) => {
  //     console.log("constiturenceis", election.constituencies);
  //   });
  //   // console.log(elections.constituencies);
  // }, [currUser.email, setElections]); // Include currUser.email and setElections in the dependency array

  // useEffect(() => {
  //   console.log("elections", elections);
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       console.log("user election", elections);
  //       console.log("user election", profile.address.area);

  //       const filteredElections = elections.filter((election) =>
  //         election.constituencies.some(
  //           (constituency) => constituency.name === profile.address.area
  //         )
  //       );
  //       console.log("filteredElections", filteredElections);
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  // }, [elections]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const profile = await getProfileByEmail(currUser.email);
        if (!profile) {
          console.log("No profile found");
          return;
        }
        const electionsData = await getElections();
        if (!electionsData) {
          console.log("No election data found");
          return;
        }
        const currentDate = new Date();
        const userArea = profile.address.area;
        console.log("userArea", userArea);
        const filteredElections = electionsData.filter(
          (election) =>
            election.constituencies.some((constituency) =>
              constituency.name.includes(userArea)
            ) &&
            new Date(election.start_at) <= currentDate &&
            currentDate <= new Date(election.end_at)
        );
        console.log("filteredElections", filteredElections);
        setUserElection(filteredElections);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [currUser.email]);
  return (
    <section className="px-4 py-5 md:py-5">
      <div className="py-5">
        <h1 className="pb-4 text-xl font-medium">Instructions</h1>
        <Instructions
          stepNumber={1}
          description="User Needs to Vderify his identity to vote"
        />
        <Instructions
          stepNumber={2}
          description="You have only 30 seconds to cast a vote"
        />
        <Instructions
          stepNumber={4}
          description="You can only vote once for a candidate"
        />
        <Instructions
          stepNumber={3}
          description="You can only vote for the candidates in your area"
        />
      </div>
      <div className="py-3 border-b border-b-slate-300">
        <h1 className="pb-4 text-3xl font-medium">Elections in your Area</h1>
      </div>
      {userElection.length > 0 ? (
        userElection.map((election) => (
          <div key={election.id}>
            <Link to={`${election.id}`}>
              <ElectionsDetails
                title={election.title}
                end={election.end_at}
                electionType={election.type}
              />
            </Link>
          </div>
        ))
      ) : (
        <div className="flex items-center justify-center mt-32">
          <h1 className="text-2xl font-sans font-semibold select-none">
            No elections found For Your Area
          </h1>
        </div>
      )}
    </section>
  );
};


const ElectionsDetails = ({ title, end, electionType }) => {
  const announceResults = () => {
    console.log("Time's up!");
  };

  return (
    <div className="border-b border-b-stone-300 mb-0 py-4">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          {/* title */}
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResults}
          />
        </div>
      </div>
    </div>
  );
};

export default VoteHome;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteScreen.jsx
// VoteScreen.jsx
import React, { useEffect, useState } from "react";
import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import ElectionCard from "../../Components/ElectionCard";
// import { AnnounceResults } from "./AnnounceResult";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import { createUserVote, checkIfUserVoted } from "../../utils/userVotes";
import { getElectiontById } from "../../utils/elections";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import Modal from "./Modal";
import { faceio } from "../../config/faceio";
import { useDispatch, useSelector } from "react-redux";
import { decrementVoteAmount } from "../../config/Slices/walletSlice";
import toast from "react-hot-toast";

const VoteScreen = () => {
  const dispatch = useDispatch();
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  const { id } = useParams();
  const { currUser } = useAuth();
  const navigate = useNavigate();
  const [election, setElection] = useState({});
  const [constituency, setConstituency] = useState({});
  const [voted, setVoted] = useState(false);
  const [verified, setVerified] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [userExists, setUserExists] = useState(false);
  const [message, setMessage] = useState("");
  const [authError, setAuthError] = useState(false);
  const [loading, setLoading] = useState(true);

  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };

  const authenticateUser = async () => {
    try {
      const userData = await faceio.authenticate({
        locale: "auto", // Default user locale
      });
      console.log("Success, user identified", userData);
      setVerified(true);
      faceio.restartSession();
    } catch (error) {
      console.error("Error authenticating user:", error);
      setAuthError(true); // Set authentication error flag
    }
  };

  useEffect(() => {
    authenticateUser();
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      navigate("/voter");
    }, 60000); // 1 minute in milliseconds

    return () => clearTimeout(timer);
  }, [navigate]);

  const handleUserExists = (exists) => {
    if (exists) {
      setUserExists(exists);
      setVerified(true);
    } else {
      setVerified(false);
      setMessage(
        <div className="p-4 bg-red-100 rounded-md">
          Error Validating User Please Try Again.{" "}
          <button onClick={handleNavigateButtonClick} className="text-red-800">
            Go back
          </button>
        </div>
      );
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedElection = await getElectiontById(id);
        const userArea = "Lahore"; // Replace with actual user's area
        const matchingConstituency = fetchedElection.constituencies.find(
          (constituency) => constituency.name.includes(userArea)
        );
        console.log("matchingConstituency", matchingConstituency);
        setElection(fetchedElection);
        setConstituency(matchingConstituency);
      } catch (error) {
        console.error("Error fetching election:", error);
        setMessage("Error fetching election details, please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleNavigateButtonClick = () => {
    navigate("/voter");
  };

  useEffect(() => {
    const difference = +new Date(election.end_at) - +new Date();

    if (difference <= 0) {
      setMessage(
        <div className="p-4 bg-regal-blue-100 rounded-md">
          Election has ended. Results will be announced soon.{" "}
          <button
            onClick={handleNavigateButtonClick}
            className="text-regal-blue-600"
          >
            Go back
          </button>
        </div>
      );
    }
  }, [election, constituency]);

  useEffect(() => {
    const checkIfVoted = async () => {
      try {
        const ifVoted = await checkIfUserVoted(
          currUser.uid,
          constituency.const_id,
          election.id
        );
        setVoted(ifVoted);
        if (ifVoted) {
          setMessage("You have already voted");
        }
      } catch (error) {
        console.error("Error checking if user voted:", error);
        setMessage("Error checking vote status, please try again.");
      }
    };
    if (currUser && constituency.const_id && election.id) {
      checkIfVoted();
    }
  }, [currUser, constituency, election]);

  const handleOtherAuth = () => {
    openModal();
  };

  const handleVote = async (candidateId) => {
    console.log("voted for ", candidateId);
    console.log("user", currUser.uid);
    if (walletValue < 5) {
      toast.error("You don't have enough balance to vote");
      return;
    } else {
      try {
        if (!voted) {
          await createUserVote({
            candidate_id: candidateId,
            election_id: election.id,
            user_id: currUser.uid,
            constituency_id: constituency.const_id,
            dated: new Date().toISOString(),
          });
          dispatch(decrementVoteAmount());
          console.log("voted successfully");
          toast.success("Voted Successfully");
          setVoted(true);
        } else {
          console.log("user has already voted");
        }
      } catch (error) {
        console.log("error", error);
        toast.error("Error voting, please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      {isOpen && (
        <Modal
          isOpen={isOpen}
          closeModal={closeModal}
          onUserExists={handleUserExists}
        />
      )}
      {verified ? (
        <section className="md:px-8 py-4 px-4">
          <div>
            <ElectionsDetails
              title={election.title}
              end={election.end_at}
              electionType={election.type}
              id={id}
            />
          </div>

          <div className="py-4 flex items-center justify-between">
            <h3 className="text-lg font-normal">
              Date:{" "}
              <span className="font-semibold">
                {new Date(election.start_at).toLocaleString() || ""}
              </span>
            </h3>
          </div>
          {message.length > 0 && (
            <Alert
              message={message}
              type="success"
              dismissible={true}
              autoHideDelay={8000}
            />
          )}
          {voted && (
            <div className="bg-green-200 p-4 flex items-center rounded-md my-5">
              <p className="text-green-800 font-semibold">
                You have Voted Successfully
              </p>
            </div>
          )}
          <div className="grid px-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
            {constituency.candidates &&
              constituency.candidates.map((candidate) => (
                <ElectionCard
                  key={candidate.id}
                  candidate={candidate}
                  onVote={handleVote}
                  disabled={voted}
                />
              ))}
          </div>
        </section>
      ) : (
        <div className="bg-red-200 p-4 flex items-center rounded-md my-5">
          <p className="text-red-950 font-semibold">
            Auth failed try again later
          </p>
          <button className="mx-2" onClick={handleOtherAuth}>
            Other method
          </button>
        </div>
      )}
    </div>
  );
};

export default VoteScreen;

// File: \Side Projects\facecast-vote\src\Pages\AdminSettings.jsx
import React, { useState } from "react";
import { Switch } from "@headlessui/react";
import { updateDocument } from "../utils/globals"; //returns boolean true or false
import { useAuth } from "../context/AuthContext";
import { permissionRef } from "../config/firebase";
import { Link } from "react-router-dom";
import toast from "react-hot-toast";
import { FaRegHandPointRight } from "react-icons/fa6";

const AdminSettings = () => {
  const { PERMISSIONSID } = useAuth();
  const [signUp, setSignUp] = useState(true);
  const [complaints, setComplaints] = useState(true);
  const [voterLogin, setVoterLogin] = useState(true);

  const handleToggleSignUp = async () => {
    const newSignUp = !signUp;
    await updateDocument(permissionRef, PERMISSIONSID, {
      signUp: newSignUp,
    });

    setSignUp(newSignUp);
    console.log("signUp", newSignUp);
  };

  const handleToggleComplaints = async () => {
    const newComplaints = !complaints;
    await updateDocument(permissionRef, PERMISSIONSID, {
      complaints: newComplaints,
    });

    setComplaints(newComplaints);
    console.log("complaints", newComplaints);
  };

  const handleToggleVoterLogin = async () => {
    const newVoterLogin = !voterLogin;
    await updateDocument(permissionRef, PERMISSIONSID, {
      voterLogin: newVoterLogin,
    });

    setVoterLogin(newVoterLogin);
    console.log("voterLogin", newVoterLogin);
  };

  return (
    <div>
      <section>
        <h1 className="text-2xl font-semibold text-gray-800 py-4">Settings</h1>
        <hr className="py-2 border-t-2 border-gray-300" />
        <div>
          <h1 className="text-lg font-semibold text-gray-800 py-4">
            Permissions
          </h1>
          <DataLine
            value="Voter Registration"
            enabled={signUp}
            handleToggle={handleToggleSignUp}
          />
          <DataLine
            value="Complaints"
            enabled={complaints}
            handleToggle={handleToggleComplaints}
          />
          <DataLine
            value="Voter Login"
            enabled={voterLogin}
            handleToggle={handleToggleVoterLogin}
          />
          <DataLine1
            value="Seed Data"
            label={voterLogin}
            path="/admin/settings/seed-data"
          />
        </div>
      </section>
    </div>
  );
};
const DataLine1 = ({ value, label, path }) => {
  return (
    <div className="border-b border-gray-200 py-4 ">
      <Link to={path} className="text-regal-blue-600 flex justify-between">
        <span className=" text-gray-900">{value}</span>
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

const DataLine = ({ value, enabled, handleToggle }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className="text-gray-900">{value}</span>
      <Switch
        checked={enabled}
        onChange={handleToggle}
        className={`group inline-flex h-6 w-11 items-center rounded-full transition duration-300 ease-in-out ${
          enabled
            ? "bg-regal-blue-500" // Apply this color when enabled
            : "bg-gray-200" // Apply this color when not enabled
        }`}
      >
        <span className="sr-only">Enable/Disable</span>
        <span
          className={`${
            enabled
              ? "translate-x-5 bg-regal-blue-800"
              : "translate-x-1 bg-white"
          } inline-block w-5 h-5 transform pointer-events-none rounded-full transition ease-in-out duration-200`}
        />
      </Switch>
    </div>
  );
};

export default AdminSettings;

// File: \Side Projects\facecast-vote\src\Pages\ComplaintModal.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { SlEnvolopeLetter } from "react-icons/sl";
import { RiPagesLine } from "react-icons/ri";
import { complainRef, permissionRef } from "../config/firebase";
import { createDocument, getCollectionById } from "../utils/globals";
import { useAuth } from "../context/AuthContext";
const ComplaintModal = ({ isOpen, closeModal }) => {
  const { PERMISSIONSID } = useAuth();
  const [ComplaintsAllowed, setComplaintsAllowed] = useState(false);
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [subject, setSubject] = useState("");
  const [message, setMessage] = useState("");

  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  //   const [password, setPassword] = useState("");
  //   const { currUser } = useAuth();
  useEffect(() => {
    const fetchPermissions = async () => {
      const permissions = await getCollectionById(permissionRef, PERMISSIONSID);
      if (permissions) {
        setComplaintsAllowed(permissions.complaints);
      }
    };
    fetchPermissions();
  }, []);

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      email,
      name,
      subject,
      message,
      status: "pending",
      remarks: "",
    };
    try {
      const submit = await createDocument(complainRef, data);
      if (submit) {
        setEmail("");
        setName("");
        setSubject("");
        setMessage("");
        setSubmitted(true);
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };
  const handleNewComplaint = () => {
    setSubmitted(false);
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                File a Complaint
              </Dialog.Title>
              {ComplaintsAllowed ? (
                <div className="mt-2">
                  {submitted ? (
                    <div className="flex flex-col py-4 font-semibold text-lg">
                      <h1>Complaint Submitted Successfully</h1>
                      <button
                        onClick={handleNewComplaint}
                        className="text-regal-blue-700 text-left py-2"
                      >
                        Another complaint?
                      </button>
                    </div>
                  ) : (
                    <form onSubmit={handleOnSubmit}>
                      <div className="flex flex-col gap-2">
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Name
                          </label>
                          <input
                            type="text"
                            id="name"
                            name="name"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            email
                          </label>
                          <input
                            type="email"
                            id="email"
                            name="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Subject
                          </label>
                          <input
                            type="text"
                            id="subject"
                            name="subject"
                            value={subject}
                            onChange={(e) => setSubject(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Message
                          </label>
                          <textarea
                            rows="4"
                            cols="50"
                            name="message"
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          ></textarea>
                        </div>

                        <div className="flex justify-start py-4">
                          <button
                            // onClick={closeModal}
                            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                          >
                            <span className="font-semibold text-base">
                              Register Complaint
                            </span>
                          </button>
                        </div>
                      </div>
                    </form>
                  )}
                </div>
              ) : (
                <div className="bg-red-200 p-2 mt-4 flex items-center rounded-md">
                  <p className="text-red-800 font-semibold">
                    Complaints are temproarily Closed
                  </p>
                </div>
              )}
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ComplaintModal;

// File: \Side Projects\facecast-vote\src\Pages\Results.jsx
import React, { useState, useEffect } from "react";
import { getCollections } from "../utils/globals";
import { resultsRef } from "../config/firebase";
import { MdPrint } from "react-icons/md";
import toast from "react-hot-toast";
import { generateResultPdf } from "../utils/pdgGen";

const Results = () => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // Add error state

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const fetchedResults = await getCollections(resultsRef);
        console.log("Fetched Results: ", fetchedResults); // Debug log
        setResults(fetchedResults);
        setLoading(false);
      } catch (error) {
        console.log("Error fetching results", error);
        setError("Error fetching results");
        setLoading(false);
      }
    };
    fetchResults();
  }, []);

  const asyncGeneratePDF = async (result) => {
    console.log("Generating PDF for", result);
    const value = await generateResultPdf(result);
    if (value === true) {
      toast.success("PDF generated successfully");
    } else {
      toast.error("Error generating PDF");
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <section>
        <h1 className="text-3xl font-semibold text-gray-800 py-6">Results</h1>
        <hr className="py-4 border-t-2 border-gray-300" />
        {results.length > 0 ? (
          results.map((result) => (
            <DataLine1
              key={result.id}
              value={result.electionTitle}
              result={result}
              onPrintClick={asyncGeneratePDF}
            />
          ))
        ) : (
          <p>No results available</p>
        )}
      </section>
    </div>
  );
};

const DataLine1 = ({ value, result, onPrintClick }) => {
  return (
    <div className="border-b border-gray-200 py-4 flex justify-between">
      <span className="text-gray-900 text-lg font-medium">{value}</span>
      <button
        onClick={() => onPrintClick(result)}
        className="flex flex-row items-center gap-5"
      >
        <MdPrint className="h-6 w-6" />
      </button>
    </div>
  );
};

export default Results;

// File: \Side Projects\facecast-vote\src\Pages\SeedData.jsx
import React from "react";
import Select from "react-select";
import Instructions from "../Components/Instructions";
import { useEffect, useState } from "react";
import { electionsRef, usersRef } from "../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../utils/utilityFunctions";
import { writeBatch, addDoc } from "firebase/firestore";
import { db, userVoteRef } from "../config/firebase";
import toast from "react-hot-toast";

const SeedData = () => {
  const [selectedElection, setSelectedElection] = useState(null);
  const [options, setOptions] = useState([]);
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const [users, setUsers] = useState([]);
  const [elections, setElections] = useState([]);
  const [seeding, setSeeding] = useState(false);
  const [batchSize, setBatchSize] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["constituencies", "title"];
        const Data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          electionsRef,
          fieldsToRetrieve
        );
        console.log("Data new", Data); // Update constituencies state
        const formattedData = Data.map((item) => ({
          value: item,
          label: item.title,
        }));

        console.log("Formatted  Data", formattedData);
        // setElections(Data);
        setOptions(formattedData);
        console.log("Election Options", options);
      } catch (error) {
        console.error("Error fetching :", error);
      }
    };
    console.log("Selected Assembly", selectedElection);

    fetchData();
  }, []);
  const handleElectionChange = (selectedOption) => {
    console.log("Selected Election", selectedOption.value.id);
    setElections(selectedOption.value.id);
    setSelectedElection(selectedOption.value);
    // Call fetchConstituencies here
    fetchConstituencies(selectedOption.value);
  };

  const fetchConstituencies = async (selectedOption) => {
    // console.log("Selected Option", elections[0].id);
    // console.log("Selected Option", selectedOption.value);
    if (selectedOption) {
      // Update constituencies state
      setConstituencies(selectedOption.constituencies);
      getCandidates(selectedOption.constituencies);
      console.log("Selected Constituencies", selectedOption.constituencies);
    }
  };

  const getCandidates = async (constituencies) => {
    const allCandidates = constituencies.flatMap((constituency) =>
      constituency.candidates.map((candidate) => ({
        id: candidate.id,
        name: candidate.name,
      }))
    );

    // Update candidates state
    setCandidates(allCandidates);
    console.log("Selected Candidates", allCandidates);
  };
  

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const filterField = "roles";
        const filterValue = "voter";
        const fieldsToRetrieve = ["roles"];

        const Data = await fetchSpecificFieldsFromCollection(
          usersRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new users", Data); // Update constituencies state
        const formattedData = Data.map((item) => ({
          value: item,
          label: item.roles,
        }));
        console.log("Formatted  Data Users", formattedData);
        setUsers(Data);
      } catch (error) {
        console.error("Error fetching :", error);
      }
    };
    fetchUsers();
  }, []);

  const generaterandomConsitituency = () => {
    const randomConstituency =
      constituencies[Math.floor(Math.random() * constituencies.length)];
    return randomConstituency.const_id;
  };
  const generaterandomCandidate = () => {
    const randomCandidate =
      candidates[Math.floor(Math.random() * candidates.length)];
    return randomCandidate.id;
  };
  //   const generateRandomUserData = () => {
  //     const randomUser = users[Math.floor(Math.random() * users.length)];
  //     return randomUser.id;
  //   };
  const votes = [];
  const generateRandomVote = () => {
    console.log("Election", elections);
    for (let i = 0; i < 250; i++) {
      // const electionId = generateRandomId(12); // Adjust the length as needed
      const vote = {
        election_id: elections,
        candidate_id: generaterandomCandidate(),
        constituency_id: generaterandomConsitituency(),
        user_id: generateRandomId(12),
      };
      votes.push(vote);
    }
  };
  let percentage;
  const seedingData7 = async () => {
    try {
      let batch = writeBatch(db);
     
      const totalVotes = votes.length;
      let progress = 0;

      for (let i = 0; i < totalVotes; i += batchSize) {
        const batchVotes = votes.slice(i, i + batchSize);
        batchVotes.forEach((data) => {
          const docRef = addDoc(userVoteRef, data);
        });

        await batch.commit();
        progress += batchVotes.length;

        // Calculate progress percentage
        percentage = (progress / totalVotes) * 100;
        console.log(`Seeding progress: ${percentage.toFixed(2)}%`);

        // Reset batch for next iteration
        batch = writeBatch(db);
      }

      console.log("Data Seeding Successful");
      toast.success("Data Seeding Successful");
    } catch (error) {
      console.log(error);
      toast.error("Data Seeding Failed");
    }
  };

  const generateRandomId = (length) => {
    let id = "";
    const characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
      id += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return id;
  };
  const handleSeedData = () => {
    console.log("Constituency", generaterandomConsitituency());
    console.log("Candidate", generaterandomCandidate());
    // console.log("user", generateRandomUserData());
    generateRandomVote();
    setSeeding(true);
    seedingData7();
    setSeeding(false);
  };

  return (
    <div>
      <main>
        <section className="py-6 max-w-6xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-2xl mb-6 text-slate-900">
            Seed Sample Data
          </h2>
          <div className="">
            <h1 className="pb-4 text-xl font-medium">Instructions</h1>
            <Instructions
              stepNumber={1}
              description="This Feature is only for testing purposes."
            />
            <Instructions
              stepNumber={2}
              description="Will be used to seed sample data into the database. to test possible application scenarios."
            />
          </div>
          <div className="mt-6 grid  grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4 border-t-2 py-4 border-gray-200">
            <div className="flex justify-between">
              <label
                htmlFor="name1"
                className="text-lg font-normal text-slate-900"
              >
                Select Election
              </label>
              <Select
                className="w-60"
                options={options}
                value={selectedElection}
                onChange={handleElectionChange}
              />
            </div>
            <div className="">
              <label
                htmlFor="name1"
                className="text-lg font-normal text-slate-900"
              >
                Total Votes
              </label>
              <input
                type="number"
                id="batch"
                name="batch"
                value={batchSize}
                onChange={(e) => setBatchSize(e.target.value)}
                className="w-60 mx-6 p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <button
                onClick={handleSeedData}
                className="bg-regal-blue-500 hover:bg-regal-blue-700 text-white font-bold py-2 px-4 rounded"
              >
                {seeding
                  ? `Seeding Data... ${percentage.toFixed(2)}%`
                  : "Seed Data"}
              </button>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default SeedData;

// File: \Side Projects\facecast-vote\src\Pages\SiteHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getCollections } from "../utils/globals";
import { electionsRef, candidatesRef, partyRef } from "../config/firebase";
import { generatePDF, generatePDF1 } from "../utils/pdgGen";
import Select from "react-select";
import { IoMdArrowDropright } from "react-icons/io";
import HeroImage from "../assets/HeroImage3.jpg";

const VoterLayout = () => {
  const { currUser } = useAuth();
  const [party, setParty] = useState([]);
  const [titles, setTitles] = useState([]);
  const [candidate, setCandidate] = useState([]);
  const [selectedElection, setSelectedElection] = useState(null);
  const [selectedCandidate, setSelectedCandidate] = useState(null);
  const [isOpen, setIsOpen] = useState(false);

  const getElectionTitles = async () => {
    try {
      const electionData = await getCollections(electionsRef);
      const titlesArray = electionData.map((election) => ({
        value: election,
        label: election.title,
      }));
      setTitles(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };
  const getParties = async () => {
    try {
      const partyData = await getCollections(partyRef);
      console.log("partyData", partyData);
      setParty(partyData);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };
  const getCandidaetsTitles = async () => {
    try {
      const candidateData = await getCollections(candidatesRef);
      const titlesArray = candidateData.map((data) => ({
        value: data,
        label: data.name,
      }));

      setCandidate(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };

  useEffect(() => {
    getElectionTitles();
  }, []);
  useEffect(() => {
    getCandidaetsTitles();
  }, []);
  useEffect(() => {
    getParties();
  }, []);
  const advantages = [
    {
      id: 1,
      title: "Accessibility",
    },
    {
      id: 2,
      title: "Convenience",
    },
    {
      id: 3,
      title: "Cost-effectiveness",
    },
    {
      id: 4,
      title: "Accuracy and Security",
    },
    {
      id: 5,
      title: "Increased Voter Engagement",
    },
    {
      id: 6,
      title: "Efficiency in Vote Counting",
    },
    {
      id: 7,
      title: "Flexibility in Voting Hours",
    },
    {
      id: 8,
      title: "Enhanced Transparency",
    },
  ];
  return (
    <div>
      <div className=" max-w-6xl mx-auto">
        <section class="text-gray-600 body-font">
          <div class="container mx-auto flex px-5 py-24 md:flex-row flex-col items-center">
            <div class="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
              <h1 class="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">
                Pakistan's first online voting system
              </h1>
              <p class="mb-8 leading-relaxed">
                Vote from anywhere in the world, your right is just a click away
                you can cange pakistan. Cote now to make a better tomorrow
              </p>
              <div class="flex w-full md:justify-start justify-center items-end">
                <button class="inline-flex text-white bg-regal-blue-700 border-0 py-2 px-6 focus:outline-none hover:bg-regal-blue-800 rounded text-lg">
                  <Link to="/signin">Get Started</Link>
                </button>
              </div>
            </div>
            <div class="lg:max-w-lg lg:w-full md:w-1/2 w-5/6">
              <img
                class="object-cover object-center rounded"
                alt="hero"
                src={HeroImage}
              />
              {/* <img class="object-cover object-center rounded" alt="hero" src="https://dummyimage.com/720x600"> */}
            </div>
          </div>
        </section>
        {/*  */}
        <hr className=" border-2 " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="text-center mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium text-center title-font text-gray-900 mb-4">
                Advantages of an Online Voting Portal
              </h1>
              <p class="text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto">
                Discover how these advantages transform traditional voting
                methods, making democracy more inclusive, efficient, and
                environmentally friendly.
              </p>
            </div>
            <div class="flex flex-wrap lg:w-4/5 sm:mx-auto sm:mb-2 -mx-2">
              {advantages &&
                advantages.map((data) => (
                  <div key={data.id} class="p-2 sm:w-1/2 w-full">
                    <div class="bg-gray-100 rounded flex p-4 h-full items-center">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="3"
                        class="text-regal-blue-500 w-6 h-6 flex-shrink-0 mr-4"
                        viewBox="0 0 24 24"
                      >
                        <path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path>
                        <path d="M22 4L12 14.01l-3-3"></path>
                      </svg>
                      <span class="title-font font-medium">
                        {data.title || "Advantage"}
                      </span>
                    </div>
                  </div>
                ))}
            </div>
            <button class="flex mx-auto mt-16 text-white bg-regal-blue-700 border-0 py-2 px-8 focus:outline-none hover:bg-regal-blue-800 rounded text-lg">
              <Link to="/signin"> Vote Now</Link>
            </button>
          </div>
        </section>
        <hr className=" border-2  " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="text-center mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium text-center title-font text-gray-900 mb-4">
                A Great Leader once said
              </h1>
            </div>
            <div class="xl:w-1/2 mx-auto text-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                class="inline-block w-8 h-8 text-gray-400 mb-8"
                viewBox="0 0 975.036 975.036"
              >
                <path d="M925.036 57.197h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.399 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l36 76c11.6 24.399 40.3 35.1 65.1 24.399 66.2-28.6 122.101-64.8 167.7-108.8 55.601-53.7 93.7-114.3 114.3-181.9 20.601-67.6 30.9-159.8 30.9-276.8v-239c0-27.599-22.401-50-50-50zM106.036 913.497c65.4-28.5 121-64.699 166.9-108.6 56.1-53.7 94.4-114.1 115-181.2 20.6-67.1 30.899-159.6 30.899-277.5v-239c0-27.6-22.399-50-50-50h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.4 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l35.9 75.8c11.601 24.399 40.501 35.2 65.301 24.399z"></path>
              </svg>
              <p class="leading-relaxed text-lg">
                The first thing that I want to tell you is this, that you should
                not be influenced by any political pressure, by any political
                party or individual politician. If you want to raise the
                prestige and greatness of Pakistan, you must not fall a victim
                to any pressure, but do your duty as servants to the people and
                the State, fearlessly and honestly. You should have no hand in
                supporting this political party or that political party, this
                political leader or that political leader – this is not your
                business. Whichever government is formed according to the
                constitution, and whoever happens to be the prime minister or
                minister coming into power in the ordinary constructional
                course, your duty is not only to serve that government loyally
                and faithfully, but, at the same time, fearlessly, maintaining
                your high reputation, your prestige, your honour and the
                integrity of your service. If you will start with that
                determination, you will make a great contribution to the
                building up of Pakistan, of your conception and our dream – a
                glorious State and one of the greatest nations in the world.
              </p>
              <span class="inline-block h-1 w-10 rounded bg-regal-blue-700 mt-8 mb-6"></span>
              <h2 class="text-gray-900 font-medium title-font tracking-wider text-sm">
                Muhammad Ali Jinnah
              </h2>
              <p class="text-gray-500">Founder of Pakistan</p>
            </div>
          </div>
        </section>
        {/*  */}
        <hr className="border-2 " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="flex flex-col text-center w-full mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900">
                Registered Political Parties
              </h1>
            </div>
            <section className="max-w-6xl mx-auto">
              <div class=" flex flex-wrap -m-4">
                {party &&
                  party.map((data) => (
                    <div class="lg:w-1/3 sm:w-1/2 p-4">
                      <div class="flex relative">
                        <div className="bg-stone-900">
                          <img
                            alt="gallery"
                            class="absolute inset-0 min-w-60 max-w-full h-full object-cover object-center "
                            src={
                              data.symbol_url
                                ? data.symbol_url
                                : "https://dummyimage.com/600x360"
                            }
                          />
                        </div>
                        <div class="px-8 py-10 relative z-10 w-full border-4 border-gray-200 bg-white opacity-0 hover:opacity-100 rounded-md">
                          <h2 class="tracking-widest text-sm title-font font-medium text-regal-blue-500 mb-1">
                            {data.leader || "Party Leader"}
                          </h2>
                          <h1 class="title-font text-lg font-medium text-gray-900 mb-3">
                            {data.name || "Party Name"}
                          </h1>
                          <p class="leading-relaxed">
                            {data.manifesto || "Manifesto"}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </section>
          </div>
        </section>

        {/* <Footer /> */}
      </div>
      <div className="mt-5 bg-regal-blue-700 w-full">
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-16 mx-auto">
            <div class="lg:w-2/3 flex flex-col sm:flex-row sm:items-center items-start mx-auto">
              <h1 class="flex-grow sm:pr-16 text-2xl font-medium title-font text-gray-100">
                Submit complaints hassle-free, ensuring your voice is heard
                promptly.
              </h1>
              <button class="flex-shrink-0 text-white bg-regal-blue-900 border-0 py-2 px-8 focus:outline-none hover:bg-regal-blue-900/80 rounded text-lg mt-10 sm:mt-0">
                <Link to="signin">Submit Complaints</Link>
              </button>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
};

export default VoterLayout;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandCreate.jsx
import React, { useEffect, useState } from "react";
import Select from "react-select";
import { MajorAreasOfPakistan } from "../Constituency/AreasSelect";
import { religions, languages, affiliations, genders } from "./data";
import Alert from "../../Components/Alert";
import { createCandidate } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import toast from "react-hot-toast";
const CandCreate = () => {
  const [name, setName] = useState("");
  // const [age, setAge] = useState("");
  const [dob, setDob] = useState("");
  const [gender, setGender] = useState("");
  const [constituency, setConstituency] = useState("");
  const [education, setEducation] = useState([
    { degree: "", institute: "", year: "" },
  ]);
  const [religion, setReligion] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [address, setAddress] = useState({
    houseNo: "",
    area: "",
    city: "",
    province: "",
  });
  const [assets, setAssets] = useState({});
  const [affiliation, setAffiliation] = useState([]); //party
  const [language, setLanguage] = useState("");
  const [loading, setLoading] = useState(false);
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Data fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching:", error);
      }
    };

    fetchData();
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleLanguageChange = (selectedOption) => {
    console.log(selectedOption.value);
    setLanguage(selectedOption.value);
  };
  const handleGenderChange = (selectedOption) => {
    console.log(selectedOption.value);
    setGender(selectedOption.value);
  };

  const handleAffiliationChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAffiliation(selectedOption.value);
  };
  const handleHouseNumberChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, houseNo: e.target.value });
  };
  const handleAreaChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAddress({ ...address, area: selectedOption.value });
  };
  const handleCityChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, city: e.target.value });
  };
  const handleProvinceChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, province: e.target.value });
  };

  const handleAddEducation = () => {
    setEducation([...education, { degree: "", institute: "", year: "" }]);
  };

  const handleRemoveEducation = (indexToRemove) => {
    setEducation(education.filter((_, index) => index !== indexToRemove));
  };

  const handleDegreeChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].degree = e.target.value;
    setEducation(updatedEducation);
  };

  const handleInstitutionChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].institute = e.target.value;
    setEducation(updatedEducation);
  };

  const handleYearChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].year = e.target.value;
    setEducation(updatedEducation);
  };

  const handleReligionChange = (selectedOption) => {
    console.log(selectedOption.value);
    setReligion(selectedOption.value);
  };
  const customStyles = {
    container: (provided) => ({
      ...provided,
      position: "relative", // Ensure the container has a relative position
    }),
  };

  const [message, setMessage] = useState("");
  const [errMessage, setErrMessage] = useState("");
  // useEffect(() => {});
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("first");
    if (
      !name ||
      // !age ||
      !dob ||
      !gender ||
      !constituency ||
      !education ||
      !religion ||
      !phone ||
      !email ||
      !manifesto ||
      !address ||
      !assets ||
      !affiliation ||
      !language ||
      !image
    ) {
      setErrMessage("Please fill in all fields");
      setLoading(false);
      return;
    }
    console.log("first");
    const data = {
      name: name,
      dob: dob,
      gender: gender,
      constituency: constituency,
      education: education ? education : {},
      religion: religion,
      phone: phone,
      email: email,
      manifesto: manifesto,
      address: address ? address : {},
      assets: assets,
      affiliation: affiliation,
      language: language,
      imageURL: "",
    };
    try {
      console.log("first in try");
      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      if (!imagePath) {
        setErrMessage("Error Uploading Image");
        setLoading(false);
        return;
      }
      data.imageURL = imagePath;

      const candidate = await createCandidate(data);
      console.log("Candidate created with ID:", candidate);
      if (candidate) {
        console.log("first in try success");
        toast.success("Candidate Created Successfully");
        // setMessage("Candidate Created Successfully");
      } else {
        setErrMessage("Error Creating Candidate");
        toast.error("Error Creating Candidate");
      }
    } catch (error) {
      console.log("Error creating candidate", error);
      // setErrMessage("Error Creating Candidate");
      console.log("first in try catch");
      toast.error("Error Creating Candidate");
    } finally {
      console.log("first in try finally");
      setLoading(false);
    }
  };
  return (
    <section>
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {errMessage && (
        <Alert
          message={errMessage}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />

      <form onSubmit={handleSubmit}>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Personal Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={(e) => handleImageUpload(e)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Gender
            </label>
            <Select
              options={genders}
              value={gender}
              onChange={handleGenderChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Date of Birth
            </label>
            <input
              type="date"
              id="dob"
              name="dob"
              value={dob}
              onChange={(e) => setDob(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Relegion
            </label>
            <Select
              options={religions}
              value={religion}
              onChange={handleReligionChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Languages Spoken
            </label>
            <Select
              options={languages}
              value={language}
              onChange={handleLanguageChange}
              styles={customStyles}
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">Address</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              House Number
            </label>
            <input
              type="text"
              id="hno"
              name="hno"
              value={address.houseNo}
              onChange={handleHouseNumberChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              Area
            </label>
            <Select
              options={MajorAreasOfPakistan}
              value={address.area}
              onChange={handleAreaChange}
              styles={customStyles}
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={address.city}
              onChange={handleCityChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={address.province}
              onChange={handleProvinceChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Education Info
        </h2>
        {education.map((edu, index) => (
          <div
            key={index}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          >
            <div>
              <label
                htmlFor={`degree-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Degree
              </label>
              <input
                type="text"
                id={`degree-${index}`}
                name={`degree-${index}`}
                value={edu.degree}
                onChange={(e) => handleDegreeChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`institute-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Institute
              </label>
              <input
                type="text"
                id={`institute-${index}`}
                name={`institute-${index}`}
                value={edu.institute}
                onChange={(e) => handleInstitutionChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`year-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Year
              </label>
              <input
                type="date"
                id={`year-${index}`}
                name={`year-${index}`}
                value={edu.year}
                onChange={(e) => handleYearChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            {index > 0 && (
              <div className="flex justify-start py-4">
                <button
                  className="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                  onClick={() => handleRemoveEducation(index)}
                >
                  <span className="font-semibold text-base">Remove</span>
                </button>
              </div>
            )}
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button
            className="bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600"
            onClick={handleAddEducation}
          >
            <span className="font-semibold text-base">Add Education</span>
          </button>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Political Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="const"
              className="text-lg font-normal text-slate-900"
            >
              Constituency
            </label>
            <input
              type="text"
              id="const"
              name="const"
              value={constituency}
              onChange={(e) => setConstituency(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.label}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Financial Information
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Total Assets Amount
            </label>
            <input
              type="number"
              id="total"
              name="total"
              value={assets}
              className="w-full p-1 border border-gray-300 rounded-md"
              onChange={(e) => setAssets(e.target.value)}
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating Candidate..." : "Create Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandCreate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew, MdDelete } from "react-icons/md";
import { getCandidates, deleteCandidate } from "../../utils/candidates";

const CandHome = () => {
  const [candidates, setCandidates] = useState([]);

  useEffect(() => {
    const fetchCandidates = async () => {
      const data = await getCandidates();
      setCandidates(data);
    };
    fetchCandidates();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this candidate?"
    );
    if (confirmDelete) {
      await deleteCandidate(id);
      setCandidates(candidates.filter((candidate) => candidate.id !== id));
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <MdDelete />
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">
        Candidate Home
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email/Phone
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Affiliation
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {candidates.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.email} / {item.phone}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.affiliation.name || " "}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CandHome;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import Alert from "../../Components/Alert";
import { getCandidatesById } from "../../utils/candidates";
import DataLine from "../../Components/DataLine";
const CandPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const candData = await getCandidatesById(id);
        if (!candData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", candData);

        setData(candData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name || "N/A"} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Education</Tab>
          <Tab>Assets</Tab>
        </TabList>

        <TabPanel>
          <div>
            <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
              Overview
            </h4>

            <DataLine
              title="Affiliation"
              value={data.affiliation.name || "N/A"}
            />
            <div>
              <img
                src={data.affiliation.symbol_url}
                alt={data.name}
                className="w-16 h-16 rounded-full mr-4"
              />
            </div>
            <DataLine title="Email" value={data.email || "N/A"} />
            <DataLine title="Phone" value={data.phone || "N/A"} />
            <DataLine
              title="Address"
              value={
                `${data.address.houseNo} ${data.address.area} ${data.address.city} ${data.address.province}` ||
                "N/A"
              }
            />
            <DataLine title="Province" value={data.address.province || "N/A"} />
            {/* Add more DataLine components for other data */}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render education data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Education Details
          </h4>
          <div>
            {data.education.map((edu, index) => (
              <div key={index}>
                <DataLine title="Degree" value={edu.degree} />
                <DataLine title="Institution" value={edu.institute} />
                <DataLine title="Year" value={edu.year} />
              </div>
            ))}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render assets data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Assets
          </h4>
          <div>
            <DataLine title="Total Assets" value={data.assets} />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <div className="flex items-center">
            <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
              {title}
            </h2>
          </div>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <img
              src={data.imageURL}
              alt={data.name}
              className="w-16 h-16 rounded-full mr-4"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default CandPreview;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandUpdate.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { useParams } from "react-router-dom";
import { getCandidatesById, updateCandidates } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import Alert from "../../Components/Alert";

const CandUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [area, setArea] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [affiliation, setAffiliation] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [options, setOptions] = useState([]);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleAffiliationChange = (selectedOption) => {
    setAffiliation(selectedOption.value);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getCandidatesById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        setSuccess("Candidate found Successfully");
        console.log("Candidate data for update:", data);
        setName(data.name);
        setEmail(data.email);
        setPhone(data.phone);
        setHouseNumber(data.address.houseNo);
        setArea(data.address.area);
        setCity(data.address.city);
        setProvince(data.address.province);
        setAffiliation(data.affiliation);
      } catch (error) {
        console.error("Error fetching candidate", error);
        setError("Error fetching Candidate");
      }
    };
    fetchData();
  }, [id]);

  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Options fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching options:", error);
      }
    };

    fetchOptions();
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    try {
      const data = {
        name,
        email,
        phone,
        houseNumber,
        area,
        city,
        province,
        affiliation,
        imageURL: "",
      };

      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      data.imageURL = imagePath;

      const success = await updateCandidates(id, data);
      if (success) {
        setSuccess("Candidate updated successfully!");
        console.log("Candidate updated successfully!");
        // Reset form fields
        setHouseNumber("");
        setArea("");
        setCity("");
        setProvince("");
        setName("");
        setEmail("");
        setPhone("");
        setAffiliation("");
        setImage(null);
        setImageUrl("");
      } else {
        setError("Error updating Candidate");
      }
    } catch (error) {
      console.error("Error updating candidate: ", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert message={error} type="error" dismissible autoHideDelay={3000} />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Personal Information
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="image"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={handleImageUpload}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="phone"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Address
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="houseNumber"
              className="text-lg font-normal text-slate-900"
            >
              House Number
            </label>
            <input
              type="text"
              id="houseNumber"
              name="houseNumber"
              value={houseNumber}
              onChange={(e) => setHouseNumber(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={province}
              onChange={(e) => setProvince(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Political Affiliation
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="affiliation"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.find((option) => option.value === affiliation)}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button
            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
            type="submit"
          >
            <span className="font-semibold text-base">
              {loading ? "Loading..." : "Update Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\data.js
const languages = [
  { value: "Urdu", label: "Urdu" },
  { value: "Sindhi", label: "Sindhi" },
  { value: "English", label: "English" },
  { value: "Punjabi", label: "Punjabi" },
  { value: "Pashto", label: "Pashto" },
  { value: "Balochi", label: "Balochi" },
  { value: "Saraiki", label: "Saraiki" },
  { value: "Hindko", label: "Hindko" },
  { value: "Kashmiri", label: "Kashmiri" },
  { value: "Shina", label: "Shina" },
  { value: "Brahui", label: "Brahui" },
  { value: "Hazaragi", label: "Hazaragi" },
  { value: "Wakhi", label: "Wakhi" },
  { value: "Burushaski", label: "Burushaski" },
  { value: "Other", label: "Other" },
];
const religions = [
  { value: "Muslim", label: "Muslim" },
  { value: "Christian", label: "Christian" },
  { value: "Hindu", label: "Hindu" },
  { value: "Sikh", label: "Sikh" },
  { value: "Buddhist", label: "Buddhist" },
  { value: "Bahai", label: "Bahai" },
  { value: "Jain", label: "Jain" },
  { value: "Zoroastrian", label: "Zoroastrian" },
  { value: "Jewish", label: "Jewish" },
  { value: "Other", label: "Other" },
];
const affiliations = [
  { value: "PTI", label: "Pakistan Tehreek E Insaaf" },
  { value: "PMLN", label: "Pakistan Muslim Leagues (N)" },
  { value: "IND", label: "Independant" },
  { value: "NOT SURE", label: "Not Sure" },
];
const genders = [
  { value: "Male", label: "Male" },
  { value: "Female", label: "Female" },
  { value: "Trans", label: "Trans" },
  { value: "Other", label: "Other" },
];

module.exports = { languages, religions, affiliations,genders };

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreaCodes.js
const areaCodes = [
    { value: 'NA-118', label: 'NA-118 - Lahore 1 (Shahdara, Harbanspura, Nishtar Town)' },
    { value: 'NA-119', label: 'NA-119 - Lahore 2 (Gulberg, Model Town, Faisal Town)' },
    { value: 'NA-120', label: 'NA-120 - Lahore 3 (Ravi Town, Aziz Bhatti Town, Data Gunj Buksh Town)' },
    { value: 'NA-121', label: 'NA-121 - Lahore 4 (Walled City, Shalimar, Wagah, Lahore Cantt)' },
    { value: 'NA-122', label: 'NA-122 - Lahore 5 (Raiwind, Township, Samanabad)' },
    { value: 'NA-123', label: 'NA-123 - Lahore 6 (Iqbal Town, Green Town, Sabzazar)' },
    { value: 'NA-124', label: 'NA-124 - Lahore 7 (Johar Town, Wapda Town, Township)' },
    { value: 'NA-125', label: 'NA-125 - Lahore 8 (Cavalry Ground, DHA, Askari)' },
    { value: 'NA-126', label: 'NA-126 - Lahore 9 (Shadman, Kot Lakhpat, Ichra)' },
    { value: 'NA-127', label: 'NA-127 - Lahore 10 (Barki, Bedian Road, Kahna Nau)' },
    { value: 'NA-128', label: 'NA-128 - Lahore 11 (DHA Phase 1, Nishtar Colony, Garden Town)' },
    { value: 'NA-129', label: 'NA-129 - Lahore 12 (Sui Gas Housing Society, Punjab University, Wahdat Colony)' },
    { value: 'NA-130', label: 'NA-130 - Lahore 13 (Lahore Airport, Gulshan-e-Ravi, Baghbanpura)' },
    { value: 'NA-131', label: 'NA-131 - Lahore 14 (Jallo Park, Shah Kamal, Raiwind Road)' },
    { value: 'NA-132', label: 'NA-132 - Lahore 15 (Thokar Niaz Baig, Multan Road, Chung)' }
  ];
  
  export default areaCodes;
  

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreasSelect.js
export const MajorAreasOfPakistan = [
  { value: "Karachi", label: "Karachi" },
  { value: "Hyderabad", label: "Hyderabad" },
  { value: "Sukkur", label: "Sukkur" },
  { value: "Larkana", label: "Larkana" },
  { value: "Mirpur Khas", label: "Mirpur Khas" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Thatta", label: "Thatta" },
  { value: "Dadu", label: "Dadu" },
  { value: "Jacobabad", label: "Jacobabad" },
  { value: "Shikarpur", label: "Shikarpur" },
  { value: "Sanghar", label: "Sanghar" },
  { value: "Ghotki", label: "Ghotki" },
  { value: "Umerkot", label: "Umerkot" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Badin", label: "Badin" },
  { value: "Kotri", label: "Kotri" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tando Adam", label: "Tando Adam" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Moro", label: "Moro" },
  { value: "Kandhkot", label: "Kandhkot" },
  { value: "Daharki", label: "Daharki" },
  { value: "Rohri", label: "Rohri" },
  { value: "Jamshoro", label: "Jamshoro" },
  { value: "Mithi", label: "Mithi" },
  { value: "Hala", label: "Hala" },
  { value: "Sehwan", label: "Sehwan" },
  { value: "Naudero", label: "Naudero" },
  { value: "Warah", label: "Warah" },
  { value: "Ranipur", label: "Ranipur" },
  { value: "Kamber", label: "Kamber" },
  { value: "Rohri", label: "Rohri" },
  { value: "Meerwah", label: "Meerwah" },
  { value: "Dokri", label: "Dokri" },
  { value: "Tando Muhammad Khan", label: "Tando Muhammad Khan" },
  { value: "Moro", label: "Moro" },
  { value: "Digri", label: "Digri" },
  { value: "Qambar", label: "Qambar" },
  { value: "Wahi Pandhi", label: "Wahi Pandhi" },
  { value: "Khipro", label: "Khipro" },
  { value: "Sakrand", label: "Sakrand" },
  { value: "Mehrabpur", label: "Mehrabpur" },
  { value: "Khanpur", label: "Khanpur" },
  { value: "Matiari", label: "Matiari" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Jhol", label: "Jhol" },
  { value: "Shahdadpur", label: "Shahdadpur" },
  { value: "Sinjhoro", label: "Sinjhoro" },
  { value: "Khipro", label: "Khipro" },
  { value: "Thari Mirwah", label: "Thari Mirwah" },
  { value: "Tando Bago", label: "Tando Bago" },
  { value: "Rohri", label: "Rohri" },
  { value: "Kashmore", label: "Kashmore" },
  { value: "Ghari Khairo", label: "Ghari Khairo" },
  { value: "Madeji", label: "Madeji" },
  { value: "Tangwani", label: "Tangwani" },
  { value: "Sobho Dero", label: "Sobho Dero" },
  { value: "Lakhi", label: "Lakhi" },
  { value: "Qubo Saeed Khan", label: "Qubo Saeed Khan" },
  { value: "Daur", label: "Daur" },
  { value: "Bhiria", label: "Bhiria" },
  { value: "Mehar", label: "Mehar" },
  { value: "Bhiria Road", label: "Bhiria Road" },
  { value: "Hala New", label: "Hala New" },
  { value: "Jhudo", label: "Jhudo" },
  { value: "Sindhri", label: "Sindhri" },
  { value: "Bakrani", label: "Bakrani" },
  { value: "Samaro", label: "Samaro" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Therhi", label: "Therhi" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Sukrand", label: "Sukrand" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Mardan", label: "Mardan" },
  { value: "Swat", label: "Swat" },
  { value: "Abbottabad", label: "Abbottabad" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kohat", label: "Kohat" },
  { value: "Haripur", label: "Haripur" },
  { value: "Bannu", label: "Bannu" },
  { value: "Chitral", label: "Chitral" },
  { value: "Batagram", label: "Batagram" },
  { value: "Tank", label: "Tank" },
  { value: "Dir", label: "Dir" },
  { value: "Hangu", label: "Hangu" },
  { value: "Shangla", label: "Shangla" },
  { value: "Karak", label: "Karak" },
  { value: "Swabi", label: "Swabi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Kohistan", label: "Kohistan" },
  { value: "Buner", label: "Buner" },
  { value: "Malakand", label: "Malakand" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Mingora", label: "Mingora" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kabal", label: "Kabal" },
  { value: "Topi", label: "Topi" },
  { value: "Alpuri", label: "Alpuri" },
  { value: "Rustam", label: "Rustam" },
  { value: "Parachinar", label: "Parachinar" },
  { value: "Thana", label: "Thana" },
  { value: "Daggar", label: "Daggar" },
  { value: "Pabbi", label: "Pabbi" },
  { value: "Risalpur", label: "Risalpur" },
  { value: "Bakhshali", label: "Bakhshali" },
  { value: "Bela", label: "Bela" },
  { value: "Chakdara", label: "Chakdara" },
  { value: "Chakku", label: "Chakku" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Chitral", label: "Chitral" },
  { value: "Daggar", label: "Daggar" },
  { value: "Dargai", label: "Dargai" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Dir", label: "Dir" },
  { value: "Drosh", label: "Drosh" },
  { value: "Haripur", label: "Haripur" },
  { value: "Karak", label: "Karak" },
  { value: "Kohat", label: "Kohat" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Malakand", label: "Malakand" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Mardan", label: "Mardan" },
  { value: "Mingora", label: "Mingora" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Paharpur", label: "Paharpur" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Rustam", label: "Rustam" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Shangla", label: "Shangla" },
  { value: "Swabi", label: "Swabi" },
  { value: "Swat", label: "Swat" },
  { value: "Tank", label: "Tank" },
  { value: "Thana", label: "Thana" },
  { value: "Topi", label: "Topi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Quetta", label: "Quetta" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Chaman", label: "Chaman" },
  { value: "Turbat", label: "Turbat" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Sibi", label: "Sibi" },
  { value: "Zhob", label: "Zhob" },
  { value: "Loralai", label: "Loralai" },
  { value: "Dera Bugti", label: "Dera Bugti" },
  { value: "Nushki", label: "Nushki" },
  { value: "Mastung", label: "Mastung" },
  { value: "Kharan", label: "Kharan" },
  { value: "Panjgur", label: "Panjgur" },
  { value: "Kalat", label: "Kalat" },
  { value: "Mach", label: "Mach" },
  { value: "Awaran", label: "Awaran" },
  { value: "Qila Abdullah", label: "Qila Abdullah" },
  { value: "Ormara", label: "Ormara" },
  { value: "Pasni", label: "Pasni" },
  { value: "Kohlu", label: "Kohlu" },
  { value: "Dalbandin", label: "Dalbandin" },
  { value: "Wadh", label: "Wadh" },
  { value: "Dera Murad Jamali", label: "Dera Murad Jamali" },
  { value: "Bela", label: "Bela" },
  { value: "Kech", label: "Kech" },
  { value: "Sui", label: "Sui" },
  { value: "Gandava", label: "Gandava" },
  { value: "Chagai", label: "Chagai" },
  { value: "Harnai", label: "Harnai" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Lasbela", label: "Lasbela" },
  { value: "Makran", label: "Makran" },
  { value: "Mangochar", label: "Mangochar" },
  { value: "Mekhtar", label: "Mekhtar" },
  { value: "Pishin", label: "Pishin" },
  { value: "Killa Saifullah", label: "Killa Saifullah" },
  { value: "Musa Khel Bazar", label: "Musa Khel Bazar" },
  { value: "Killa Abdullah", label: "Killa Abdullah" },
  { value: "Barkhan", label: "Barkhan" },
  { value: "Sherani", label: "Sherani" },
  { value: "Lehri", label: "Lehri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Chaman", label: "Chaman" },
  { value: "Taftan", label: "Taftan" },
  { value: "Mand", label: "Mand" },
  { value: "Tump", label: "Tump" },
  { value: "Turbat", label: "Turbat" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Pasni", label: "Pasni" },
  { value: "Ormara", label: "Ormara" },
  { value: "Jiwani", label: "Jiwani" },
  { value: "Gaddani", label: "Gaddani" },
  { value: "Hub", label: "Hub" },
  { value: "Winder", label: "Winder" },
  { value: "Uthal", label: "Uthal" },
  { value: "Mach", label: "Mach" },
  { value: "Dera Allah Yar", label: "Dera Allah Yar" },
  { value: "Jaffarabad", label: "Jaffarabad" },
  { value: "Jhal Magsi", label: "Jhal Magsi" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Kalat", label: "Kalat" },
  { value: "Ziarat", label: "Ziarat" },
  { value: "Hanna Lake", label: "Hanna Lake" },
  { value: "Urak Valley", label: "Urak Valley" },
  { value: "Bolan Pass", label: "Bolan Pass" },
  { value: "Gaddani Beach", label: "Gaddani Beach" },
  { value: "Hingol National Park", label: "Hingol National Park" },
  { value: "Astola Island", label: "Astola Island" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Lahore", label: "Lahore" },
  { value: "Faisalabad", label: "Faisalabad" },
  { value: "Rawalpindi", label: "Rawalpindi" },
  { value: "Multan", label: "Multan" },
  { value: "Gujranwala", label: "Gujranwala" },
  { value: "Sialkot", label: "Sialkot" },
  { value: "Bahawalpur", label: "Bahawalpur" },
  { value: "Sargodha", label: "Sargodha" },
  { value: "Gujrat", label: "Gujrat" },
  { value: "Jhelum", label: "Jhelum" },
  { value: "Sahiwal", label: "Sahiwal" },
  { value: "Okara", label: "Okara" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Chiniot", label: "Chiniot" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Kasur", label: "Kasur" },
  { value: "Muzaffargarh", label: "Muzaffargarh" },
  { value: "Rahim Yar Khan", label: "Rahim Yar Khan" },
  { value: "Pakpattan", label: "Pakpattan" },
  { value: "Dera Ghazi Khan", label: "Dera Ghazi Khan" },
  { value: "Narowal", label: "Narowal" },
  { value: "Jhang", label: "Jhang" },
  { value: "Attock", label: "Attock" },
  { value: "Layyah", label: "Layyah" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Khushab", label: "Khushab" },
  { value: "Chakwal", label: "Chakwal" },
  { value: "Vehari", label: "Vehari" },
  { value: "Hafizabad", label: "Hafizabad" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Toba Tek Singh", label: "Toba Tek Singh" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Burewala", label: "Burewala" },
  { value: "Gojra", label: "Gojra" },
  { value: "Muridke", label: "Muridke" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Ahmedpur East", label: "Ahmedpur East" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Vihari", label: "Vihari" },
  { value: "Hasilpur", label: "Hasilpur" },
  { value: "Kahna Nau", label: "Kahna Nau" },
  { value: "Chichawatni", label: "Chichawatni" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Murree", label: "Murree" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Kot Addu", label: "Kot Addu" },
  { value: "Lodhran", label: "Lodhran" },
  { value: "Kharian", label: "Kharian" },
  { value: "Jaranwala", label: "Jaranwala" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Arifwala", label: "Arifwala" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Talagang", label: "Talagang" },
  { value: "Kahror Pakka", label: "Kahror Pakka" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Pind Dadan Khan", label: "Pind Dadan Khan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Shujaabad", label: "Shujaabad" },
  { value: "Bhalwal", label: "Bhalwal" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Bhawana", label: "Bhawana" },
  { value: "Jampur", label: "Jampur" },
  { value: "Kot Mithan", label: "Kot Mithan" },
  { value: "Pattoki", label: "Pattoki" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Kunjah", label: "Kunjah" },
  { value: "Choa Saidan Shah", label: "Choa Saidan Shah" },
  { value: "Daska", label: "Daska" },
  { value: "Hazro", label: "Hazro" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Dunyapur", label: "Dunyapur" },
  { value: "Kot Radha Kishan", label: "Kot Radha Kishan" },
  { value: "Chak Jhumra", label: "Chak Jhumra" },
  { value: "Qadirabad", label: "Qadirabad" },
  { value: "Kamra", label: "Kamra" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kahror Lal Essan", label: "Kahror Lal Essan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Lala Musa", label: "Lala Musa" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Minchinabad", label: "Minchinabad" },
  { value: "Mitha Tiwana", label: "Mitha Tiwana" },
  { value: "Monga", label: "Monga" },
  { value: "Mubarikpur", label: "Mubarikpur" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Pasrur", label: "Pasrur" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sohawa", label: "Sohawa" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Tarogil", label: "Tarogil" },
  { value: "Ugoke", label: "Ugoke" },
  { value: "Wah", label: "Wah" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Zafarwal", label: "Zafarwal" },
  { value: "Gujar Khan", label: "Gujar Khan" },
  { value: "Haveli Lakha", label: "Haveli Lakha" },
  { value: "Jalalpur Pirwala", label: "Jalalpur Pirwala" },
  { value: "Kallar Kahar", label: "Kallar Kahar" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Kharian", label: "Kharian" },
  { value: "Kot Momin", label: "Kot Momin" },
  { value: "Kundian", label: "Kundian" },
  { value: "Lalian", label: "Lalian" },
  { value: "Liaqatpur", label: "Liaqatpur" },
  { value: "Mamukanjan", label: "Mamukanjan" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Qila Didar Singh", label: "Qila Didar Singh" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Sangla Hill", label: "Sangla Hill" },
  { value: "Shahkot", label: "Shahkot" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Shamsabad", label: "Shamsabad" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sillanwali", label: "Sillanwali" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Wah Cantt", label: "Wah Cantt" },
  { value: "Bhera", label: "Bhera" },
  { value: "Chunian", label: "Chunian" },
  { value: "Darya Khan", label: "Darya Khan" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Haroonabad", label: "Haroonabad" },
  { value: "Jand", label: "Jand" },
  { value: "Jatoi", label: "Jatoi" },
  { value: "Kahna", label: "Kahna" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kallar Syedan", label: "Kallar Syedan" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Kot Sultan", label: "Kot Sultan" },
  { value: "Lalamusa", label: "Lalamusa" },
  { value: "Liaquatpur", label: "Liaquatpur" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Nowshera Virkan", label: "Nowshera Virkan" },
  { value: "Pindi Bhattian", label: "Pindi Bhattian" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Rabwah", label: "Rabwah" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Sarai Alamgir", label: "Sarai Alamgir" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Sharaqpur", label: "Sharaqpur" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Sodhra", label: "Sodhra" },
  { value: "Taunsa", label: "Taunsa" },
  { value: "Thatta Ghulamka Dheroka", label: "Thatta Ghulamka Dheroka" },
  { value: "Tibba Sultanpur", label: "Tibba Sultanpur" },
  { value: "F-6", label: "F-6" },
  { value: "F-7", label: "F-7" },
  { value: "F-8", label: "F-8" },
  { value: "F-9", label: "F-9" },
  { value: "F-10", label: "F-10" },
  { value: "F-11", label: "F-11" },
  { value: "G-5", label: "G-5" },
  { value: "G-6", label: "G-6" },
  { value: "G-7", label: "G-7" },
  { value: "G-8", label: "G-8" },
  { value: "G-9", label: "G-9" },
  { value: "G-10", label: "G-10" },
  { value: "G-11", label: "G-11" },
  { value: "G-12", label: "G-12" },
  { value: "H-8", label: "H-8" },
  { value: "H-9", label: "H-9" },
  { value: "H-10", label: "H-10" },
  { value: "I-8", label: "I-8" },
  { value: "I-9", label: "I-9" },
  { value: "I-10", label: "I-10" },
  { value: "I-11", label: "I-11" },
  { value: "E-7", label: "E-7" },
  { value: "E-8", label: "E-8" },
  { value: "E-9", label: "E-9" },
  { value: "E-10", label: "E-10" },
  { value: "E-11", label: "E-11" },
  { value: "F-5", label: "F-5" },
  { value: "G-13", label: "G-13" },
  { value: "G-14", label: "G-14" },
  { value: "G-15", label: "G-15" },
  { value: "G-16", label: "G-16" },
  { value: "G-17", label: "G-17" },
  { value: "H-11", label: "H-11" },
  { value: "H-12", label: "H-12" },
  { value: "H-13", label: "H-13" },
  { value: "H-14", label: "H-14" },
  { value: "I-12", label: "I-12" },
  { value: "I-13", label: "I-13" },
  { value: "I-14", label: "I-14" },
  { value: "I-15", label: "I-15" },
  { value: "I-16", label: "I-16" },
  { value: "I-17", label: "I-17" },
  { value: "I-18", label: "I-18" },
  { value: "D-12", label: "D-12" },
  { value: "D-13", label: "D-13" },
  { value: "D-14", label: "D-14" },
  { value: "E-6", label: "E-6" },
  { value: "E-12", label: "E-12" },
  { value: "E-13", label: "E-13" },
  { value: "E-14", label: "E-14" },
  { value: "F-12", label: "F-12" },
  { value: "F-13", label: "F-13" },
  { value: "F-14", label: "F-14" },
  { value: "G-18", label: "G-18" },
  { value: "H-15", label: "H-15" },
  { value: "H-16", label: "H-16" },
  { value: "H-17", label: "H-17" },
  { value: "I-19", label: "I-19" },
  { value: "I-20", label: "I-20" },
  { value: "I-21", label: "I-21" },
];

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstCreate.jsx
import React, { useState } from "react";
import Select from "react-select";
import { addDoc } from "firebase/firestore";
import { constituenciesRef } from "../../config/firebase.js";
import { MajorAreasOfPakistan } from "./AreasSelect.js";
import toast from "react-hot-toast";
const ConstCreate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null); // Initialize to null
  const [selectedType, setSelectedType] = useState(null); // Initialize to null
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const [ageDistribution, setAgeDistribution] = useState({
    young_adults: "",
    adults: "",
    middleaged: "",
    seniors: "",
  });
  const [genderDistribution, setGenderDistribution] = useState({
    male: "",
    female: "",
    other: "",
  });
  const [educationLevels, setEducationLevels] = useState({
    primary_school: "",
    secondary_school: "",
    higher_education: "",
  });
  const AssemblyOptions = [
    { value: "Punjab", label: "Punjab" },
    { value: "Sindh", label: "Sindh" },
    { value: "Balochistan", label: "Balochistan" },
    { value: "KPK", label: "KPK" },
    { value: "National", label: "National" },
  ];

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  const handleTypeChange = (selectedOptions) => {
    console.log("Selected Type", selectedOptions.value);
    setSelectedType(selectedOptions.value);
  };
  const data = {
    name: name,
    code: code,
    assembly: selectedType,
    region: selectedRegion,
    population: population,
    voters: voters,
    area: area,
    age_distribution: ageDistribution
      ? ageDistribution
      : { young_adults: "", adults: "", middleaged: "", seniors: "" },
    gender_distribution: genderDistribution
      ? genderDistribution
      : { male: "", female: "", other: "" },
    education_levels: educationLevels
      ? educationLevels
      : { primary_school: "", secondary_school: "", higher_education: "" },
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Data to be added", data);
      const docRef = await addDoc(constituenciesRef,data);
      console.log("Document written with ID: ", docRef.id);
      toast.success("Constituency Created Successfully");
      // Reset form fields
      setName("");
      setCode("");
      setSelectedRegion("");
      setSelectedType("");
      setPopulation("");
      setVoters("");
      setArea("");
      setAgeDistribution({
        young_adults: "",
        adults: "",
        middleaged: "",
        seniors: "",
      });
      setGenderDistribution({
        male: "",
        female: "",
        other: "",
      });
      setEducationLevels({
        primary_school: "",
        secondary_school: "",
        higher_education: "",
      });
    } catch (error) {
      console.log(error);
      toast.error("Error creating Constituency");
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="code"
              className="text-lg font-normal text-slate-900"
            >
              Code
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="assembly"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            {/* Assuming AssemblyOptions is imported */}
            <Select
              options={AssemblyOptions}
              value={selectedType}
              onChange={handleTypeChange}
            />
          </div>
          <div>
            <label
              htmlFor="region"
              className="text-lg font-normal text-slate-900"
            >
              Region
            </label>
            {/* Assuming areas is imported */}
            <Select
              options={MajorAreasOfPakistan}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label
              htmlFor="population"
              className="text-lg font-normal text-slate-900"
            >
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="voters"
              className="text-lg font-normal text-slate-900"
            >
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="young_adults"
              className="text-lg font-normal text-slate-900"
            >
              Young Adults
            </label>
            <input
              type="number"
              id="young_adults"
              name="young_adults"
              value={ageDistribution.young_adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  young_adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="adults"
              className="text-lg font-normal text-slate-900"
            >
              Adults
            </label>
            <input
              type="number"
              id="adults"
              name="adults"
              value={ageDistribution.adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="middleaged"
              className="text-lg font-normal text-slate-900"
            >
              Middle-aged
            </label>
            <input
              type="number"
              id="middleaged"
              name="middleaged"
              value={ageDistribution.middleaged}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  middleaged: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="seniors"
              className="text-lg font-normal text-slate-900"
            >
              Seniors
            </label>
            <input
              type="number"
              id="seniors"
              name="seniors"
              value={ageDistribution.seniors}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  seniors: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="male"
              className="text-lg font-normal text-slate-900"
            >
              Male
            </label>
            <input
              type="number"
              id="male"
              name="male"
              value={genderDistribution.male}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  male: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="female"
              className="text-lg font-normal text-slate-900"
            >
              Female
            </label>
            <input
              type="number"
              id="female"
              name="female"
              value={genderDistribution.female}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  female: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="other"
              className="text-lg font-normal text-slate-900"
            >
              Other
            </label>
            <input
              type="number"
              id="other"
              name="other"
              value={genderDistribution.other}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  other: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="primary_school"
              className="text-lg font-normal text-slate-900"
            >
              Primary School
            </label>
            <input
              type="number"
              id="primary_school"
              name="primary_school"
              value={educationLevels.primary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  primary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="secondary_school"
              className="text-lg font-normal text-slate-900"
            >
              Secondary School
            </label>
            <input
              type="number"
              id="secondary_school"
              name="secondary_school"
              value={educationLevels.secondary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  secondary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="higher_education"
              className="text-lg font-normal text-slate-900"
            >
              Higher Education
            </label>
            <input
              type="number"
              id="higher_education"
              name="higher_education"
              value={educationLevels.higher_education}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  higher_education: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Create Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstCreate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import {
  getConstituencies,
  deleteConstituency,
} from "../../utils/constituency";

const ConstHome = () => {
  const [constituencies, setConstituencies] = useState([]);

  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const data = await getConstituencies();
        setConstituencies(data);
      } catch (error) {
        console.error("Error fetching constituencies", error);
      }
    };
    fetchConstituencies();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this constituency?"
    );
    if (confirmDelete) {
      const isSuccess = await deleteConstituency(id);
      if (isSuccess) {
        setConstituencies(constituencies.filter((item) => item.id !== id));
      } else {
        console.error("Error deleting constituency");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        Delete
      </button>
    </div>
  );

  if (!constituencies.length) {
    return <div>Loading...</div>;
  }

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 py-4">
          Constituency Home
        </h1>
      </div>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assembly
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Code
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Region
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Voters
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {constituencies.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.assembly}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.code}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.region}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.voters}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConstHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
// import { constituencies } from "../../data/const.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getConstituencyById } from "../../utils/constituency.js";

const ConstPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const constData = await getConstituencyById(id);
        if (!constData) {
          return <div>No Data Found.</div>;
        }
        console.log("Constituency data:", constData);
        setData(constData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Demographics</Tab>
          <Tab>Age Distribution</Tab>
          <Tab>Gender Distribution</Tab>
          <Tab>Education Levels</Tab>
        </TabList>

        <TabPanel>
          <DataLine title="Registered Voters" value={data.voters || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Age
          </h4>
          {data.age_distribution && (
            <>
              <DataLine
                title="Young Adults (18yo - 25yo)"
                value={data.age_distribution.young_adults || "N/A"}
              />
              <DataLine
                title="Adults (26yo - 40yo)"
                value={data.age_distribution.adults || "N/A"}
              />
              <DataLine
                title="Middle Ages (41yo - 60yo)"
                value={data.age_distribution.middleaged || "N/A"}
              />
              <DataLine
                title="Seniors (60yo +)"
                value={data.age_distribution.seniors || "N/A"}
              />
            </>
          )}
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Gender
          </h4>
          <DataLine
            title="Male"
            value={data.gender_distribution.male || "N/A"}
          />
          <DataLine
            title="Female"
            value={data.gender_distribution.female || "N/A"}
          />
          <DataLine
            title="Others"
            value={data.gender_distribution.other || "N/A"}
          />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Education Levels
          </h4>
          <DataLine
            title="Primary School"
            value={data.education_levels.primary_school || "N/A"}
          />
          <DataLine
            title="Secondary School"
            value={data.education_levels.secondary_school || "N/A"}
          />
          <DataLine
            title="Higher Education"
            value={data.education_levels.higher_education || "N/A"}
          />
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Area</p>
            <p className="text-lg font-semibold">{data.region || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConstPreview;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstUpdate.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Select from "react-select";
import { areas } from "./data";
import {
  getConstituencyById,
  updateConstituency,
} from "../../utils/constituency";
import toast from "react-hot-toast";

const ConstUpdate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const { id } = useParams();

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region:", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getConstituencyById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Constituency data for update:", data);
        setName(data.name);
        setCode(data.code);
        setSelectedRegion(data.region);
        setPopulation(data.population);
        setVoters(data.voters);
        setArea(data.area);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [id]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const data = {
        name: name,
        code: code,
        region: selectedRegion,
        population: population,
        voters: voters,
        area: area,
      };

      const success = await updateConstituency(id, data);
      if (success) {
        console.log("Constituency updated successfully!");
        toast.success("Constituency updated successfully!");
        // Reset form fields
        setArea("");
        setCode("");
        setName("");
        setPopulation("");
        setSelectedRegion("");
        setVoters("");
      }
    } catch (error) {
      console.error("Error updating constituency: ", error);
      toast.error("Error updating constituency!");
    }
  };
  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Code
            </label>
            <input
              type="code"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Region
            </label>
            <Select
              options={areas}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Update Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\data.js
const areas = [
    { value: 'Shahdara', label: 'Shahdara' },
    { value: 'Harbanspura', label: 'Harbanspura' },
    { value: 'Nishtar Town', label: 'Nishtar Town' },
    { value: 'Gulberg', label: 'Gulberg' },
    { value: 'Model Town', label: 'Model Town' },
    { value: 'Faisal Town', label: 'Faisal Town' },
    { value: 'Ravi Town', label: 'Ravi Town' },
    { value: 'Aziz Bhatti Town', label: 'Aziz Bhatti Town' },
    { value: 'Data Gunj Buksh Town', label: 'Data Gunj Buksh Town' },
    { value: 'Walled City', label: 'Walled City' },
    { value: 'Shalimar', label: 'Shalimar' },
    { value: 'Wagah', label: 'Wagah' },
    { value: 'Lahore Cantt', label: 'Lahore Cantt' },
    { value: 'Raiwind', label: 'Raiwind' },
    { value: 'Township', label: 'Township' },
    { value: 'Samanabad', label: 'Samanabad' },
    { value: 'Iqbal Town', label: 'Iqbal Town' },
    { value: 'Green Town', label: 'Green Town' },
    { value: 'Sabzazar', label: 'Sabzazar' },
    { value: 'Johar Town', label: 'Johar Town' },
    { value: 'Wapda Town', label: 'Wapda Town' },
    { value: 'Shadman', label: 'Shadman' },
    { value: 'Kot Lakhpat', label: 'Kot Lakhpat' },
    { value: 'Ichra', label: 'Ichra' },
    { value: 'Barki', label: 'Barki' },
    { value: 'Bedian Road', label: 'Bedian Road' },
    { value: 'Kahna Nau', label: 'Kahna Nau' },
    { value: 'DHA Phase 1', label: 'DHA Phase 1' },
    { value: 'Nishtar Colony', label: 'Nishtar Colony' },
    { value: 'Garden Town', label: 'Garden Town' },
    { value: 'Sui Gas Housing Society', label: 'Sui Gas Housing Society' },
    { value: 'Punjab University', label: 'Punjab University' },
    { value: 'Wahdat Colony', label: 'Wahdat Colony' },
    { value: 'Lahore Airport', label: 'Lahore Airport' },
    { value: 'Gulshan-e-Ravi', label: 'Gulshan-e-Ravi' },
    { value: 'Baghbanpura', label: 'Baghbanpura' },
    { value: 'Jallo Park', label: 'Jallo Park' },
    { value: 'Shah Kamal', label: 'Shah Kamal' },
    { value: 'Raiwind Road', label: 'Raiwind Road' },
    { value: 'Thokar Niaz Baig', label: 'Thokar Niaz Baig' },
    { value: 'Multan Road', label: 'Multan Road' },
    { value: 'Chung', label: 'Chung' }
  ];
  
  const AssemblyOptions = [
    { value: "national", label: "National Assembly" },
    { value: "punjab", label: "Punjab Assembly" },
    { value: "sindh", label: "Sindh Assembly" },
    { value: "kpk", label: "KPK Assembly" },
    { value: "balochistan", label: "Balochistan Assembly" },
    // Add more options as needed
  ];
  export { areas, AssemblyOptions };
  

// File: \Side Projects\facecast-vote\src\Pages\Elections\CreateElection.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { createElections } from "../../utils/elections";
import {
  candidatesRef,
  constituenciesRef,
  partyRef,
} from "../../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../../utils/utilityFunctions";
import toast  from "react-hot-toast";
const CreateElection = () => {
  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState("");

  const [startDateTime, setStartDataTime] = useState("");
  const [endDateTime, setEndDateTime] = useState("");
  const [selectedAssembly, setSelectedAssembly] = useState(null);
  const [selectedConstituencies, setSelectedConstituencies] = useState([]);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [constituencyOptions, setConstituencyOptions] = useState([]);
  const [candidateOptions, setCandidateOptions] = useState([]);
  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const fieldsToRetrieve = ["name", "region", "assembly"];
        const filterField = "assembly";
        const filterValue = selectedAssembly.value; // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollection(
          constituenciesRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        setConstituencyOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", constituencyOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchConstituencies(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedAssembly]);
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const fieldsToRetrieve = ["name", "affiliation",];
        // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollectionWithOutFilter(
          candidatesRef,
          fieldsToRetrieve
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        // console.log("Formatted Party Data", formattedPartyData);
        setCandidateOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", candidateOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchCandidates(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedConstituencies]);

  const handleTypeChange = (event) => {
    setSelectedType(event.target.value);
  };

  const handleAssemblyChange = (selectedOptions) => {
    setSelectedAssembly(selectedOptions);
  };

  const handleConstituencyChange = (selectedOptions) => {
    setSelectedConstituencies(selectedOptions);
  };

  const handleCandidateChange = (index, selectedOptions) => {
    const updatedCandidates = [...selectedCandidates];
    updatedCandidates[index] = selectedOptions;
    setSelectedCandidates(updatedCandidates);
  };
  const AssemblyOptions = [
    { value: "National Assembly", label: "National Assembly" },
    { value: "Punjab", label: "Punjab Assembly" },
    { value: "Sindh", label: "Sindh Assembly" },
    // Add more options as needed
  ];

  const data = {
    title,
    selectedType,
    startDateTime,
    endDateTime,
    selectedAssembly,
    selectedConstituencies,
    selectedCandidates,
  };
  const getPartyImagebyName = async (name) => {
    try {
      const data = await fetchSpecificFieldsFromCollection(
        partyRef,
        ["symbol_url"],
        "name",
        name
      );

      console.log("Party Image Data", data);
      return data;
    } catch (error) {
      console.error("Error fetching party image:", error);
    }
  };
  useEffect(() => {
    const fetchData = async () => {
      const data = await getPartyImagebyName("Pakistan Tehreek-e-Insaf");
      console.log("Party Image Data", data);
    };
    fetchData();
  }, []);

  const electionData = {
    title: data.title,
    type: data.selectedType,
    start_at: data.startDateTime,
    end_at: data.endDateTime,
    created_at: new Date().toISOString(),
    constituencies: data.selectedConstituencies
      ? data.selectedConstituencies.map((constituency, index) => {
          return {
            const_id: constituency.value.id, // You may use a unique ID here
            name: constituency.value.name,
            candidates: data.selectedCandidates[index]
              ? data.selectedCandidates[index].map((candidate) => {
                  return {
                    id: candidate.value.id, // You may use a unique ID here
                    name: candidate.value.name,
                    partyImg: candidate.value.affiliation.symbol_url,
                  };
                })
              : [],
          };
        })
      : [],
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setLoading(true);
    setError(false); // Reset error state

    try {
      console.log("Election Data", electionData);
      const id = await createElections(electionData);
      console.log("Election Created Successfully", id);
      toast.success("Election created successfully!");
      
      // Clear form fields after successful submission
      setTitle("");
      setStartDataTime("");
      setEndDateTime("");
      setSelectedAssembly([]);
      setSelectedCandidates([]);
      setSelectedConstituencies([]);
      setSelectedType("");
    } catch (error) {
      setError(true);
      console.error("Error creating election:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Election
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Title
            </label>
            <input
              type="text"
              id="firstname"
              name="firstname"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            <Select
              options={AssemblyOptions}
              value={selectedAssembly}
              onChange={handleAssemblyChange}
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Start at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              name="date-time"
              value={startDateTime}
              onChange={(e) => setStartDataTime(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              End at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              value={endDateTime}
              onChange={(e) => setEndDateTime(e.target.value)}
              name="endtime"
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Type
            </label>
            <select
              name="type"
              id="type"
              className="w-full p-1 border border-gray-300 rounded-md"
              value={selectedType}
              onChange={handleTypeChange}
            >
              <option value="">Select an option</option>
              <option value="general">General</option>
              <option value="by-election">By-Election</option>
              {/* Add more options as needed */}
            </select>
          </div>
        </div>
        <div>
          <label htmlFor="name1" className="text-lg font-normal text-slate-900">
            Constituencies
          </label>
          <Select
            isMulti
            options={constituencyOptions}
            value={selectedConstituencies}
            onChange={handleConstituencyChange}
          />
        </div>
        {selectedConstituencies.map((constituency, index) => (
          <div key={index}>
            <label
              htmlFor={`candidates-${index}`}
              className="text-lg font-normal text-slate-900"
            >
              Candidates for {constituency.label}
            </label>
            <Select
              isMulti
              id={`candidates-${index}`}
              options={candidateOptions}
              onChange={(selectedOptions) =>
                handleCandidateChange(index, selectedOptions)
              }
            />
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              Create Election {loading ? "...." : ""} {error ? "(Error!)" : ""}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreateElection;

// File: \Side Projects\facecast-vote\src\Pages\Elections\EditModal.jsx
import React, { useState, useEffect } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { updateElection, getElectiontById } from "../../utils/elections";
const EditModal = ({ isOpen, closeModal, electionId }) => {
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");

  const [loading, setLoading] = useState(false);
  const [updated, setUpdated] = useState(false);
  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getElectiontById(electionId);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Election data for update:", data);

        setStartTime(data.start_at);
        setEndTime(data.end_at);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [electionId]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    try {
      const data = {
        start_at: startTime,
        end_at: endTime,
      };
      const success = await updateElection(electionId, data);
      if (success) {
        console.log("Election updated successfully");
        closeModal();
      }
    } catch (error) {
      console.error("Error updating election", error);
    } finally {
      setLoading(false);
    }
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Edit Schedule
              </Dialog.Title>
              <div className="mt-2">
                {updated ? (
                  <div>
                    <p className="text-lg text-regal-blue-700">
                      Election Updated Successfully.
                    </p>
                  </div>
                ) : (
                  <form>
                    <div className="flex flex-col gap-2">
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          Start Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={startTime}
                          onChange={(e) => setStartTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          End Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={endTime}
                          onChange={(e) => setEndTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>

                      <div className="flex justify-start py-4">
                        <button
                          onClick={handleSubmit}
                          className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                        >
                          <span className="font-semibold text-base">
                            {loading ? "Updating..." : "Update Election"}
                          </span>
                        </button>
                      </div>
                    </div>
                  </form>
                )}
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default EditModal;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionHome.jsx
import React, { useEffect, useState } from "react";
import EditModal from "./EditModal";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { getElections } from "../../utils/elections";
import { MdOutlineLocalPrintshop } from "react-icons/md";

const ElectionHome = () => {
  // Define data
  const [elections, setElections] = useState([]);
  const [isOpen, setIsOpen] = useState(false);

  const closeModal = () => {
    setIsOpen(false);
  };

  const [selectedElectionId, setSelectedElectionId] = useState(null);

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedElectionId(id);
  };
  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElections();
        console.log("data", data);
        if (data) {
          setElections(data);
        }
      } catch (error) {
        console.error("Error fetching documents:", error);
      }
    };
    fetchData();
  }, []);

  const generatePDF = (election) => {
    if (!election) return;

    // Get current date
    const currentDate = new Date();
    // Convert election date string to Date object
    const electionDate = new Date(election.election_date);

    // Create a new jsPDF instance with orientation 'p' for portrait mode
    const pdf = new jsPDF("p", "mm", "a4");

    // Add a header with Election Commission of Pakistan logo and title
    // Add announcement if current date is before election date

    // Add a title to the PDF
    pdf.setFontSize(18);
    pdf.setTextColor("#006600"); // Green color for title
    pdf.text("Election Data", 105, 20, { align: "center" });

    if (currentDate < electionDate) {
      // Additional text about the election announcement
      pdf.setFont("times", "normal");
      pdf.setFontSize(12);
      pdf.setTextColor("#000000"); // Black color for text
      pdf.text("Announcement:", 10, 40);
      pdf.text(
        "The Election Commission of Pakistan announces the details of the upcoming election.",
        10,
        50
      );
    }

    // Add election details to the PDF
    pdf.setFont("times", "normal");
    pdf.setFontSize(14);
    pdf.setTextColor("#000000"); // Black color for text
    pdf.text("Election Details:", 10, currentDate < electionDate ? 70 : 40);
    pdf.text(
      `Title: ${election.title}`,
      10,
      currentDate < electionDate ? 80 : 50
    );
    pdf.text(
      `Type: ${election.type}`,
      10,
      currentDate < electionDate ? 90 : 60
    );
    pdf.text(
      `Election Date: ${election.election_date}`,
      10,
      currentDate < electionDate ? 100 : 70
    );

    // Add constituencies and candidates to the PDF
    let yPosition = currentDate < electionDate ? 120 : 90; // Starting y-position for constituency data
    election.constituencies.forEach((constituency) => {
      pdf.setFont("times", "bold");
      pdf.setFontSize(16);
      pdf.text(`Constituency: ${constituency.name}`, 10, yPosition);
      yPosition += 10;
      constituency.candidates.forEach((candidate) => {
        pdf.setFont("times", "normal");
        pdf.setFontSize(14);
        pdf.text(`- ${candidate.name}`, 15, yPosition);
        yPosition += 5;
      });
      yPosition += 5; // Add spacing between constituencies
    });

    // Save the PDF file with a filename
    pdf.save("election_announcement_ecp.pdf");
  };

  // Save the PDF file with a filename

  // const difference = +new Date(election.end_at) - +new Date();
  const renderActions = (elections) => (
    <div className="flex items-center justify-between gap-4">
      <button
        className="bg-regal-blue-700 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-700/80"
        onClick={() => generatePDF(elections)} // Pass the current election item to generatePDF
      >
        <MdOutlineLocalPrintshop />
      </button>
      {
      +new Date(elections.end_at) - +new Date() > 0 ? (
        <button
          className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
          onClick={() => openModal(elections.id)} // Pass id to onEdit function
        >
          <FaRegEdit />
        </button>
      ) : null}
      <Link to={`${elections.id}`} className="text-green-600 hover:underline">
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
    </div>
  );

  return (
    <>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Elections Home
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <EditModal
        isOpen={isOpen}
        closeModal={closeModal}
        electionId={selectedElectionId}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Type
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Start datetime - End datetime
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Election Date
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          -
          {elections.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.title}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.type}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).getHours() +
                    ":" +
                    new Date(item.start_at).getMinutes() +
                    " - " +
                    new Date(item.end_at).getHours() +
                    ":" +
                    new Date(item.end_at).getMinutes()}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).toISOString().split("T")[0]}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};

export default ElectionHome;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionPreview.jsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { getElectiontById } from "../../utils/elections";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";

const ElectionPreview = () => {
  const { id } = useParams();
  const [election, setElection] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElectiontById(id);
        if (data) {
          setElection(data);
        }
      } catch (error) {
        console.error("Error fetching election:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!election) {
    return <div>No election found with the provided id.</div>;
  }

  return (
    <section>
      <ElectionDetails
        title={election.title}
        status={election.status}
        startdate={election.start_at}
        enddate={election.end_at}
        election_Date={election.election_date}
      />
      <Tabs>
        <TabList>
          <Tab>Constituencies</Tab>
          {election.constituencies.map((constituency) => (
            <Tab key={constituency.id}>{constituency.name}</Tab>
          ))}
        </TabList>

        <TabPanel>
          <ConstituenciesTabPanel election={election} />
        </TabPanel>
        {election.constituencies.map((constituency) => (
          <TabPanel key={constituency.id}>
            <CandidatesTabPanel candidates={constituency.candidates} />
          </TabPanel>
        ))}
      </Tabs>
    </section>
  );
};

const ElectionDetails = ({ title, startdate, enddate, election_Date }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <StatusBadge electionDate={election_Date} />
          <p className="text-sm text-gray-500">{election_Date}</p>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Start time</p>
            <p className="text-lg font-semibold">{startdate}</p>
          </div>
          <div>
            <p className="text-base font-medium">End time</p>
            <p className="text-lg font-semibold">{enddate}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatusBadge = ({ electionDate }) => {
  const currentDate = new Date().getDate();
  const electionDateObj = new Date(electionDate).getDate();
  console.log("election date obj", electionDateObj, "currentDAte", currentDate);

  if (electionDateObj < currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-blue-500 rounded-full uppercase font-semibold">
        Upcoming
      </span>
    );
  } else if (electionDateObj > currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-gray-500 rounded-full uppercase font-semibold">
        Offline
      </span>
    );
  } else {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-green-500 rounded-full uppercase font-semibold">
        Online
      </span>
    );
  }
};
const ConstituenciesTabPanel = ({ election }) => {
  return (
    <div>
      {election.constituencies.map((constituency) => (
        <div key={constituency.id}>
          <DataLine title={constituency.name} />
        </div>
      ))}
    </div>
  );
};

const CandidatesTabPanel = ({ candidates }) => {
  return (
    <div>
      {candidates.map((candidate) => (
        <div key={candidate.id}>
          <DataLine title="Candidate" value={candidate.name} />
        </div>
      ))}
    </div>
  );
};

export default ElectionPreview;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyCreate.jsx
import React, { useState } from "react";
import { createParty } from "../../utils/parties";
import { uploadImage } from "../../utils/globals";
import Alert from "../../Components/Alert";
import toast from "react-hot-toast";
const PartyCreate = () => {
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      name: name,
      acronym: acronym,
      leader: leader,
      ideology: ideology,
      founded: founded,
      headQuaters: headQuaters,
      manifesto: manifesto,
      email: email,
      phone: phone,
      address: address,
      symbol: symbol,
      symbol_url: "",
    };
    try {
      if (image) {
        const url = await uploadImage(image, "images/party");

        console.log(url);
        data.symbol_url = url;
        setImageUrl(url);
        console.log("Image URL:", url);
      }

      const docRef = await createParty(data);
      console.log("Party created with ID:", docRef);
      if (!docRef) {
        console.log("Error creating Party");
        setError("Error creating Party");
      }
      toast.success("Party Created Successfully");
    } catch (error) {
      console.log(error);

      toast.error("Error creating Party");
    }
    setLoading(false);
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyCreate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { getParties, deleteParty } from "../../utils/parties";

const PartyHome = () => {
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [alertMessage, setAlertMessage] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await getParties();
        setParties(response);
      } catch (error) {
        setError("Error Fetching Data");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleDelete = async (id) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this party?"
    );
    if (confirmed) {
      try {
        await deleteParty(id);
        setParties(parties.filter((party) => party.id !== id));
        setAlertMessage("Party deleted successfully");
      } catch (error) {
        setAlertMessage("Error deleting party");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
        onClick={() => handleDelete(id)}
      >
        Delete
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Party Home</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      {alertMessage && (
        <div
          className={`alert ${
            alertMessage.includes("successfully")
              ? "alert-success"
              : "alert-error"
          }`}
        >
          {alertMessage}
        </div>
      )}
      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div>{error}</div>
      ) : (
        <table className="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Reg Number
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Foundation Year
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Leader
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {parties.map((item, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.reg_number}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.name}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.founded}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.leader}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                  {renderActions(item.id)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PartyHome;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { getPartybyId, updateParty } from "../../utils/parties";
import { useParams } from "react-router-dom";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";
const PartyUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };
  const data = {
    name: name,
    acronym: acronym,
    leader: leader,
    ideology: ideology,
    founded: founded,
    headQuaters: headQuaters,
    manifesto: manifesto,
    email: email,
    phone: phone,
    address: address,
    symbol_url: "",
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const url = await uploadImage(image, "images/party");
      setSuccess("Image uploaded successfully");
      data.symbol_url = url;
      setImageUrl(url);
      console.log("Image URL:", url);
      const docRef = await updateParty(id, data);
      console.log("Party created with ID:", docRef);
      setSuccess("Party updated successfully");
      if (!docRef) {
        console.log("Error creating Party");
        toast.error("Error creating Party");
      }
    } catch (error) {
      console.log(error);
      setError("Error creating Party");
    }
    setLoading(false);
  };
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const partyData = await getPartybyId(id);
        console.log("Party Data:", partyData);
        setName(partyData.name);
        setAcronym(partyData.acronym);
        setLeader(partyData.leader);
        setIdeology(partyData.ideology);
        setFounded(partyData.founded);
        setHeadQuaters(partyData.headQuaters);
        setManifesto(partyData.manifesto);
        setEmail(partyData.email);
        setPhone(partyData.phone);
        setAddress(partyData.address);
        setSymbol(partyData.symbol);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [id]);

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyView.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { politicalParties } from "../../data/parties.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getPartybyId } from "../../utils/parties";
const PartyView = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const partyData = await getPartybyId(id);
        if (!partyData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", partyData);

        setData(partyData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <HeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Contact Information</Tab>
          <Tab>Sybmol</Tab>
        </TabList>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Overview
          </h4>
          <DataLine title="Acronym" value={data.acronym || "N/A"} />
          <DataLine title="Leader" value={data.leader || "N/A"} />
          <DataLine title="Foundation Year" value={data.founded || "N/A"} />
          <DataLine title="Ideology" value={data.ideology || "N/A"} />
          <DataLine title="Headquarters" value={data.headQuaters || "N/A"} />
          <DataLine title="Manifesto" value={data.manifesto || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Contact Information
          </h4>
          <DataLine title="Phone" value={data.phone || "N/A"} />
          <DataLine title="Email" value={data.email || "N/A"} />
          <DataLine title="Address" value={data.address || "N/A"} />
        </TabPanel>
        <TabPanel>
          <DataLine title="Party Symbol" value="" />
          <div>
            <img
              src={data.symbol_url}
              alt={data.name}
              className="w-40 h-40 rounded-sm"
            />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const HeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Registeration Number</p>
            <p className="text-lg font-semibold">{data.reg_number || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PartyView;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfilePage.jsx
import React, { useState, useEffect } from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import DataLine from "../../Components/DataLine";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail } from "../../utils/profile";
const ProfilePage = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []); // Add currUser as a dependency to useEffect
  return (
    <div class="">
      <div class="p-8 bg-white shadow mt-12 ">
        <div class="grid grid-cols-1 md:grid-cols-3 ">
          <div></div>
          <div class="relative">
            <div className="w-48 h-48 border-2 mx-auto rounded-full absolute inset-x-0 top-0 -mt-24 flex items-center justify-center text-regal-blue-50">
              {profile.image ? (
                <img
                  className="h-44 w-44 rounded-full"
                  src={profile.image}
                  alt={profile.fname + "Profile Image"}
                />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-24 w-24 bg-regal-blue-700 rounded-full"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
              )}
            </div>
          </div>
          <div></div>
        </div>

        <div class="mt-32 text-center border-b pb-10 max-w-xl mx-auto">
          <div class="bg-white overflow-hidden rounded-md border">
            <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
              <div class="sm:divide-y sm:divide-gray-200">
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Full name
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.fname + " " + profile.lname}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Email address
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.email}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Phone number
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.phone}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">CNIC</span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.cnic}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* <div class="mt-12 flex flex-col justify-center">
          <p class="text-gray-600 text-center font-light lg:px-16">
            An artist of considerable range, Ryan — the name taken by
            Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs and
            records all of his own music, giving it a warm, intimate feel with a
            solid groove structure. An artist of considerable range.
          </p>
          <button class="text-indigo-500 py-2 px-4  font-medium mt-4">
            Show more
          </button>
        </div> */}
      </div>
    </div>
  );
};

export default ProfilePage;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfileUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail, updateProfileByEmail } from "../../utils/profile";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";

const ProfileUpdate = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCnic] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
        setFname(userProfile.fname);
        setLname(userProfile.lname);
        setCnic(userProfile.cnic);
        setPhone(userProfile.phone);
        setImageUrl(userProfile.image);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");
  
    try {
      if (currUser) {
        let updatedProfile = {
          email: currUser.email,
          fname,
          lname,
          cnic,
          phone,
          image: imageUrl, // Use the existing image URL if no new image is uploaded
        };
  
        if (image) {
          // If a new image is uploaded, upload it and update the profile with the new image path
          const imagePath = await uploadImage(image, "/user/profile");
          console.log("Image Path", imagePath);
          updatedProfile = { ...updatedProfile, image: imagePath };
        }
  
        await updateProfileByEmail(currUser.email, updatedProfile);
        setSuccessMessage("Profile updated successfully!");
        toast.success("Profile updated successfully!");
      }
    } catch (error) {
      console.error("Error during profile update:", error);
      setErrorMessage("Failed to update profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div>
      <main>
        <section className="p-6 max-w-4xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Update Profile
          </h2>
          {errorMessage && <Alert message={errorMessage} type="error" />}
          {successMessage && <Alert message={successMessage} type="success" />}
          <form
            onSubmit={handleSubmit}
            className="mx-auto flex flex-col items-left gap-4"
          >
            <div>
              <label
                htmlFor="name"
                className="text-lg font-normal text-slate-900"
              >
                Image
              </label>
              <input
                type="file"
                id="image"
                name="image"
                accept="image/*"
                onChange={(e) => handleImageUpload(e)}
                
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="fname"
                  className="text-lg font-normal text-slate-900"
                >
                  First name
                </label>
                <input
                  type="text"
                  id="fname"
                  name="fname"
                  value={fname}
                  onChange={(e) => setFname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your first name"
                />
              </div>
              <div>
                <label
                  htmlFor="lname"
                  className="text-lg font-normal text-slate-900"
                >
                  Last name
                </label>
                <input
                  type="text"
                  id="lname"
                  name="lname"
                  value={lname}
                  onChange={(e) => setLname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your last name"
                />
              </div>
              <div>
                <label
                  htmlFor="cnic"
                  className="text-lg font-normal text-slate-900"
                >
                  ID number (CNIC)
                </label>
                <input
                  type="number"
                  id="cnic"
                  name="cnic"
                  value={cnic}
                  onChange={(e) => setCnic(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your CNIC number"
                />
              </div>
              <div>
                <label
                  htmlFor="phone"
                  className="text-lg font-normal text-slate-900"
                >
                  Phone
                </label>
                <input
                  type="phone"
                  id="phone"
                  name="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your phone number"
                />
              </div>
            </div>
            <div className="flex items-center justify-between mt-4">
              <button
                className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Updating..." : "Update"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default ProfileUpdate;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\AnnounceResult.js
export const AnnounceResults = (id) => {
  console.log("Election has ended. Results will be announced soon.", id);
};

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\Modal.jsx
import React, { useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { checkUserExists } from "../../utils/profile";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const Modal = ({ isOpen, closeModal, onUserExists }) => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const { currUser } = useAuth();
  const navigate = useNavigate();

  // Function to handle input change for email
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
    setError(""); // Clear any previous errors when user types in the email field
  };

  // Function to check if the user exists based on the input email
  const handleCheckUserExists = async () => {
    try {
      const exists = await checkUserExists(email, currUser);
      if (exists) {
        onUserExists(exists);
        toast.success("User exists. Please proceed.");
        closeModal();
        // User exists, navigate or perform desired action
        // For example, navigate to a specific page
        // navigate("/da/shboard");
      } else {
        // User does not exist, display an error message or take appropriate action
        toast.error("User does not exist. Please try again.");
      }
    } catch (error) {
      console.error("Error checking user existence:", error);
      toast.error("Error checking user existence. Please try again.");
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Please verify
              </Dialog.Title>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Please verify your identity to proceed
                </p>
              </div>
              <div className="mt-4">
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="mt-1 p-2 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  placeholder="Enter your email"
                  value={email}
                  onChange={handleEmailChange}
                />
              </div>
              {error && <p className="text-sm text-red-500 mt-2">{error}</p>}
              <div className="mt-4">
                <button
                  onClick={handleCheckUserExists}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                >
                  Verify
                </button>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default Modal;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteHome.jsx
import React, { useState, useEffect } from "react";
// import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import { getElections } from "../../utils/elections";
import CountdownTimer from "../../Components/CountdownTimer";
import { getProfileByEmail } from "../../utils/profile";
import Instructions from "../../Components/Instructions";
import { Link } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";


const VoteHome = () => {
  const { currUser } = useAuth();
  const [elections, setElections] = useState([]);
  const [userElection, setUserElection] = useState([]);
  const [timeRem, setTimeRem] = useState(0);

  // useEffect(() => {

  //   const fetchElections = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //       } else {
  //         console.log("No data found");
  //         return;
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   fetchElections();
  // }, [currUser]);

  // useEffect(() => {
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //         const filteredElections = elections.filter((election) => {
  //           const userArea = profile.address.area;

  //           return election.constituencies.some((constituency) => {
  //             const constituencyArea = constituency.name;
  //             return constituencyArea.includes(userArea);
  //           });
  //         });

  //         console.log("filteredElections", filteredElections);
  //         setUserElection(filteredElections); // Update userElection state with filtered elections
  //       } else {
  //         console.log("No data found");
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  //   elections && elections.map((election) => {
  //     console.log("constiturenceis", election.constituencies);
  //   });
  //   // console.log(elections.constituencies);
  // }, [currUser.email, setElections]); // Include currUser.email and setElections in the dependency array

  // useEffect(() => {
  //   console.log("elections", elections);
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       console.log("user election", elections);
  //       console.log("user election", profile.address.area);

  //       const filteredElections = elections.filter((election) =>
  //         election.constituencies.some(
  //           (constituency) => constituency.name === profile.address.area
  //         )
  //       );
  //       console.log("filteredElections", filteredElections);
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  // }, [elections]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const profile = await getProfileByEmail(currUser.email);
        if (!profile) {
          console.log("No profile found");
          return;
        }
        const electionsData = await getElections();
        if (!electionsData) {
          console.log("No election data found");
          return;
        }
        const currentDate = new Date();
        const userArea = profile.address.area;
        console.log("userArea", userArea);
        const filteredElections = electionsData.filter(
          (election) =>
            election.constituencies.some((constituency) =>
              constituency.name.includes(userArea)
            ) &&
            new Date(election.start_at) <= currentDate &&
            currentDate <= new Date(election.end_at)
        );
        console.log("filteredElections", filteredElections);
        setUserElection(filteredElections);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [currUser.email]);
  return (
    <section className="px-4 py-5 md:py-5">
      <div className="py-5">
        <h1 className="pb-4 text-xl font-medium">Instructions</h1>
        <Instructions
          stepNumber={1}
          description="User Needs to Vderify his identity to vote"
        />
        <Instructions
          stepNumber={2}
          description="You have only 30 seconds to cast a vote"
        />
        <Instructions
          stepNumber={4}
          description="You can only vote once for a candidate"
        />
        <Instructions
          stepNumber={3}
          description="You can only vote for the candidates in your area"
        />
      </div>
      <div className="py-3 border-b border-b-slate-300">
        <h1 className="pb-4 text-3xl font-medium">Elections in your Area</h1>
      </div>
      {userElection.length > 0 ? (
        userElection.map((election) => (
          <div key={election.id}>
            <Link to={`${election.id}`}>
              <ElectionsDetails
                title={election.title}
                end={election.end_at}
                electionType={election.type}
              />
            </Link>
          </div>
        ))
      ) : (
        <div className="flex items-center justify-center mt-32">
          <h1 className="text-2xl font-sans font-semibold select-none">
            No elections found For Your Area
          </h1>
        </div>
      )}
    </section>
  );
};


const ElectionsDetails = ({ title, end, electionType }) => {
  const announceResults = () => {
    console.log("Time's up!");
  };

  return (
    <div className="border-b border-b-stone-300 mb-0 py-4">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          {/* title */}
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResults}
          />
        </div>
      </div>
    </div>
  );
};

export default VoteHome;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteScreen.jsx
// VoteScreen.jsx
import React, { useEffect, useState } from "react";
import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import ElectionCard from "../../Components/ElectionCard";
// import { AnnounceResults } from "./AnnounceResult";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import { createUserVote, checkIfUserVoted } from "../../utils/userVotes";
import { getElectiontById } from "../../utils/elections";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import Modal from "./Modal";
import { faceio } from "../../config/faceio";
import { useDispatch, useSelector } from "react-redux";
import { decrementVoteAmount } from "../../config/Slices/walletSlice";
import toast from "react-hot-toast";

const VoteScreen = () => {
  const dispatch = useDispatch();
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  const { id } = useParams();
  const { currUser } = useAuth();
  const navigate = useNavigate();
  const [election, setElection] = useState({});
  const [constituency, setConstituency] = useState({});
  const [voted, setVoted] = useState(false);
  const [verified, setVerified] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [userExists, setUserExists] = useState(false);
  const [message, setMessage] = useState("");
  const [authError, setAuthError] = useState(false);
  const [loading, setLoading] = useState(true);

  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };

  const authenticateUser = async () => {
    try {
      const userData = await faceio.authenticate({
        locale: "auto", // Default user locale
      });
      console.log("Success, user identified", userData);
      setVerified(true);
      faceio.restartSession();
    } catch (error) {
      console.error("Error authenticating user:", error);
      setAuthError(true); // Set authentication error flag
    }
  };

  useEffect(() => {
    authenticateUser();
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      navigate("/voter");
    }, 60000); // 1 minute in milliseconds

    return () => clearTimeout(timer);
  }, [navigate]);

  const handleUserExists = (exists) => {
    if (exists) {
      setUserExists(exists);
      setVerified(true);
    } else {
      setVerified(false);
      setMessage(
        <div className="p-4 bg-red-100 rounded-md">
          Error Validating User Please Try Again.{" "}
          <button onClick={handleNavigateButtonClick} className="text-red-800">
            Go back
          </button>
        </div>
      );
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedElection = await getElectiontById(id);
        const userArea = "Lahore"; // Replace with actual user's area
        const matchingConstituency = fetchedElection.constituencies.find(
          (constituency) => constituency.name.includes(userArea)
        );
        console.log("matchingConstituency", matchingConstituency);
        setElection(fetchedElection);
        setConstituency(matchingConstituency);
      } catch (error) {
        console.error("Error fetching election:", error);
        setMessage("Error fetching election details, please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleNavigateButtonClick = () => {
    navigate("/voter");
  };

  useEffect(() => {
    const difference = +new Date(election.end_at) - +new Date();

    if (difference <= 0) {
      setMessage(
        <div className="p-4 bg-regal-blue-100 rounded-md">
          Election has ended. Results will be announced soon.{" "}
          <button
            onClick={handleNavigateButtonClick}
            className="text-regal-blue-600"
          >
            Go back
          </button>
        </div>
      );
    }
  }, [election, constituency]);

  useEffect(() => {
    const checkIfVoted = async () => {
      try {
        const ifVoted = await checkIfUserVoted(
          currUser.uid,
          constituency.const_id,
          election.id
        );
        setVoted(ifVoted);
        if (ifVoted) {
          setMessage("You have already voted");
        }
      } catch (error) {
        console.error("Error checking if user voted:", error);
        setMessage("Error checking vote status, please try again.");
      }
    };
    if (currUser && constituency.const_id && election.id) {
      checkIfVoted();
    }
  }, [currUser, constituency, election]);

  const handleOtherAuth = () => {
    openModal();
  };

  const handleVote = async (candidateId) => {
    console.log("voted for ", candidateId);
    console.log("user", currUser.uid);
    if (walletValue < 5) {
      toast.error("You don't have enough balance to vote");
      return;
    } else {
      try {
        if (!voted) {
          await createUserVote({
            candidate_id: candidateId,
            election_id: election.id,
            user_id: currUser.uid,
            constituency_id: constituency.const_id,
            dated: new Date().toISOString(),
          });
          dispatch(decrementVoteAmount());
          console.log("voted successfully");
          toast.success("Voted Successfully");
          setVoted(true);
        } else {
          console.log("user has already voted");
        }
      } catch (error) {
        console.log("error", error);
        toast.error("Error voting, please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      {isOpen && (
        <Modal
          isOpen={isOpen}
          closeModal={closeModal}
          onUserExists={handleUserExists}
        />
      )}
      {verified ? (
        <section className="md:px-8 py-4 px-4">
          <div>
            <ElectionsDetails
              title={election.title}
              end={election.end_at}
              electionType={election.type}
              id={id}
            />
          </div>

          <div className="py-4 flex items-center justify-between">
            <h3 className="text-lg font-normal">
              Date:{" "}
              <span className="font-semibold">
                {new Date(election.start_at).toLocaleString() || ""}
              </span>
            </h3>
          </div>
          {message.length > 0 && (
            <Alert
              message={message}
              type="success"
              dismissible={true}
              autoHideDelay={8000}
            />
          )}
          {voted && (
            <div className="bg-green-200 p-4 flex items-center rounded-md my-5">
              <p className="text-green-800 font-semibold">
                You have Voted Successfully
              </p>
            </div>
          )}
          <div className="grid px-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
            {constituency.candidates &&
              constituency.candidates.map((candidate) => (
                <ElectionCard
                  key={candidate.id}
                  candidate={candidate}
                  onVote={handleVote}
                  disabled={voted}
                />
              ))}
          </div>
        </section>
      ) : (
        <div className="bg-red-200 p-4 flex items-center rounded-md my-5">
          <p className="text-red-950 font-semibold">
            Auth failed try again later
          </p>
          <button className="mx-2" onClick={handleOtherAuth}>
            Other method
          </button>
        </div>
      )}
    </div>
  );
};

export default VoteScreen;

// File: \Side Projects\facecast-vote\src\utils\candidates.js
import { candidatesRef } from "../config/firebase";
import {
  getCollectionById,
  createDocument,
  getCollections,
  updateDocument,
  deleteDocument, // Ensure you import the deleteDocument function from your globals file
} from "./globals";

export const createCandidate = async (data) => {
  try {
    const docId = await createDocument(candidatesRef, data);
    console.log("Candidate created with ID:", docId);
    if (!docId) {
      console.log("Error creating Candidate");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getCandidates = async () => {
  try {
    const collections = await getCollections(candidatesRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getCandidatesById = async (id) => {
  try {
    const documentData = await getCollectionById(candidatesRef, id);
    console.log("Candidate data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateCandidates = async (id, newData) => {
  try {
    const isSuccess = await updateDocument(candidatesRef, id, newData);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

// Add the deleteCandidate function here
export const deleteCandidate = async (id) => {
  try {
    const isSuccess = await deleteDocument(candidatesRef, id);
    if (isSuccess) {
      alert("Candidate deleted successfully");
      return true;
    } else {
      console.log("Document deletion failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\constituency.js
import { constituenciesRef } from "../config/firebase";
import {
  getCollectionById,
  createDocument,
  getCollections,
  updateDocument,
  deleteDocument, // Import the delete function from globals
} from "./globals";

export const createConstituency = async (data) => {
  try {
    const docId = await createDocument(constituenciesRef, data);
    console.log("Constituency created with ID:", docId);
    if (!docId) {
      console.log("Error creating constituency");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getConstituencies = async () => {
  try {
    const collections = await getCollections(constituenciesRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getConstituencyById = async (id) => {
  // Corrected function name
  try {
    const documentData = await getCollectionById(constituenciesRef, id);
    console.log("Constituency data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateConstituency = async (id, newData) => {
  try {
    const isSuccess = await updateDocument(constituenciesRef, id, newData);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

export const deleteConstituency = async (id) => {
  try {
    const isSuccess = await deleteDocument(constituenciesRef, id);
    if (isSuccess) {
      alert("Constituency deleted successfully");
      return true;
    } else {
      console.log("Document deletion failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\elections.js
import { electionsRef } from "../config/firebase"; // Assuming you've defined electionsRef correctly in your firebase config file
import {
  getDocs,
  getDoc,
  doc,
  query,
  onSnapshot,
  orderBy,
  where,
} from "firebase/firestore"; // Correct import statement
import { createDocument, updateDocument } from "./globals";


export const getElections = async () => {
  try {
    const querySnapshot = await getDocs(electionsRef);
    const data = [];
    querySnapshot.forEach((doc) => {
      data.push({ id: doc.id, ...doc.data() });
    });
    return data;
  } catch (error) {
    console.log("Error Fetching data", error);
  }
};

export const createElections = async (data) => {
  try {
    console.log("Creating document...", data);
    const docId = await createDocument(electionsRef, data);
    if (!docId) {
      console.log("Error creating constituency");
    }
    return docId; // Return the document ID on success
  } catch (e) {
    console.error("Error adding document: ", e);
  }
};

export const getElectionData = () => {
  const currentDateTime = new Date();

  const q = query(
    electionsRef,
    where("start_at", "<=", currentDateTime),
    orderBy("start_at", "asc")
  );

  return new Promise((resolve, reject) => {
    onSnapshot(
      q,
      (snapshot) => {
        let elections = [];
        snapshot.forEach((doc) => {
          elections.push({ ...doc.data(), id: doc.id });
        });
        console.log(elections);
        resolve(elections);
      },
      reject
    );
  });
};
export const getElectionData1 = () => {
  const today = new Date().toISOString().split("T")[0];
  const q = query(
    electionsRef,
    where("election_date", ">=", today),
    where("status", "in", ["online", "upcoming"]),
    orderBy("created_at", "desc")
  );

  return new Promise((resolve, reject) => {
    onSnapshot(
      q,
      (snapshot) => {
        let elections = [];
        snapshot.forEach((doc) => {
          elections.push({ ...doc.data(), id: doc.id });
        });
        console.log(elections);
        resolve(elections);
      },
      reject
    );
  });
};

export const getElectiontById = async (documentId) => {
  try {
    const docRef = doc(electionsRef, documentId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      // Document exists
      return { id: docSnap.id, ...docSnap.data() };
    } else {
      // Document does not exist
      return null;
    }
  } catch (error) {
    console.error("Error getting document:", error);
    throw error; // Handle or propagate the error as needed
  }
};

export const updateElection = async (documentId, data) => {
  try {
    const docRef = await updateDocument(electionsRef, documentId, data);
    if (!docRef) {
      console.log("Error updating document");
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error updating document:", error);
    return false;
  }
};

// File: \Side Projects\facecast-vote\src\utils\globals.js
import {
  getDocs,
  addDoc,
  getDoc,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { storage } from "../config/firebase";
export const createDocument = async (collectionRef, data) => {
  try {
    const docRef = await addDoc(collectionRef, data);
    console.log("Document written with ID: ", docRef.id);
    return docRef.id; // Return the document ID on success
  } catch (error) {
    console.error("Error creating document:", error); // Use console.error for errors
    return null; // Return null or handle errors as needed
  }
};

export const getCollections = async (collectionRef) => {
  try {
    const querySnapshot = await getDocs(collectionRef);
    const collections = [];
    querySnapshot.forEach((doc) => {
      collections.push({ id: doc.id, ...doc.data() });
    });
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
    return []; // Return empty array or handle errors as needed
  }
};

export const getCollectionById = async (collectionRef, id) => {
  try {
    const docRef = doc(collectionRef, id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
      return docSnap.data();
    } else {
      console.log("Document does not exist!");
      return null; // Return null or handle non-existent document
    }
  } catch (error) {
    console.error("Error getting document:", error);
    return null; // Return null or handle errors as needed
  }
};

export const updateDocument = async (collectionRef, id, newData) => {
  try {
    const documentRef = doc(collectionRef, id);
    await updateDoc(documentRef, newData);
    console.log("Document updated successfully");
    return true; // Return true on success
  } catch (error) {
    console.error("Error updating document:", error);
    return false; // Return false or handle errors as needed
  }
};

export const uploadImage = async (file, pathPrefix) => {
  try {
    const fileName = `${generateUniqueFileName()}_${file.name}`;

    // Construct the full path
    const fullPath = `${pathPrefix}/${fileName}`;
    const storageRef = ref(storage, fullPath);
    await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(storageRef);
    console.log("Image uploaded successfully");
    return downloadURL;
  } catch (error) {
    console.error("Error uploading image:", error);
    return null;
  }
};

export const deleteDocument = async (collectionRef, id) => {
  try {
    const docRef = doc(collectionRef, id);
    await deleteDoc(docRef);
    return true;
  } catch (error) {
    console.error("Error deleting document:", error);
    return false;
  }
};

const generateUniqueFileName = () => {
  // Generate a random string
  const randomString = Math.random().toString(36).substring(2, 8);
  // Generate a timestamp
  const timestamp = Date.now();
  // Combine random string and timestamp to create a unique filename
  return `${randomString}_${timestamp}`;
};

// File: \Side Projects\facecast-vote\src\utils\parties.js
import {
  createDocument,
  getCollectionById,
  getCollections,
  updateDocument,
  deleteDocument,
} from "./globals";
import { partyRef } from "../config/firebase";

export const createParty = async (data) => {
  try {
    const docId = await createDocument(partyRef, data);
    console.log("Party created with ID:", docId);
    if (!docId) {
      console.log("Error creating Party");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getParties = async () => {
  try {
    const collections = await getCollections(partyRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getPartybyId = async (id) => {
  try {
    const documentData = await getCollectionById(partyRef, id);
    console.log("Party data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateParty = async (id, data) => {
  try {
    const isSuccess = await updateDocument(partyRef, id, data);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

export const deleteParty = async (id) => {
  try {
    const isSuccess = await deleteDocument(partyRef, id);
    if (isSuccess) {
      alert("Party deleted successfully");
      return true;
    } else {
      console.log("Document delete failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\pdgGen.js
import { jsPDF } from "jspdf";
import "jspdf-autotable";

export const generatePDF = async (election) => {
  if (!election) return;

  const doc = new jsPDF();
  let yPos = 50;
  const pageWidth = doc.internal.pageSize.width;

  const img = new Image();
  img.src = process.env.PUBLIC_URL + "/facecast-no-bg.png"; // Use the imported image as the source

  await new Promise((resolve) => {
    img.onload = () => {
      doc.addImage(img, "PNG", 75, 5, 50, 25);
      resolve();
    };
  });

  doc.setFontSize(16);
  doc.setFont("times", "bold");
  doc.text("FaceCast Vote Election System", pageWidth / 2, yPos, {
    align: "center",
  });
  doc.setFontSize(16);
  doc.setFont("times", "bold");
  yPos += 10;
  doc.text(`Election Report ${election.title}`, pageWidth / 2, yPos, {
    align: "center",
  });

  yPos += 20;
  doc.setFontSize(12);
  doc.setFont("times", "normal");
  doc.text("Start at:", 20, yPos);
  doc.text(election.start_at, 50, yPos);

  yPos += 10;
  doc.text("End Time:", 20, yPos);
  doc.text(election.end_at, 50, yPos);

  yPos += 10;
  doc.text("Election type:", 20, yPos);
  doc.text(election.type, 50, yPos);

  yPos += 20;
  doc.setFont("times", "bold");

  // Generate table
  const tableData = [["Constituency", "Candidate Name"]];
  election.constituencies.forEach((constituency) => {
    tableData.push([constituency.name, ""]);
    constituency.candidates.forEach((candidate) => {
      tableData.push(["", candidate.name]);
    });
  });

  doc.autoTable({
    startY: yPos,
    head: [tableData[0]], // Header row
    body: tableData.slice(1), // Data rows
    theme: "striped", // Apply grid theme for table
    styles: { font: "times", fontStyle: "normal" }, // Set font style for table content
    columnStyles: {
      0: { fontStyle: "bold" }, // Bold font style for first column (Constituency)
    },
    didDrawPage: function (data) {
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      doc.setFontSize(10);
      doc.text(
        "Page " + data.pageNumber + " of " + pageCount,
        pageWidth - 20,
        pageHeight - 10,
        { align: "right" }
      );
      doc.text("Election Commissioner FaceCastVote", 20, pageHeight - 20);
      // Add computer-generated image text
      doc.text(
        `This is a computer-generated document by FaceCast Voter for ${
          election.title
        } on ${getCurrentDate()}`,
        20,
        pageHeight - 10,
        { align: "left" }
      );
    },
  });

  doc.save(`${election.title}-${election.type}.pdf`);
};

export async function generateResultPdf(result) {
  console.log("Generating PDF for", result.electionTitle);
  const doc = new jsPDF();
  let yPos = 50;
  const pageWidth = doc.internal.pageSize.width;
  console.log("Page width", pageWidth);

  // Use a different variable name for the dynamically created Image object
  var img = new Image();
  img.src = img.src = process.env.PUBLIC_URL + "/facecast-no-bg.png"; // Use the imported image as the source
  // Use the imported image as the source
  console.log("Image source", img.src);
  // Wait for the image to load before adding it to the PDF
  await new Promise((resolve) => {
    img.onload = () => {
      // Add image to PDF
      doc.addImage(img, "PNG", 75, 5, 50, 25, { align: "center" });
      resolve();
    };
  });
  console.log("Image added to PDF");
  // Set font size and style for title
  doc.setFontSize(16);
  doc.setFont("times", "bold");
  doc.text("FaceCast Vote Election System", pageWidth / 2, yPos, {
    align: "center",
  });
  console.log("Title added to PDF");
  // Set font size and style for election title
  yPos += 20;
  doc.setFontSize(12);
  doc.setFont("times", "normal");
  doc.text(result.electionTitle, 20, yPos);

  // Set font size and style for election date
  yPos += 10;
  doc.setFontSize(12);
  doc.text("Election conducted on " + getCurrentDate(), 20, yPos);

  // Move to next section
  yPos += 20;
  // Set font size and style for table headers
  doc.setFontSize(12);
  doc.setFont("times", "bold");
  const tableData = [["Constituency", "Candidate Name", "Votes", "Winner"]];
  result.constituencies.forEach((constituency) => {
    let maxVotes = 0;
    let winnerName = "";
    constituency.candidates.forEach((candidate) => {
      tableData.push([constituency.name, candidate.name, candidate.votes, ""]);
      if (candidate.votes > maxVotes) {
        maxVotes = candidate.votes;
        winnerName = candidate.name;
      }
    });
    // Tag the winner
    if (winnerName !== "") {
      tableData[tableData.length - 1][3] = "(Winner)";
    }
  });


  // Add table to PDF
  doc.autoTable({
    startY: yPos,
    head: [tableData[0]], // Header row
    body: tableData.slice(1), // Data rows
    theme: "striped", // Apply grid theme for table
    styles: { font: "times", fontStyle: "normal" }, // Set font style for table content
    columnStyles: {
      0: { fontStyle: "bold" }, // Bold font style for first column (Constituency)
    },
    didDrawPage: function (data) {
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      doc.setFontSize(10);
      doc.text(
        "Page " + data.pageNumber + " of " + pageCount,
        pageWidth - 20,
        pageHeight - 10,
        { align: "right" }
      );
      doc.text("Election Commissioner FaceCastVote", 20, pageHeight - 20);
      // Add computer-generated image text
      doc.text(
        `This is a computer-generated document by FaceCast Voter for ${
          result.electionTitle
        } on ${getCurrentDate()}`,
        20,
        pageHeight - 10,
        { align: "left" }
      );
    },
  });

  // Save PDF
  doc.save("election_results.pdf");
  return true;
}
function getCurrentDate() {
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); // January is 0!
  var yyyy = today.getFullYear();
  return mm + "/" + dd + "/" + yyyy;
}

// File: \Side Projects\facecast-vote\src\utils\profile.js
import { getDocs, query, where, updateDoc } from "firebase/firestore";
import { usersRef } from "../config/firebase";
// import { fetchSignInMethodsForEmail } from "firebase/auth";
// import { auth } from "../config/firebase";
import { doc, getDoc } from "firebase/firestore";
// Find profile by email id
export const getProfileByEmail = async (email) => {
  try {
    console.log("Searching for profile with email:", email);
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);
    console.log("Query snapshot:", querySnapshot.docs.length);
    if (!querySnapshot.empty) {
      const doc = querySnapshot.docs[0];
      console.log("Profile document data:", doc.data());
      return doc.data();
    } else {
      console.log("No profile found for email:", email);
      return null;
    }
  } catch (error) {
    console.error("Error fetching profile:", error);
    throw error;
  }
};

export const updateProfileByEmail = async (email, newData) => {
  try {
    // Find the document corresponding to the provided email
    const querySnapshot = await getDocs(
      query(usersRef, where("email", "==", email.toString()))
    );

    if (!querySnapshot.empty) {
      const docRef = querySnapshot.docs[0].ref;
      // Update the document with the new data
      await updateDoc(docRef, newData);
      console.log("Document updated successfully!");
    } else {
      console.log("No document found for the provided email:", email);
    }
  } catch (error) {
    console.error("Error updating document:", error);
    throw error;
  }
};

export const checkUserExists = async (email, currUser) => {
  try {
    if (!currUser) {
      console.log("No user found");
      return false;
    }
    if (currUser.email !== email) {
      console.log("Email does not match");
      return false;
    }
    const findEmail = await getProfileByEmail(email);
    console.log("findEmail", findEmail);
    if (findEmail) {
      return true;
    }
    return false;
  } catch (error) {
    console.error("Error checking if user exists:", error);
    return false;
  }
};
export const getuserByid = async (id) => {
  try {
    const docRef = doc(usersRef, id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
      return docSnap.data();
    } else {
      console.log("No such document!");
    }
  } catch (error) {
    console.log("Error getting document:", error);
  }
};


// File: \Side Projects\facecast-vote\src\utils\userVotes.js
import {
  addDoc,
  getDocs,
  where,
  query,
} from "firebase/firestore";
import { userVoteRef } from "../config/firebase";

export const createUserVote = async (data) => {
  try {
    const docRef = await addDoc(userVoteRef, data);
    console.log("Document written with ID: ", docRef.id);
  } catch (e) {
    console.error("Error adding document: ", e);
  }
};

export const checkIfUserVoted = async (userId, constituencyId, electionId) => {

  try {
    console.log("userId", userId);
    console.log("constituencyId", constituencyId);
    console.log("electionId", electionId);
    const snapshot = await getDocs(
      query(
        userVoteRef, // Reference the "user_vote" collection
        where("user_id", "==", userId),
        where("constituency_id", "==", constituencyId),
        where("election_id", "==", electionId)
      )
    );

    return !snapshot.empty; // Returns true if a document exists, indicating the user has voted for the given constituency in the specified election
  } catch (error) {
    console.error("Error checking if user voted:", error);
    return false; // Return false in case of any error
  }
};

// File: \Side Projects\facecast-vote\src\utils\utilityFunctions.js
import { getDocs } from "firebase/firestore";

export const fetchSpecificFieldsFromCollection = async (
  collectionRef,
  fields,
  filterField,
  filterValue
) => {
  try {
    const querySnapshot = await getDocs(collectionRef);

    const data = [];
    querySnapshot.forEach((doc) => {
      const docData = { id: doc.id }; // Include the document ID in the object
      if (!filterField || doc.data()[filterField] === filterValue) {
        fields.forEach((field) => {
          docData[field] = doc.data()[field];
        });
        data.push(docData);
      }
    });

    return data;
  } catch (error) {
    console.error("Error fetching documents:", error);
    return [];
  }
};

export const fetchSpecificFieldsFromCollectionWithOutFilter = async (
  collectionRef,
  fields
) => {
  try {
    const querySnapshot = await getDocs(collectionRef);

    const data = [];
    querySnapshot.forEach((doc) => {
      const docData = { id: doc.id }; // Include the document ID in the object
      fields.forEach((field) => {
        docData[field] = doc.data()[field];
      });
      data.push(docData);
    });

    return data;
  } catch (error) {
    console.error("Error fetching documents:", error);
    return [];
  }
}


// File: \Side Projects\facecast-vote\src\App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

// File: \Side Projects\facecast-vote\src\App.js
import React from "react";
import { Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import { BrowserRouter as Router } from "react-router-dom";
import RootLayout from "./Layout/RootLayout";
import CandLayout from "./Layout/CandidatesLayout";
import SignupLayout from "./Layout/Auth/SignupLayout";
import LoginLayout from "./Layout/Auth/LoginLayout";
import ProfileLayout from "./Layout/ProfileLayout";
import VoteNowLayout from "./Layout/user/VoteNowLayout";
import ElectionLayout from "./Layout/ElectionLayout";
import AdminLayout from "./Layout/AdminLayout";
import ConstituencyLayout from "./Layout/ConstituencyLayout";
import PrivateRoute from "./Components/PrivateRoute";
import ConstPreview from "./Pages/Constituency/ConstPreview";
import ConstUpdate from "./Pages/Constituency/ConstUpdate";
import VoteHome from "./Pages/VoteNow/VoteHome";
import VoteScreen from "./Pages/VoteNow/VoteScreen";
import ProfilePage from "./Pages/Profile/ProfilePage";
import ProfileUpdate from "./Pages/Profile/ProfileUpdate";
import ElectionHome from "./Pages/Elections/ElectionHome";
import ElectionPreview from "./Pages/Elections/ElectionPreview";
import CreateElection from "./Pages/Elections/CreateElection";
import ConstHome from "./Pages/Constituency/ConstHome";
import ConstCreate from "./Pages/Constituency/ConstCreate";
import PartyHome from "./Pages/Parties/PartyHome";
import PartyCreate from "./Pages/Parties/PartyCreate";
import PartyView from "./Pages/Parties/PartyView";
import PartyUpdate from "./Pages/Parties/PartyUpdate";
import PartyLayout from "./Layout/PartyLayout";
import CandHome from "./Pages/Candidate/CandHome";
import CandCreate from "./Pages/Candidate/CandCreate";
import CandPreview from "./Pages/Candidate/CandPreview";
import CandUpdate from "./Pages/Candidate/CandUpdate";
import VoterLayout from "./Layout/VoterLayout";
import ComplaintAdminHome from "./Pages/Complaints/Admin/ComplaintAdminHome";
import ComplaintLayout from "./Layout/ComplaintLayout";
import ComplaintUserHome from "./Pages/Complaints/User/ComplaintUserHome";
import SiteHome from "./Pages/SiteHome";
import SettingsLayout from "./Layout/SettingsLayout";
import AdminSettings from "./Pages/AdminSettings";
import SeedData from "./Pages/SeedData";
import Results from "./Pages/Results";

const App = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="" element={<RootLayout />}>
            <Route index element={<SiteHome />} />
            <Route path="signup" element={<SignupLayout />} />
            <Route path="signin" element={<LoginLayout />} />
            <Route path="results" element={<Results />} />
            <Route
              path="voter"
              element={
                <PrivateRoute allowedRoles={["voter"]} redirectTo="/signin" />
              }
            >
              <Route index element={<VoterLayout />} />
              <Route path="results" element={<Results />} />
              <Route path="vote" element={<VoteNowLayout />}>
                <Route index element={<VoteHome />} />
                <Route path=":id" element={<VoteScreen />} />
              </Route>
              <Route path="profile" element={<ProfileLayout />}>
                <Route index element={<ProfilePage />} />
                <Route path="update" element={<ProfileUpdate />} />
              </Route>
              <Route path="complaint" element={<ComplaintLayout />}>
                <Route index element={<ComplaintUserHome />} />
              </Route>
            </Route>
            <Route
              path="admin"
              element={
                <PrivateRoute allowedRoles={["admin"]} redirectTo="/signin" />
              }
            >
              <Route index element={<AdminLayout />} />
              <Route path="results" element={<Results />} />
              <Route path="elections" element={<ElectionLayout />}>
                <Route index element={<ElectionHome />} />
                <Route path="create" element={<CreateElection />} />
                <Route path=":id" element={<ElectionPreview />} />
              </Route>
              <Route path="constituency" element={<ConstituencyLayout />}>
                <Route index element={<ConstHome />} />
                <Route path="create" element={<ConstCreate />} />
                <Route path=":id" element={<ConstPreview />} />
                <Route path="update/:id" element={<ConstUpdate />} />
              </Route>
              <Route path="party" element={<PartyLayout />}>
                <Route index element={<PartyHome />} />
                <Route path="create" element={<PartyCreate />} />
                <Route path=":id" element={<PartyView />} />
                <Route path="update/:id" element={<PartyUpdate />} />
              </Route>
              <Route path="candidate" element={<CandLayout />}>
                <Route index element={<CandHome />} />
                <Route path="create" element={<CandCreate />} />
                <Route path=":id" element={<CandPreview />} />
                <Route path="update/:id" element={<CandUpdate />} />
              </Route>
              <Route path="complaints" element={<ComplaintLayout />}>
                <Route index element={<ComplaintAdminHome />} />
              </Route>
              <Route path="settings" element={<SettingsLayout />}>
                <Route index element={<AdminSettings />} />
                <Route path="seed-data" element={<SeedData />} />
              </Route>
            </Route>
          </Route>
        </Routes>
      </Router>
    </AuthProvider>
  );
};

export default App;

// File: \Side Projects\facecast-vote\src\App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

// File: \Side Projects\facecast-vote\src\errHandler.js
// errorHandler.js

window.onerror = function(message, source, lineno, colno, error) {
    // Check if the error message contains "Script error"
    if (message && message.indexOf('Script error') > -1) {
      // Suppress the error
      return true;
    }
    
    // Handle other errors normally
    console.error(message, source, lineno, colno, error);
  };
  

// File: \Side Projects\facecast-vote\src\index.css
@tailwind base;
@tailwind components;
@tailwind utilities;


.form-label {
    @apply text-lg text-slate-900 mb-3 font-medium;
  }
.form-input {
    @apply mt-2 w-full px-3 py-2 border-2 border-gray-200 rounded-md bg-gray-50  focus:outline-none focus:border-regal-blue-700;
  }

// File: \Side Projects\facecast-vote\src\index.js
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
// import 'bootstrap/dist/css/bootstrap.min.css';
import { Provider } from "react-redux";
import store from "./config/store";
import "./errHandler";
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

// File: \Side Projects\facecast-vote\src\LogoutOnUnload.js
import { useEffect } from "react";
import { useAuth } from "./context/AuthContext";

const LogoutOnUnload = () => {
  const { logOut } = useAuth();

  useEffect(() => {
    const handleUnload = () => {
      logOut();
    };

    window.addEventListener("beforeunload", handleUnload);

    return () => {
      window.removeEventListener("beforeunload", handleUnload);
    };
  }, [logOut]);

  return null;
};

export default LogoutOnUnload;

// File: \Side Projects\facecast-vote\src\reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

// File: \Side Projects\facecast-vote\src\setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

// File: \Side Projects\facecast-vote\src\Components\Utils\BreadCrumbs.jsx
import React from "react";
import { useLocation, Link } from "react-router-dom";

const BreadCrumbs = () => {
  let currentLink = "";
  const location = useLocation();
  const breadCrumbs = location.pathname
    .split("/")
    .filter((crumb) => crumb !== "")
    .map((crumb, index, array) => {
      currentLink += `/${crumb}`;
      return (
        <React.Fragment key={index}>
          <Link
            to={currentLink}
            className="text-blue-500 hover:text-blue-700 font-medium"
          >
            {crumb}
          </Link>
          {index !== array.length - 1 && (
            <span className="mx-1">/</span>
          )}
        </React.Fragment>
      );
    });

  return (
    <div className="text-sm">
      <span className="text-gray-500">{breadCrumbs}</span>
    </div>
  );
};

export default BreadCrumbs;

// File: \Side Projects\facecast-vote\src\Components\Utils\ElectionsDetails.jsx
import React, { useState, useEffect } from "react";
import { CgChevronDoubleRight } from "react-icons/cg";
import { getCollectionById, createDocument } from "../../utils/globals";
import { electionsRef, resultsRef, userVoteRef } from "../../config/firebase";
import { query, where, getDocs } from "firebase/firestore";
import CountdownTimer from "../CountdownTimer";


const getVotesByconstituency = async (
  constituency_id,
  election_id,
  candidate_id
) => {
  const votes = [];
  try {
    // console.log("Getting votes");
    // console.log("Constituency", constituency_id);
    // console.log("Election", election_id);
    // console.log("Candidate", candidate_id);
    const q = query(
      userVoteRef,
      where("constituency_id", "==", constituency_id),
      where("election_id", "==", election_id),
      where("candidate_id", "==", candidate_id)
    );
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      votes.push(doc.data());
    });
    return votes;
  } catch (error) {
    console.error("Error getting votes:", error);
    return null;
  }
};
const ElectionsDetails = ({ title, end, electionType, id }) => {
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);

  const announceResultst = async () => {
    console.log("Time's up!");
    console.log("ID!", id);
    if (!id) {
      return;
    }
    //get election details
    const election = await getCollectionById(electionsRef, id);
    if (!election) {
      return;
    }
    // const electionid = election.id;
    // console.log("Election details", election);
    const fetchedConstituencies = election.constituencies;
    const fetchedCandidates = [];

    // Loop through constituencies and candidates and push them into the arrays
    fetchedConstituencies.forEach((constituency) => {
      if (constituency.candidates && Array.isArray(constituency.candidates)) {
        fetchedCandidates.push(...constituency.candidates);
      }
    });
    // console.log("Constituencies", fetchedConstituencies);
    // console.log("Candidates", fetchedCandidates);
    setConstituencies(fetchedConstituencies);
    setCandidates(fetchedCandidates);

    const resultData = {
      electionTitle: election.title,
      totalVotes: 0,
      electionID: id,
      constituencies: [],
    };

    for (const constituency of fetchedConstituencies) {
      const constituencyData = {
        name: constituency.name,
        id: constituency.const_id,
        candidates: [],
      };
      for (const candidate of fetchedCandidates) {
        // console.log("Candidate", candidate.id);
        // console.log("Constituency", constituency.const_id);
        const votes = await getVotesByconstituency(
          constituency.const_id,
          id,
          candidate.id
        );
        // console.log("Votes", votes);
        const candidateData = {
          name: candidate.name,
          id: candidate.id,
          votes: votes ? votes.length : 0, // Check if votes exist and get the length
        };
        constituencyData.candidates.push(candidateData);
        if (votes) {
          resultData.totalVotes += votes.length;
        }
      }
      resultData.constituencies.push(constituencyData);
    }
    // console.log("Result Data", resultData);

    // inserting data to result collection

    const resultRef = await createDocument(resultsRef, resultData);
    if (resultRef) {
      console.log("Results saved successfully");
    } else {
      console.log("Error saving results");
    }
  };

  

  return (
    <div className="border-b border-b-stone-300 mb-0">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
         
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResultst}
          />
        </div>
      </div>
      <div className="py-2">
        <a className="flex items-center gap-1 text-regal-blue-600">
          Learn more <CgChevronDoubleRight className="h-10 pt-1" />
        </a>
      </div>
    </div>
  );
};

export default ElectionsDetails;

// File: \Side Projects\facecast-vote\src\Components\Utils\StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = '';
  let textColor = '';

  switch (status) {
    case 'online':
      bgColor = 'bg-green-600';
      textColor = 'text-white';
      break;
    case 'offline':
      bgColor = 'bg-red-600';
      textColor = 'text-white';
      break;
    case 'upcoming':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      break;
    default:
      bgColor = 'bg-gray-600';
      textColor = 'text-white';
  }

  return (
    <span className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}>
      {status}
    </span>
  );
};

export default StatusBadge;

// File: \Side Projects\facecast-vote\src\Components\Alert.jsx
import React, { useState, useEffect } from "react";
import { IoCloseCircleOutline } from "react-icons/io5";
import { IoMdInformationCircleOutline } from "react-icons/io";
const Alert = ({ message, type, dismissible, autoHideDelay }) => {
  const [show, setShow] = useState(true);

  useEffect(() => {
    if (autoHideDelay && autoHideDelay > 0) {
      const timeoutId = setTimeout(() => {
        setShow(false);
      }, autoHideDelay);

      return () => clearTimeout(timeoutId);
    }
  }, [autoHideDelay]);

  const handleClose = () => {
    setShow(false);
  };

  return (
    <div
      className={`fixed top-20 inset-0 flex items-end justify-center px-4 py-6 pointer-events-none sm:p-6 sm:items-start sm:justify-end ${
        show ? "" : "hidden"
      }`}
    >
      <div
        className={`max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden ${
          type === "success"
            ? "border-green-400"
            : type === "error"
            ? "border-red-400"
            : type === "warning"
            ? "border-yellow-400"
            : ""
        }`}
      >
        <div className="p-4">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <IoMdInformationCircleOutline className="h-6 w-6" />
            </div>
            <div className="ml-3 w-0 flex-1 pt-0.5">
              <p
                className={`text-sm font-medium ${
                  type === "success"
                    ? "text-gray-900"
                    : type === "error"
                    ? "text-gray-900"
                    : type === "warning"
                    ? "text-gray-900"
                    : "text-gray-900"
                }`}
              >
                {message}
              </p>
            </div>
            {dismissible && (
              <div className="ml-4 flex-shrink-0 flex">
                <button
                  onClick={handleClose}
                  className="inline-flex text-gray-400 focus:outline-none focus:text-gray-500 transition ease-in-out duration-150"
                >
                  <IoCloseCircleOutline className="h-6 w-6" />
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Alert;

// File: \Side Projects\facecast-vote\src\Components\AppHeader.jsx
import React from "react";
import { useAuth } from "../context/AuthContext";
import AuthHeaderUser from "./AuthHeaderUser";
import AuthHeaderGuest from "./AuthHeaderGuest";
import AuthHeaderAdmin from "./AuthHeaderAdmin";
const AppHeader = () => {
  const { currUser, roles } = useAuth();

  return (
    <>
      {currUser ? (
        roles === "admin" ? (
          <AuthHeaderAdmin userData={currUser} />
        ) : roles === "voter" ? (
          <AuthHeaderUser userData={currUser} />
        ) : (
          <AuthHeaderGuest />
        )
      ) : (
        <AuthHeaderGuest />
      )}
    </>
  );
};

export default AppHeader;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderAdmin.jsx
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { AiOutlineClose, AiOutlineMenu } from "react-icons/ai";
import { Transition } from "@headlessui/react";
import { useRef, useState, useEffect } from "react";
import DropDown from "./DropDown";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
const AuthHeaderAdmin = () => {
  const navigate = useNavigate();
  const { logOut, currUser } = useAuth();
  const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);
  const handleLogout = () => {
    try {
      logOut();
      navigate("/signin");
      toast.success("Logged Out Successfully");
      console.log("Logged Out");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  useEffect(() => {
    console.log("AuthHeaderAdmin.jsx", "line: 1", "useEffect");
  }, []);
  const menuItemsAdminApp = [
    {
      label: "Results",
      to: "/admin/results",
    },
    {
      label: "Complaints",
      to: "/admin/complaints",
    },
    {
      label: "Settings",
      to: "/admin/settings",
    },
  ];
  const menuItemsUser = [
    {
      label: "logout",
      to: "/admin",
    },
  ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
        <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/admin" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/admin/elections" className="hover:opacity-90">
              Election
            </Link>
            <Link to="/admin/candidate" className="hover:opacity-90">
              Candidate
            </Link>
            <Link to="/admin/constituency" className="hover:opacity-90">
              Constituency
            </Link>
            <Link to="/admin/party" className="hover:opacity-90">
              Party
            </Link>

            <DropDown title={"More"} menuItems={menuItemsAdminApp} />
            <div className="flex gap-2">
              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                Logout
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/admin" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/admin/elections" className="hover:opacity-90">
                Election
              </Link>
              <Link to="/admin/candidate" className="hover:opacity-90">
                Candidate
              </Link>
              <Link to="/admin/constituency" className="hover:opacity-90">
                Constituency
              </Link>
              <Link to="/admin/party" className="hover:opacity-90">
                Party
              </Link>

              <DropDown title={"More"} menuItems={menuItemsAdminApp} />
              <div className="flex gap-2">
                <button
                  onClick={handleLogout}
                  className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 rounded-md hover:bg-regal-blue-900/80"
                >
                  Logout
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderAdmin;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderGuest.jsx
import React from "react";
import { useState, useRef } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
// import DropDown from "./DropDown";
import { Link } from "react-router-dom";
// import { useAuth } from "../context/AuthContext";

const AuthHeaderUser = () => {
  //   const { logOut, currUser } = useAuth();
  //   const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);

  //   const menuItemsAdminApp = [
  //     {
  //       label: "Elections",
  //       to: "/elections",
  //     },
  //     {
  //       label: "Candidates",
  //       to: "/candidate",
  //     },
  //     {
  //       label: "Parties",
  //       to: "/party",
  //     },
  //     {
  //       label: "Constituency",
  //       to: "/const",
  //     },
  //   ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>

          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/results" className="hover:opacity-90">
              Results
            </Link>
            {/* <Link to="vote" className="hover:opacity-90">
              Vote
            </Link> */}

            {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
            <div className="flex gap-2">
              {/* <DropDown
                title={username}
                type={"userAccount"}
                menuItems={menuItemsUser}
              /> */}
              <button className=" text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:opacity-90">
                <Link to="/signin">Sign In</Link>
              </button>
              <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80">
                <Link to="/signup">Sign Up</Link>
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/results" className="hover:opacity-90">
                Results
              </Link>

              {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
              <div className="flex gap-2">
                {/* <DropDown
                  title={"Muhammd Saad"}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                /> */}
                <button className=" text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:opacity-90">
                  <Link to="/signin">Sign In</Link>
                </button>
                <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80">
                  <Link to="/signup">Sign Up</Link>
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderUser;

// File: \Side Projects\facecast-vote\src\Components\AuthHeaderUser.jsx
import React from "react";
import { useState, useRef, useEffect } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
import DropDown from "./DropDown";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getProfileByEmail } from "../utils/profile";
import { MdOutlineAccountBalanceWallet } from "react-icons/md";
import CryptoWalletModal from "./CryptoWalletModal";
import toast from "react-hot-toast";

const AuthHeaderUser = () => {
  const { logOut, currUser } = useAuth();
  // const username = currUser ? currUser.email.split("@") : [null];
  const [isOpen, setIsOpen] = useState(false);
  const [profile, setProfile] = useState([]);
  const mobileNavRef = useRef(null);
  const handleLogout = () => {
    try {
      logOut();
      console.log("Logged Out");
      toast.success("Logged Out Successfully");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  const menuItemsUser = [
    {
      label: "Profile",
      to: "/voter/profile",
    },
    {
      label: "Update Profile",
      to: "/voter/profile/update",
    },
  ];
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []);

  // const [isModalOpen, setIsModalOpen] = useState(false);

  // const openModal = () => {
  //   setIsModalOpen(true);
  // };

  // const closeModal = () => {
  //   setIsModalOpen(false);
  // };
  //   const menuItemsAdminApp = [
  //     {
  //       label: "Elections",
  //       to: "/elections",
  //     },
  //     {
  //       label: "Candidates",
  //       to: "/candidate",
  //     },
  //     {
  //       label: "Parties",
  //       to: "/party",
  //     },
  //     {
  //       label: "Constituency",
  //       to: "/const",
  //     },
  //   ];
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      {/* <CryptoWalletModal isOpen={isModalOpen} onClose={closeModal} /> */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <Link to="/">
            <img
              src={process.env.PUBLIC_URL + "/facecast-no-bg.png"}
              alt="logo"
              className="w-28"
            />
          </Link>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/voter" className="hover:opacity-90">
              Home
            </Link>
            <Link to="/voter/vote" className="hover:opacity-90">
              Vote
            </Link>
            <Link to="/voter/results" className="hover:opacity-90">
              Results
            </Link>

            {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
            <div className="flex gap-4">
              {/* <button onClick={openModal}>
                <MdOutlineAccountBalanceWallet className="h-6 w-6" />
              </button> */}
              <DropDown
                title={profile.fname}
                type={"userAccount"}
                menuItems={menuItemsUser}
              />

              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                Logout
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <div className="flex flex-row gap-6 items-center">
                {/* <button onClick={openModal}>
                  <MdOutlineAccountBalanceWallet className="h-6 w-6" />
                </button> */}
                <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
              </div>
            ) : (
              <div className="flex flex-row gap-6 items-center">
                {/* <button onClick={openModal}>
                  <MdOutlineAccountBalanceWallet className="h-6 w-6" />
                </button> */}
                <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
              </div>
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/voter" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/voter/vote" className="hover:opacity-90">
                Vote
              </Link>
              <Link to="/voter/results" className="hover:opacity-90">
                Results
              </Link>
              {/* <DropDown title={"More"} menuItems={menuItemsAdminApp} /> */}
              <div className="flex gap-2">
                <DropDown
                  title={profile.fname}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                />
                <button
                  onClick={handleLogout}
                  className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2  rounded-md hover:bg-regal-blue-900/80"
                >
                  Logout
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default AuthHeaderUser;

// File: \Side Projects\facecast-vote\src\Components\CountdownTimer.jsx
import React, { useState, useEffect } from "react";

const CountdownTimer = ({ targetDate, startTime, endTime, onTimerEnd }) => {
  const calculateTimeLeft = () => {
    const now = new Date();
    const target = new Date(targetDate);
    const start = new Date(target.toDateString() + " " + startTime);
    const end = new Date(target.toDateString() + " " + endTime);

    let difference = 0;

    if (now < target) {
      // If current time is before the target date, set the difference to the time until target date
      difference = target - now;
    } else if (now >= start && now <= end) {
      // If current time is between start and end time, set the difference to the time until end time
      difference = end - now;
    }

    let timeLeft = {};

    if (difference > 0) {
      timeLeft = {
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
    }

    return timeLeft;
  };

  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

  useEffect(() => {
    const timer = setTimeout(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearTimeout(timer);
  });

  useEffect(() => {
    if (
      timeLeft.hours === 0 &&
      timeLeft.minutes === 0 &&
      timeLeft.seconds === 0
    ) {
      onTimerEnd();
    }
  }, [timeLeft, onTimerEnd]);

  const timerComponents = [];

  Object.keys(timeLeft).forEach((interval) => {
    if (!timeLeft[interval]) {
      return;
    }

    timerComponents.push(
      <div className="text-center" key={interval}>
        <h4 className="mb-1 text-2xl font-bold">{timeLeft[interval]}</h4>
        <p className="text-md mb-0">{interval}</p>
      </div>
    );
  });

  return (
    <div className="flex flex-row gap-3 justify-content-center">
      {timerComponents.length ? (
        timerComponents
      ) : (
        <h3 className="text-red-600 font-semibold">Time's up!</h3>
      )}
    </div>
  );
};

export default CountdownTimer;

// File: \Side Projects\facecast-vote\src\Components\CryptoWalletModal.jsx
import React from "react";
import { Dialog } from "@headlessui/react";
import { useSelector } from "react-redux";
const CryptoWalletModal = ({ isOpen, onClose }) => {
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  return (
    <Dialog open={isOpen} onClose={onClose}>
      <Dialog.Overlay className="fixed inset-0 bg-black opacity-50" />

      <div className="px-6 py-8 bg-white rounded-lg shadow-lg fixed top-12 z-10 right-36 max-w-sm flex gap-10 flex-col">
        <Dialog.Title className="text-md text-center font-semibold text-gray-900 mb-2">
          Facecast Wallet
        </Dialog.Title>

        <Dialog.Description className="flex items-center justify-center flex-col text-sm text-center font-medium text-regal-blue-600 mb-4">
          <span>Total Assets:</span>
          <span className="text-6xl font-bold pl-3">{walletValue} <span className="text-sm text-gray-800">FSC</span></span>
        </Dialog.Description>

        <p className="text-sm text-gray-600">
          5 FSC coins are required to cast a vote
        </p>

        <div className="mt-4 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm text-white bg-regal-blue-600 rounded-md hover:bg-regal-blue-700 focus:outline-none focus:ring focus:ring-blue-200"
          >
            Close
          </button>
        </div>
      </div>
    </Dialog>
  );
};

export default CryptoWalletModal;

// File: \Side Projects\facecast-vote\src\Components\DataLine.jsx
import React from "react";

const DataLine = ({ title, value }) => {
  return (
    <div class="flex border-b border-gray-200 py-2">
      <span class="text-gray-500">{title}</span>
      <span class="ml-auto text-gray-900">{value}</span>
    </div>
  );
};

export default DataLine;

// File: \Side Projects\facecast-vote\src\Components\DropDown.jsx
import { FaChevronDown } from "react-icons/fa";
import { Menu, Transition } from "@headlessui/react";
import { Fragment } from "react";

import React from "react";
import { Link } from "react-router-dom";

const DropDown = ({ title, type, menuItems }) => {
  return (
    <div className="text-right z-0">
      <Menu as="div" className="relative inline-block text-left">
        <div>
          <Menu.Button
            className={`inline-flex w-full justify-center rounded-md text-md text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75 ${
              type
                ? "p-2 border border-regal-blue-800 bg-regal-blue-800 hover:bg-regal-blue-900/80"
                : ""
            }`}
          >
            {title ? title : "Options"}
            <FaChevronDown
              className="relative mt-2 ml-2 h-3 w-3 text-regal-blue-50 hover:text-regal-blue-100"
              aria-hidden="true"
            />
          </Menu.Button>
        </div>
        <Transition
          as={Fragment}
          enter="transition ease-out duration-100"
          enterFrom="transform opacity-0 scale-95"
          enterTo="transform opacity-100 scale-100"
          leave="transition ease-in duration-75"
          leaveFrom="transform opacity-100 scale-100"
          leaveTo="transform opacity-0 scale-95"
        >
          <Menu.Items
            className={
              type
                ? "absolute right-0 mt-2 w-full origin-top-right rounded-md border border-regal-blue-800  bg-white shadow-md focus:outline-none"
                : "absolute right-0 mt-2 w-32 origin-top-right rounded-md border border-regal-blue-800  bg-white shadow-md focus:outline-none"
            }
          >
            {menuItems.map((item, index) => (
              <Menu.Item key={index}>
                {({ active }) => (
                  <Link to={item.to}>
                    <button
                      className={`${
                        active ? "text-regal-blue-800" : "text-black"
                      } text-regal-blue-900 group flex w-full items-center px-2 py-2 text-sm font-medium`}
                    >
                      {item.label}
                    </button>
                  </Link>
                )}
              </Menu.Item>
            ))}
          </Menu.Items>
        </Transition>
      </Menu>
    </div>
  );
};

export default DropDown;

// File: \Side Projects\facecast-vote\src\Components\ElectionCard.jsx
// ElectionCard.jsx
import React from "react";

const ElectionCard = ({ candidate, onVote, disabled }) => {
  const handleVoteClick = () => {
    onVote(candidate.id);
  };
  console.log("Candidate qqq2233", candidate);

  return (
    <section className="text-gray-600 mb-4">
      <div className="">
        <div className="flex flex-wrap">
          <div className="">
            <div className="h-full border-2 border-gray-200 border-opacity-60 rounded-lg overflow-hidden">
              <img
                className="lg:h-48 md:h-36  object-cover object-center"
                src={candidate.partyImg || "https://via.placeholder.com/150"}
                alt="blog"
              />
              <div className="p-6">
                <h1 className="title-font text-xl font-medium text-gray-900 mb-3">
                  {candidate.name}
                </h1>
                {/* <p className="leading-relaxed mb-3">{party}</p> */}
                <div className="flex items-center flex-wrap ">
                  <button
                    onClick={handleVoteClick}
                    className={`text-regal-blue-50 bg-regal-blue-700 rounded-md w-full text-center py-2 inline-flex items-center justify-center md:mb-2 lg:mb-0 ${disabled ? 'cursor-not-allowed opacity-50' : ''}`}
                    disabled={disabled}
                  >
                    Vote
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ElectionCard;

// File: \Side Projects\facecast-vote\src\Components\ElectionCard1.jsx
import React from "react";

const ElectionCard1 = () => {
  return (
    <section className="text-gray-600 mb-4">
      <div className="">
        <div className="flex flex-wrap">
          <div className="">
            <div className="h-full border-2 border-gray-200 border-opacity-60 rounded-lg overflow-hidden">
              <img
                className="lg:h-48 md:h-36 w-full object-cover object-center"
                src="https://dummyimage.com/720x400"
                alt="blog"
              />
              <div className="p-6">
                <h1 className="title-font text-xl font-medium text-gray-900 mb-3">
                  Party Name
                </h1>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ElectionCard1;

// File: \Side Projects\facecast-vote\src\Components\Footer.jsx
import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { useLocation } from "react-router-dom";
const Footer = () => {
  const { roles } = useAuth();
  const location = useLocation();
  const getVoterScreenLocation = location.pathname.includes("/voter/vote");
  console.log("location", getVoterScreenLocation);
  return (
    <footer class="flex flex-col items-center bg-regal-blue-700 text-center text-white">
      {roles === "voter" && !getVoterScreenLocation ? (
        <div class="container p-6">
          <div class="">
            <p class="flex items-center justify-center">
              <Link
                to="/voter/vote"
                class="inline-block rounded-full border-2 border-neutral-50 px-6 pb-[6px] pt-2 text-xs font-medium uppercase leading-normal text-neutral-50 transition duration-150 ease-in-out hover:border-neutral-300 hover:text-neutral-200 focus:border-neutral-300 focus:text-neutral-200 focus:outline-none focus:ring-0 active:border-neutral-300 active:text-neutral-200 dark:hover:bg-neutral-600 dark:focus:bg-neutral-600"
              >
                Vote Now
              </Link>
            </p>
          </div>
        </div>
      ) : null}
      <div class="w-full bg-black/20 p-4 text-center">
        <p class="text-xs text-white">
          &copy; 2024 FaceCast Vote. All rights reserved.
        </p>
      </div>
    </footer>
  );
};

export default Footer;

// File: \Side Projects\facecast-vote\src\Components\Header.jsx
import React from "react";
import { useState, useRef } from "react";
import { Transition } from "@headlessui/react";
import { AiOutlineMenu, AiOutlineClose } from "react-icons/ai";
import DropDown from "./DropDown";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
const Header = () => {
  const { logOut } = useAuth();
  const handleLogout = () => {
    try {
      logOut();
      console.log("Logged Out");
    } catch (error) {
      console.log("Error Loging out", error);
    }
  };
  const menuItemsUser = [
    {
      label: "Profile",
      to: "/",
    },
    {
      label: "Edit Profile",
      to: "/",
    },
    {
      label: "Logout",
      to: "/",
    },
  ];
  const menuItemsAdminApp = [
    {
      label: "Elections",
      to: "/elections",
    },
    {
      label: "Candidates",
      to: "/candidate",
    },
    {
      label: "Parties",
      to: "/party",
    },
    {
      label: "Constituency",
      to: "/const",
    },
  ];
  const [isOpen, setIsOpen] = useState(false);
  const mobileNavRef = useRef(null);
  return (
    <header className="bg-regal-blue-700 text-regal-blue-50 sticky top-0 z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between py-2 md:py-2">
          <h1 className="text-xl md:text-2xl font-semibold">
            <Link to="/">
              <img
                src={process.env.PUBLIC_URL + "/facecast_no_bg.png"}
                alt="logo"
              />
            </Link>
          </h1>
          <nav className="hidden lg:flex lg:items-center space-x-6 text-base font-medium">
            <Link to="/" className="hover:opacity-90">
              Home
            </Link>
            <Link to="vote" className="hover:opacity-90">
              Vote
            </Link>

            <DropDown title={"More"} menuItems={menuItemsAdminApp} />
            <div className="flex gap-2">
              <DropDown
                title={"Muhammd Saad"}
                type={"userAccount"}
                menuItems={menuItemsUser}
              />
              <button
                onClick={handleLogout}
                className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-900/80"
              >
                <Link to="/">Logout</Link>
              </button>
            </div>
          </nav>
          <button
            onClick={() => setIsOpen(!isOpen)}
            type="button"
            aria-controls="mobile-menu"
            aria-expanded={isOpen}
            className="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-regal-blue-50 hover:text-white hover:bg-regal-blue-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          >
            {isOpen ? (
              <AiOutlineClose className="block h-6 w-6" aria-hidden="true" />
            ) : (
              <AiOutlineMenu className="block h-6 w-6" aria-hidden="true" />
            )}
          </button>
        </div>
      </div>
      <Transition
        show={isOpen}
        enter="transition ease-out duration-200"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="transition ease-in duration-150"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        {(ref) => (
          <nav
            ref={mobileNavRef}
            className="lg:hidden bg-regal-blue-700 text-regal-blue-50 py-4"
            aria-label="mobile-menu"
          >
            <div className="flex flex-col items-center text-start space-y-4">
              <Link to="/" className="hover:opacity-90">
                Home
              </Link>
              <Link to="/" className="hover:opacity-90">
                VoteNow
              </Link>
              <DropDown title={"More"} menuItems={menuItemsAdminApp} />
              <div className="flex gap-2">
                <DropDown
                  title={"Muhammd Saad"}
                  type={"userAccount"}
                  menuItems={menuItemsUser}
                />
                <button className="bg-regal-blue-900 text-regal-blue-50 px-3 py-2  rounded-md hover:bg-regal-blue-900/80">
                  <Link to="/">Logout</Link>
                </button>
              </div>
            </div>
          </nav>
        )}
      </Transition>
    </header>
  );
};

export default Header;

// File: \Side Projects\facecast-vote\src\Components\Instructions.jsx
import React from "react";

const Instructions = ({ stepNumber, description }) => {
  return (
    <div className="flex items-center mb-2">
      <div className="flex-shrink-0 h-5 w-5 rounded-md bg-slate-200 flex items-center justify-center text-slate-700">
        {stepNumber}
      </div>
      <div className="ml-4">
        <p className="text-base font-medium text-gray-900">{description}</p>
      </div>
    </div>
  );
};

export default Instructions;

// File: \Side Projects\facecast-vote\src\Components\PrivateRoute.jsx
import React from "react";
import { Outlet, Navigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

const PrivateRoute = () => {
  const { currUser, roles } = useAuth();
  console.log("currUser", currUser);
  console.log("user roles", roles);
  return currUser && roles ? <Outlet /> : <Navigate to="/signin" />;
};

export default PrivateRoute;

// File: \Side Projects\facecast-vote\src\Components\Utils\BreadCrumbs.jsx
import React from "react";
import { useLocation, Link } from "react-router-dom";

const BreadCrumbs = () => {
  let currentLink = "";
  const location = useLocation();
  const breadCrumbs = location.pathname
    .split("/")
    .filter((crumb) => crumb !== "")
    .map((crumb, index, array) => {
      currentLink += `/${crumb}`;
      return (
        <React.Fragment key={index}>
          <Link
            to={currentLink}
            className="text-blue-500 hover:text-blue-700 font-medium"
          >
            {crumb}
          </Link>
          {index !== array.length - 1 && (
            <span className="mx-1">/</span>
          )}
        </React.Fragment>
      );
    });

  return (
    <div className="text-sm">
      <span className="text-gray-500">{breadCrumbs}</span>
    </div>
  );
};

export default BreadCrumbs;

// File: \Side Projects\facecast-vote\src\Components\Utils\ElectionsDetails.jsx
import React, { useState, useEffect } from "react";
import { CgChevronDoubleRight } from "react-icons/cg";
import { getCollectionById, createDocument } from "../../utils/globals";
import { electionsRef, resultsRef, userVoteRef } from "../../config/firebase";
import { query, where, getDocs } from "firebase/firestore";
import CountdownTimer from "../CountdownTimer";


const getVotesByconstituency = async (
  constituency_id,
  election_id,
  candidate_id
) => {
  const votes = [];
  try {
    // console.log("Getting votes");
    // console.log("Constituency", constituency_id);
    // console.log("Election", election_id);
    // console.log("Candidate", candidate_id);
    const q = query(
      userVoteRef,
      where("constituency_id", "==", constituency_id),
      where("election_id", "==", election_id),
      where("candidate_id", "==", candidate_id)
    );
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      votes.push(doc.data());
    });
    return votes;
  } catch (error) {
    console.error("Error getting votes:", error);
    return null;
  }
};
const ElectionsDetails = ({ title, end, electionType, id }) => {
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);

  const announceResultst = async () => {
    console.log("Time's up!");
    console.log("ID!", id);
    if (!id) {
      return;
    }
    //get election details
    const election = await getCollectionById(electionsRef, id);
    if (!election) {
      return;
    }
    // const electionid = election.id;
    // console.log("Election details", election);
    const fetchedConstituencies = election.constituencies;
    const fetchedCandidates = [];

    // Loop through constituencies and candidates and push them into the arrays
    fetchedConstituencies.forEach((constituency) => {
      if (constituency.candidates && Array.isArray(constituency.candidates)) {
        fetchedCandidates.push(...constituency.candidates);
      }
    });
    // console.log("Constituencies", fetchedConstituencies);
    // console.log("Candidates", fetchedCandidates);
    setConstituencies(fetchedConstituencies);
    setCandidates(fetchedCandidates);

    const resultData = {
      electionTitle: election.title,
      totalVotes: 0,
      electionID: id,
      constituencies: [],
    };

    for (const constituency of fetchedConstituencies) {
      const constituencyData = {
        name: constituency.name,
        id: constituency.const_id,
        candidates: [],
      };
      for (const candidate of fetchedCandidates) {
        // console.log("Candidate", candidate.id);
        // console.log("Constituency", constituency.const_id);
        const votes = await getVotesByconstituency(
          constituency.const_id,
          id,
          candidate.id
        );
        // console.log("Votes", votes);
        const candidateData = {
          name: candidate.name,
          id: candidate.id,
          votes: votes ? votes.length : 0, // Check if votes exist and get the length
        };
        constituencyData.candidates.push(candidateData);
        if (votes) {
          resultData.totalVotes += votes.length;
        }
      }
      resultData.constituencies.push(constituencyData);
    }
    // console.log("Result Data", resultData);

    // inserting data to result collection

    const resultRef = await createDocument(resultsRef, resultData);
    if (resultRef) {
      console.log("Results saved successfully");
    } else {
      console.log("Error saving results");
    }
  };

  

  return (
    <div className="border-b border-b-stone-300 mb-0">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
         
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResultst}
          />
        </div>
      </div>
      <div className="py-2">
        <a className="flex items-center gap-1 text-regal-blue-600">
          Learn more <CgChevronDoubleRight className="h-10 pt-1" />
        </a>
      </div>
    </div>
  );
};

export default ElectionsDetails;

// File: \Side Projects\facecast-vote\src\Components\Utils\StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = '';
  let textColor = '';

  switch (status) {
    case 'online':
      bgColor = 'bg-green-600';
      textColor = 'text-white';
      break;
    case 'offline':
      bgColor = 'bg-red-600';
      textColor = 'text-white';
      break;
    case 'upcoming':
      bgColor = 'bg-yellow-500';
      textColor = 'text-white';
      break;
    default:
      bgColor = 'bg-gray-600';
      textColor = 'text-white';
  }

  return (
    <span className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}>
      {status}
    </span>
  );
};

export default StatusBadge;

// File: \Side Projects\facecast-vote\src\config\Slices\complaintsToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  allowedComplaints: true,
};

export const complaintsToggleSlice = createSlice({
  name: "complaintsToggle",
  initialState,
  reducers: {
    toggleComplaints: (state) => {
      state.allowedComplaints = !state.allowedComplaints;
    },
  },
});

export const { toggleComplaints } = complaintsToggleSlice.actions;
export default complaintsToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\signUpToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  signUp: true,
};

export const signUpToggleSlice = createSlice({
  name: "signUpToggle",
  initialState,
  reducers: {
    toggleSignUp: (state) => {
      state.signUp = !state.signUp;
    },
  },
});

export const { toggleSignUp } = signUpToggleSlice.actions;
export default signUpToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\walletSlice.js
// walletSlice.js
import { createSlice } from "@reduxjs/toolkit";

const walletSlice = createSlice({
  name: "wallet",
  initialState: {
    value: 10,
  },
  reducers: {
    decrementVoteAmount: (state) => {
      state.value -= 5;
    },
  },
});

export const { decrementVoteAmount } = walletSlice.actions;

export default walletSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\faceio.js
import faceIO from "@faceio/fiojs";

export const faceio = new faceIO("fioa43b1");

// File: \Side Projects\facecast-vote\src\config\firebase.js
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getFirestore, collection } from "firebase/firestore";
import { getStorage, ref } from "firebase/storage";
import { getAuth } from "firebase/auth"; // Import getAuth for authentication

// const firebaseConfig = {
//   apiKey: "AIzaSyB789z6xX9_PFhc3e3zBEiGl3GDIibQ6QU",
//   authDomain: "learn-firebase-662c8.firebaseapp.com",
//   projectId: "learn-firebase-662c8",
//   storageBucket: "learn-firebase-662c8.appspot.com",
//   messagingSenderId: "1076449994534",
//   appId: "1:1076449994534:web:0a174140669e6af5e903e7",
// };

const firebaseConfig = {
  apiKey: "AIzaSyAYY3QIH3M9Alg9BBHz3t5NW1vf_huLWJI",
  authDomain: "facecastvote.firebaseapp.com",
  projectId: "facecastvote",
  storageBucket: "facecastvote.appspot.com",
  messagingSenderId: "220175011601",
  appId: "1:220175011601:web:b69a9764dd82ad84d106b0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);
export const constituenciesRef = collection(db, "constituencies");
export const candidatesRef = collection(db, "candidate");
export const storageRef = ref(storage, 'candidates/');
export const userVoteRef = collection(db, "user_vote");
export const electionsRef = collection(db, "election");
export const usersRef = collection(db, "users");
export const partyRef = collection(db, "party");
export const resultsRef = collection(db, "results");

export const complainRef = collection(db, "complain");
export const userActionLogs = collection(db, "user_action_logs");

// permission constants
export const permissionRef = collection(db, "permissions");

// File: \Side Projects\facecast-vote\src\config\store.js
// store.js
import { configureStore } from "@reduxjs/toolkit"; // Importing the default export
import walletReducer from "./Slices/walletSlice"; // Importing the default export

const store = configureStore({
  reducer: {
    voteAmountWallet: walletReducer,
  },
});

export default store;

// File: \Side Projects\facecast-vote\src\config\Slices\complaintsToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  allowedComplaints: true,
};

export const complaintsToggleSlice = createSlice({
  name: "complaintsToggle",
  initialState,
  reducers: {
    toggleComplaints: (state) => {
      state.allowedComplaints = !state.allowedComplaints;
    },
  },
});

export const { toggleComplaints } = complaintsToggleSlice.actions;
export default complaintsToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\signUpToggleSlice.js
// signUpToggleSlice.js
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  signUp: true,
};

export const signUpToggleSlice = createSlice({
  name: "signUpToggle",
  initialState,
  reducers: {
    toggleSignUp: (state) => {
      state.signUp = !state.signUp;
    },
  },
});

export const { toggleSignUp } = signUpToggleSlice.actions;
export default signUpToggleSlice.reducer;

// File: \Side Projects\facecast-vote\src\config\Slices\walletSlice.js
// walletSlice.js
import { createSlice } from "@reduxjs/toolkit";

const walletSlice = createSlice({
  name: "wallet",
  initialState: {
    value: 10,
  },
  reducers: {
    decrementVoteAmount: (state) => {
      state.value -= 5;
    },
  },
});

export const { decrementVoteAmount } = walletSlice.actions;

export default walletSlice.reducer;

// File: \Side Projects\facecast-vote\src\context\AuthContext.js
import { createContext } from "react";
import { auth } from "../config/firebase";
import { useState, useContext, useEffect } from "react";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import { getuserByid } from "../utils/profile";
export const AuthContext = createContext();
export const useAuth = () => {
  return useContext(AuthContext);
};
export const AuthProvider = ({ children }) => {
  const [currUser, setCurrUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [roles, setRoles] = useState("");
  const PERMISSIONSID = "OpiESu73rRsy4wgO3xoG";

  const signUp = (email, password) => {
    const message = createUserWithEmailAndPassword(auth, email, password);
    console.log("context sign up ", message);
    return message;
  };
  const logIn = async (email, password) => {
    const message = await signInWithEmailAndPassword(auth, email, password);
    console.log("context login ", message.user.uid);
    const user = await getuserByid(message.user.uid);
    console.log("user", user);
    if (user) {
      console.log("admin");
      console.log("user", user.roles);
      
      setRoles(user.roles);

    }
    console.log("user roles", roles);
    return message;
  };
  //   const logIn = async (email, password) => {
  //     try {
  //       const { user } = await signInWithEmailAndPassword(auth, email, password);
  //       console.log("User context:", user);
  //       setCurrUser(user);
  //       // return userRoles;
  //     } catch (error) {
  //       console.error("Error logging in:", error);
  //       throw error;
  //     }
  //   };
  const logOut = () => {
    return signOut(auth);
  };
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setLoading(false);
      setCurrUser(user);
      console.log("user", user);
    });
    return unsubscribe;
  }, []);
  const value = { currUser, signUp, logIn, logOut, roles, PERMISSIONSID };
  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

// File: \Side Projects\facecast-vote\src\data\cand.js
export const candidates = [
    {
      id: "1",
      name: "Ali Khan",
      party: "Pakistan Tehreek-e-Insaf",
      constituency_id: "PK-123",
      constituency_address: "House No. 456, Street 789, Lahore",
      image_url: "https://example.com/candidate1-image.jpg",
      age: 45,
      gender: "Male",
      education: [
        { degree: "Masters in Political Science", institution: "University Name", year: 2010 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 1234567",
      email: "ali.khan@example.com",
      address: {
        house_no: "123",
        area: "Area Name",
        city: "Lahore",
        province: "Punjab"
      },
      assets: {
        savings: "5000000 PKR",
        jewelry: "2000000 PKR"
      },
      languages_spoken: ["Urdu", "English", "Punjabi"],
      manifesto: "Focus on education, healthcare, and infrastructure development",
      election_history: [
        {
          type: "Provincial",
          name: "Punjab Provincial Election",
          position: "Member Provincial Assembly",
          result: "Won",
          year: 2023
        }
      ],
      id_card: "35201-1234567-8",
      social_media: {
        twitter: "@alikhan_pk",
        facebook: "alikhanofficial",
        instagram: "alikhan_pk"
      },
      bank_accounts: [
        { name: "Bank of Punjab" },
        { name: "Habib Bank Limited" }
      ],
      investments: [
        { type: "Stocks" },
        { type: "Property" }
      ],
      volunteer_information: [
        {
          title: "Campaign Volunteer",
          location: "Lahore",
          description: "Assist in door-to-door campaign outreach"
        },
        {
          title: "Event Coordinator",
          location: "Lahore",
          description: "Organize campaign rallies and events"
        }
      ],
      awards_and_recognition: {
        label: "Community Service Award",
        type: "Local Recognition"
      }
    },
    {
      id: "2",
      name: "Sana Ahmed",
      party: "Pakistan Muslim League-Nawaz",
      constituency_id: "PK-456",
      constituency_address: "House No. 789, Street 101, Karachi",
      image_url: "https://example.com/candidate2-image.jpg",
      age: 38,
      gender: "Female",
      education: [
        { degree: "Bachelor's in Business Administration", institution: "University Name", year: 2008 },
        { degree: "Master's in Public Administration", institution: "University Name", year: 2012 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 9876543",
      email: "sana.ahmed@example.com",
      address: {
        house_no: "789",
        area: "Area Name",
        city: "Karachi",
        province: "Sindh"
      },
      assets: {
        savings: "3000000 PKR",
        jewelry: "1500000 PKR"
      },
      languages_spoken: ["Urdu", "Sindhi", "English"],
      manifesto: "Focus on economic development and women's empowerment",
      election_history: [
        {
          type: "National",
          name: "National Assembly Election",
          position: "Member National Assembly",
          result: "Won",
          year: 2023
        }
      ],
      id_card: "35202-9876543-7",
      social_media: {
        twitter: "@sanaahmed_pmln",
        facebook: "sanaahmedofficial",
        instagram: "sana_ahmed_pmln"
      },
      bank_accounts: [
        { name: "National Bank of Pakistan" },
        { name: "Standard Chartered Bank" }
      ],
      investments: [
        { type: "Bonds" },
        { type: "Mutual Funds" }
      ],
      volunteer_information: [
        {
          title: "Youth Coordinator",
          location: "Karachi",
          description: "Engage with youth for political awareness and participation"
        },
        {
          title: "Campaign Manager",
          location: "Karachi",
          description: "Coordinate campaign activities and outreach"
        }
      ],
      awards_and_recognition: {
        label: "Outstanding Leadership Award",
        type: "National Recognition"
      }
    },
    {
      id: "3",
      name: "Ahmed Hassan",
      party: "Pakistan People's Party",
      constituency_id: "PK-789",
      constituency_address: "House No. 101, Street 202, Islamabad",
      image_url: "https://example.com/candidate3-image.jpg",
      age: 50,
      gender: "Male",
      education: [
        { degree: "Doctor of Medicine", institution: "University Name", year: 1998 },
        { degree: "Master's in Public Health", institution: "University Name", year: 2005 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 7654321",
      email: "ahmed.hassan@example.com",
      address: {
        house_no: "101",
        area: "Area Name",
        city: "Islamabad",
        province: "Islamabad Capital Territory"
      },
      languages_spoken: ["Urdu", "English"],
      manifesto: "Focus on healthcare reform and social welfare programs",
      election_history: [
        {
          type: "National",
          name: "National Assembly Election",
          position: "Member National Assembly",
          result: "Lost",
          year: 2023
        }
      ],
      cnic: "35203-7654321-6",
      social_media: {
        twitter: "@ahmedhassan_ppp",
        facebook: "ahmedhassanofficial",
        instagram: "ahmed_hassan_ppp"
      },
      bank_accounts: [
        { name: "United Bank Limited" },
        { name: "Meezan Bank" }
      ],
      investments: [
        { type: "Government Bonds" },
        { type: "Property" }
      ],
      volunteer_information: [
        {
          title: "Healthcare Campaign Volunteer",
          location: "Islamabad",
          description: "Assist in organizing healthcare camps and awareness sessions"
        },
        {
          title: "Community Outreach Coordinator",
          location: "Islamabad",
          description: "Engage with local communities to address their concerns"
        }
      ],
      awards_and_recognition: {
        label: "Medical Excellence Award",
        type: "National Recognition"
      }
    },
    {
      id: "4",
      name: "Fatima Khan",
      party: "Pakistan Awami Tehreek",
      constituency_id: "PK-101",
      constituency_address: "House No. 303, Street 404, Peshawar",
      image_url: "https://example.com/candidate4-image.jpg",
      age: 35,
      gender: "Female",
      education: [
        { degree: "Master's in Social Work", institution: "University Name", year: 2010 }
      ],
      religious_affiliation: "Muslim",
      phone: "+92 300 1112223",
      email: "fatima.khan@example.com",
      address: {
        house_no: "303",
        area: "Area Name",
        city: "Peshawar",
        province: "Khyber Pakhtunkhwa"
      },
      assets: {
        savings: "4000000 PKR",
        jewelry: "800000 PKR"
      },
      languages_spoken: ["Pashto", "Urdu", "English"],
      manifesto: "Focus on women's rights, education, and community development",
      election_history: [
        {
          type: "Provincial",
          name: "Khyber Pakhtunkhwa Provincial Election",
          position: "Member Provincial Assembly",
          result: "Lost",
          year: 2023
        }
      ],
      id_card: "35204-1112223-9",
      social_media: {
        twitter: "@fatimakhan_pat",
        facebook: "fatimakhanofficial",
        instagram: "fatima_khan_pat"
      },
      bank_accounts: [
        { name: "Askari Bank" }
      ],
      investments: [
        { type: "Savings Bonds" }
      ],
      volunteer_information: [
        {
          title: "Women's Rights Activist",
          location: "Peshawar",
          description: "Organize advocacy campaigns and workshops for women's empowerment"
        },
        {
          title: "Community Development Volunteer",
          location: "Peshawar",
          description: "Work on projects to improve local infrastructure and amenities"
        }
      ],
      awards_and_recognition: {
        label: "Social Activism Award",
        type: "Local Recognition"
      }
    }
  ];
  

// File: \Side Projects\facecast-vote\src\data\const.js
export const constituencies = [
  {
    id: "1",
    name: "Karachi East",
    code: "KE-001",
    region: "Sindh",
    assembly: "Sindh Assembly",
    registered_voters: 50000,
    total_votes_cast: 30000,
    winning_candidate: "candidate1",
    constituency_population: 150000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 30000,
        adults: 45000,
        middleaged: 45000,
        seniors: 30000,
      },
      gender_distribution: { male: 75000, female: 75000, other: 0 },
      education_levels: {
        primary_school: 50000,
        secondary_school: 40000,
        higher_education: 60000,
      },
    },
  },
  {
    id: "2",
    name: "Lahore Central",
    code: "LC-002",
    region: "Punjab",
    assembly: "Punjab Assembly",
    registered_voters: 60000,
    total_votes_cast: 40000,
    winning_candidate: "candidate4",
    constituency_population: 200000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 40000,
        adults: 60000,
        middleaged: 60000,
        seniors: 40000,
      },
      gender_distribution: { male: 100000, female: 100000, other: 0 },
      education_levels: {
        primary_school: 70000,
        secondary_school: 60000,
        higher_education: 90000,
      },
    },
  },
  {
    id: "3",
    name: "Islamabad West",
    code: "IW-003",
    region: "Islamabad Capital Territory",
    assembly: "National Assembly",
    registered_voters: 45000,
    total_votes_cast: 35000,
    winning_candidate: "candidate7",
    constituency_population: 180000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 35000,
        adults: 60000,
        middleaged: 55000,
        seniors: 30000,
      },
      gender_distribution: { male: 90000, female: 90000, other: 0 },
      education_levels: {
        primary_school: 60000,
        secondary_school: 50000,
        higher_education: 70000,
      },
    },
  },
  {
    id: "4",
    name: "Quetta South",
    code: "QS-004",
    region: "Balochistan",
    assembly: "Balochistan Assembly",
    registered_voters: 35000,
    total_votes_cast: 25000,
    winning_candidate: "candidate10",
    constituency_population: 120000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        under25: 25000,
        adults: 40000,
        middleaged: 40000,
        seniors: 15000,
      },
      gender_distribution: { male: 60000, female: 60000, other: 0 },
      education_levels: {
        primary_school: 40000,
        secondary_school: 30000,
        higher_education: 50000,
      },
    },
  },
  {
    id: "5",
    name: "Peshawar East",
    code: "PE-005",
    region: "Khyber Pakhtunkhwa",
    assembly: "Khyber Pakhtunkhwa Assembly",
    registered_voters: 40000,
    total_votes_cast: 0,
    winning_candidate: "",
    constituency_population: 160000,
    constituency_area: "Urban",
    constituency_demographics: {
      age_distribution: {
        young_adults: 30000,
        adults: 50000,
        middleaged: 50000,
        seniors: 30000,
      },
      gender_distribution: { male: 80000, female: 80000, other: 0 },
      education_levels: {
        primary_school: 45000,
        secondary_school: 35000,
        higher_education: 55000,
      },
    },
  },
];

// File: \Side Projects\facecast-vote\src\data\elections.js
export const elections = [
  {
    id: "1",
    title: "General Elections 2023",
    type: "national",
    election_date: "2024-06-25",
    start_at: "08:00:00", // Assuming time format HH:mm:ss
    end_at: "12:00:00", // Assuming time format HH:mm:ss
    created_at: "2023-04-01T09:00:00",
    status: "online",
    constituencies: [
      {
        const_id: "23",
        name: "Lahore",
        candidates: [
          {
            id: "50",
            name: "Imran Khan",
            party: "Pakistan Tehreek-e-Insaf (PTI)"
          },
          {
            id: "51",
            name: "Maryam Nawaz",
            party: "Pakistan Muslim League-Nawaz (PML-N)"
          },
          {
            id: "52",
            name: "Bilawal Bhutto Zardari",
            party: "Pakistan Peoples Party (PPP)"
          }
        ]
      },
      {
        const_id: "56",
        name: "Karachi",
        candidates: [
          {
            id: "12",
            name: "Mustafa Kamal",
            party: "Pak Sarzameen Party (PSP)"
          },
          {
            id: "56",
            name: "Altaf Hussain",
            party: "Muttahida Qaumi Movement (MQM)"
          }
        ]
      }
    ]
  }
];

// File: \Side Projects\facecast-vote\src\data\election_results.js
const electionResultsAnnouncement = {
    election_id: "election_id", // ID of the election
    voter_turnout: {
      percentage: 70, // Voter turnout percentage for the election
      total_votes: 700000, // Total number of votes cast in the election
      // Optionally include more detailed turnout information if needed
    },
    results: [
      {
        constituency_id: "PK-123", // ID of the constituency
        winner: {
          candidate_id: "candidate_id_1", // ID of the winning candidate in the constituency
          votes_received: 35000, // Number of votes received by the winning candidate
          // Optionally include more details about the winning candidate
        },
        // Optionally include more details about the results of this constituency
      },
      // Include results for other constituencies as needed
    ],
    announcements: [
      {
        type: "preliminary_results", // Type of announcement
        date: new Date("2023-07-26T10:00:00"), // Date of the announcement
        details: "Preliminary results for constituency PK-123 declared." // Details or summary of the announcement
      },
      // Include other announcements made during the election process
    ]
  };
  

// File: \Side Projects\facecast-vote\src\data\parties.js
export const politicalParties = [
    {
      id: "1",
      name: "Pakistan Tehreek-e-Insaf",
      acronym: "PTI",
      leader: "Imran Khan",
      foundation_year: 1996,
      ideology: "Centrism, Populism, Social Conservatism",
      headquarters: "Islamabad, Pakistan",
      manifesto: "Naya Pakistan Agenda",
      symbol_url: "https://example.com/pti-symbol.jpg",
      contact_info: {
        phone: "+92 51 8487080",
        email: "info@insaf.pk",
        address: "House No. 2, Street 4, Sector J-5, Islamabad"
      },
      party_registration_number: "123456",
      party_campaign_budget: 10000000, // 10 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "MQM, GDA"
      }
    },
    {
      id: "2",
      name: "Pakistan Muslim League-Nawaz",
      acronym: "PML-N",
      leader: "Nawaz Sharif",
      foundation_year: 1988,
      ideology: "Conservatism, Economic Liberalism",
      headquarters: "Lahore, Pakistan",
      manifesto: "Sher Ka Pakistan",
      symbol_url: "https://example.com/pmln-symbol.jpg",
      contact_info: {
        phone: "+92 42 99203091",
        email: "info@pmln.org",
        address: "House No. 123, Street 456, Model Town, Lahore"
      },
      party_registration_number: "654321",
      party_campaign_budget: 15000000, // 15 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-Q, ANP"
      }
    },
    {
      id: "3",
      name: "Pakistan Peoples Party",
      acronym: "PPP",
      leader: "Bilawal Bhutto Zardari",
      foundation_year: 1967,
      ideology: "Social Democracy, Liberalism",
      headquarters: "Karachi, Pakistan",
      manifesto: "Roti, Kapra, Makaan",
      symbol_url: "https://example.com/ppp-symbol.jpg",
      contact_info: {
        phone: "+92 21 99251669",
        email: "info@ppp.org",
        address: "Bilawal House, Clifton, Karachi"
      },
      party_registration_number: "789012",
      party_campaign_budget: 12000000, // 12 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-Q, JUI-F"
      }
    },
    {
      id: "4",
      name: "Muttahida Qaumi Movement-Pakistan",
      acronym: "MQM-P",
      leader: "Khalid Maqbool Siddiqui",
      foundation_year: 1984,
      ideology: "Ethnic Politics, Urban Sindh Rights",
      headquarters: "Karachi, Pakistan",
      manifesto: "Empowering the Urban Poor",
      symbol_url: "https://example.com/mqm-symbol.jpg",
      contact_info: {
        phone: "+92 21 36313690",
        email: "info@mqm.org",
        address: "90 Azizabad, Karachi"
      },
      party_registration_number: "135792",
      party_campaign_budget: 8000000, // 8 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PTI, PSP"
      }
    },
    {
      id: "5",
      name: "Awami National Party",
      acronym: "ANP",
      leader: "Asfandyar Wali Khan",
      foundation_year: 1986,
      ideology: "Pashtun Nationalism, Secularism",
      headquarters: "Peshawar, Pakistan",
      manifesto: "Peace, Democracy, Development",
      symbol_url: "https://example.com/anp-symbol.jpg",
      contact_info: {
        phone: "+92 91 9216436",
        email: "info@anp.org",
        address: "Bacha Khan Markaz, Peshawar"
      },
      party_registration_number: "246801",
      party_campaign_budget: 7000000, // 7 million PKR
      party_alliances: {
        title: "Electoral Alliance",
        alliancedwith: "PML-N, JUI-F"
      }
    },
    // Add more political parties with different data
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\Auth\LoginLayout.jsx
import React, { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import { useNavigate } from "react-router-dom";
import { usersRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { Link } from "react-router-dom";
import logo from "./facecast-no-bg.png";
import toast from "react-hot-toast";
// import { getCollectionById } from "../../utils/globals";
const LoginLayout = () => {
  const { logIn } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loginAllowed, setLoginAllowed] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [role, setRole] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // Set loading to true while sign-up is in progress
    setErrorMessage("");

    try {
      const loginuser = await logIn(email, password);
      setEmail("");
      setPassword("");
      console.log("login user", loginuser.user.uid);
      if (loginuser) {
        const userData = await getCollectionById(usersRef, loginuser.user.uid);
        // toast.success("Login Successful");

        if (userData.roles === "voter") {
          toast.success("Voter Login Successful");
          navigate("/voter");
        } else if (userData.roles === "admin") {
          toast.success("Admin Login Successful");
          navigate("/admin");
        } else {

          navigate("/signin");
        }
      } else {
        setErrorMessage("Invalid email or password");
      }
    } catch (error) {
      // Handle signup errors
      console.error("Error during sign-up:", error);
      setErrorMessage("Invalid email or password");
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="max-w-4xl mx-auto mt-16">
      <main className=" grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 shadow-md p-10 border-stone-200 bg-stone-50">
        <section className="shadow-sm flex items-center flex-col gap-5    justify-center pb-14">
          <img src={logo} alt="Face cast logo" className="md:max-w-sm w-48" />
        </section>
        <section class="md:border-l border-stone-300 md:p-6 md:py-10 md:px-10 ">
          {errorMessage && (
            <Alert message={errorMessage} type="error" dismissible={true} />
          )}
          {/* {successMessage && <Alert message={successMessage} type="success" />} */}
          <h2 class="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Welcome Abroad
          </h2>
          <form
            action=""
            onSubmit={handleSubmit}
            class=" mx-auto flex flex-col items-left gap-4"
          >
            <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4">
              <div>
                <label htmlFor="name1" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  class="form-input text-md"
                />
              </div>

              <div>
                <label for="password" className="form-label">
                  Password
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  class="form-input text-md"
                />
              </div>
            </div>
            <div>
              Already have an account
              <Link
                to="/signup"
                className="pl-2 py-2 font-bold text-regal-blue-600"
              >
                Create Account
              </Link>
            </div>
            <div class="flex items-center justify-between">
              <button
                class={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Signing In..." : "Sign In"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default LoginLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\SignupLayout.jsx
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../../context/AuthContext";
import { setDoc, doc } from "firebase/firestore";
import Alert from "../../Components/Alert";
import Select from "react-select";
import { options } from "./data/options";
import { useNavigate } from "react-router-dom";
import { db } from "../../config/firebase";
import { BsPersonBoundingBox } from "react-icons/bs";
import { faceio } from "../../config/faceio";
import { permissionRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { FaInfoCircle, FaCheck, FaTimes } from "react-icons/fa";
import toast from "react-hot-toast";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";

const SignupLayout = () => {
  const navigate = useNavigate();
  const [signUpAllowed, setSignUpAllowed] = useState(true);
  const { signUp, PERMISSIONSID } = useAuth();

  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

  const emailRef = useRef();
  const pwdRef = useRef();

  const [email, setEmail] = useState("");
  const [validEmail, setValidEmail] = useState(false);
  const [emailFocus, setEmailFocus] = useState("");

  const [password, setPassword] = useState("");
  const [validPassword, setValidPassword] = useState(false);
  const [passwordFocus, setPasswordFocus] = useState("");

  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCninc] = useState("");
  const [phone, setPhone] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [area, setArea] = useState("");
  const [faceData, setFaceData] = useState("");

  const [loading, setLoading] = useState(false);
  const [faceEnrolled, setFaceEnrolled] = useState(false);

  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    setValidEmail(EMAIL_REGEX.test(email));
  }, [email]);

  useEffect(() => {
    setValidPassword(PWD_REGEX.test(password));
  }, [password]);

  useEffect(() => {
    const fetchPermissions = async () => {
      const permissionData = await getCollectionById(
        permissionRef,
        PERMISSIONSID
      );
      if (permissionData) {
        setSignUpAllowed(permissionData.signUp);
      }
    };
    fetchPermissions();
  }, [PERMISSIONSID]);

  const handleFaceRegister = async () => {
    try {
      let response = await faceio.enroll({
        locale: "auto",
        payload: {
          email: email,
        },
      });
      console.log(`Unique Facial ID: ${response.facialId}
      Enrollment Date: ${response.timestamp}
      Gender: ${response.details.gender}
      Age Approximation: ${response.details.age}`);

      setFaceData(response);
      setFaceEnrolled(true);
    } catch (error) {
      console.log(error);
      setFaceEnrolled(false);
      setErrorMessage("Face enrollment failed. Please try again.");
    }
  };

  const handleProvinceChange = (selectedOption) => {
    setProvince(selectedOption);
    setCity("");
    setArea("");
  };

  const handleCityChange = (selectedOption) => {
    setCity(selectedOption);
    setArea("");
  };

  const handleAreaChange = (selectedOption) => {
    setArea(selectedOption);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!faceEnrolled) {
      setErrorMessage("Face enrollment is required to sign up.");
      return;
    }
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");

    try {
      const userCredential = await signUp(email, password);
      const user = userCredential.user;
      if (user) {
        const userId = user.uid;
        await setDoc(doc(db, "users", userId), {
          email,
          fname,
          lname,
          cnic,
          phone,
          address: {
            province: province.label || "",
            city: city.label || "",
            area: area.label || "",
          },
          faceData: faceData,
          roles: "voter",
        });
        toast.success("User Created Successfully");

        setCninc("");
        setFname("");
        setLname("");
        setPhone("");
      }
      setEmail("");
      setPassword("");
      setSuccessMessage("Sign-up successful!");
      navigate("/voter");
    } catch (error) {
      console.error("Error during sign-up:", error);
      switch (error.code) {
        case "auth/email-already-in-use":
          setErrorMessage(
            "Email is already in use. Please choose a different email."
          );
          break;
        case "auth/weak-password":
          setErrorMessage(
            "The password is too weak. Please choose a stronger password."
          );
          break;
        default:
          setErrorMessage(
            "An error occurred during sign-up. Please try again later."
          );
          break;
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <main>
        <section className="p-6 max-w-2xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Signup
          </h2>
          {errorMessage && (
            <Alert
              message={errorMessage}
              type="error"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {successMessage && (
            <Alert
              message={successMessage}
              type="success"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {signUpAllowed ? (
            <form
              action=""
              onSubmit={handleSubmit}
              className="mx-auto flex flex-col items-left gap-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="fname"
                    className="text-lg font-normal text-slate-900"
                  >
                    First name
                  </label>
                  <input
                    type="text"
                    id="fname"
                    name="fname"
                    value={fname}
                    onChange={(e) => setFname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="lname"
                    className="text-lg font-normal text-slate-900"
                  >
                    Last name
                  </label>
                  <input
                    type="text"
                    id="lname"
                    name="lname"
                    value={lname}
                    onChange={(e) => setLname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="cnic"
                    className="text-lg font-normal text-slate-900"
                  >
                    ID number (cnic)
                  </label>
                  <input
                    type="number"
                    id="cnic"
                    name="cnic"
                    value={cnic}
                    onChange={(e) => setCninc(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="phone"
                    className="text-lg font-normal text-slate-900"
                  >
                    Phone
                  </label>
                  <PhoneInput
                    country={"pk"}
                    onlyCountries={["pk"]}
                    value={phone}
                    onChange={(value) => setPhone(value)}
                  />
                </div>
                <div>
                  <label
                    htmlFor="province"
                    className="text-lg font-normal text-slate-900"
                  >
                    Province
                  </label>
                  <Select
                    value={province}
                    onChange={handleProvinceChange}
                    options={options}
                    placeholder="Select Province"
                  />
                </div>

                <div>
                  <label
                    htmlFor="city"
                    className="text-lg font-normal text-slate-900"
                  >
                    City
                  </label>
                  <Select
                    value={city}
                    onChange={handleCityChange}
                    options={province.cities}
                    placeholder="Select City"
                  />
                </div>

                {city && city.areas && (
                  <div>
                    <label
                      htmlFor="area"
                      className="text-lg font-normal text-slate-900"
                    >
                      Area
                    </label>
                    <Select
                      value={area}
                      onChange={handleAreaChange}
                      options={city.areas.map((area) => ({
                        label: area,
                        value: area,
                      }))}
                      placeholder="Select Area"
                    />
                  </div>
                )}
                <div>
                  <label
                    htmlFor="email"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Email
                    <span
                      id="emailnote"
                      className={validEmail ? "m-2 text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      id="emailnote"
                      className={
                        validEmail || !email ? "hidden" : "text-red-600 m-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="email"
                    ref={emailRef}
                    value={email}
                    aria-invalid={validEmail ? "false" : "true"}
                    aria-describedby="emailnote"
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Please Enter"
                    onBlur={() => setEmailFocus(false)}
                    onFocus={() => setEmailFocus(true)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    className={
                      emailFocus && !validEmail
                        ? "text-red-600 flex items-center gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="" />
                    Invalid Email
                  </p>
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Password
                    <span
                      id="uidnote"
                      className={validPassword ? "text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      className={
                        validPassword || !password
                          ? "hidden"
                          : "text-red-600 flex items-center gap-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="password"
                    required
                    aria-invalid={validPassword ? "false" : "true"}
                    aria-describedby="pwdnote"
                    ref={pwdRef}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Please Enter"
                    onFocus={() => setPasswordFocus(true)}
                    onBlur={() => setPasswordFocus(false)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    id="pwdnote"
                    className={
                      passwordFocus && !validPassword
                        ? "text-red-600 flex  gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="w-6 h-6" />
                    8 to 24 characters.
                    <br />
                    Must include uppercase and lowercase letters, a number and a
                    special character.
                    <br />
                  </p>
                </div>
                <div>
                  <label
                    htmlFor="faceauth"
                    className="text-lg font-normal text-slate-900"
                  >
                    Face Authentication
                  </label>
                  <div
                    onClick={handleFaceRegister}
                    className="w-full cursor-pointer p-2 border border-gray-300 rounded-md flex items-center gap-2"
                  >
                    <BsPersonBoundingBox />
                    <span className="ml-2">Authenticate</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mt-4">
                <button
                  type="submit"
                  className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                    loading || !faceEnrolled
                      ? "opacity-50 cursor-not-allowed"
                      : ""
                  }`}
                  disabled={loading || !faceEnrolled}
                >
                  {loading ? "Signing up..." : "Sign up"}
                </button>
              </div>
            </form>
          ) : (
            <div className="bg-red-200 p-4 flex items-center rounded-md">
              <p className="text-red-800 font-semibold">
                Registration is temporarily disabled. Come back later.
              </p>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default SignupLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\user\VoteNowLayout.jsx
import React from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import { Outlet } from "react-router-dom";
const VoteNowLayout = () => {
  return (
    <main className="mx-auto max-w-5xl py-4">
      <BreadCrumbs />
      <Outlet />
    </main>
  );
};

export default VoteNowLayout;

// File: \Side Projects\facecast-vote\src\Layout\AdminLayout.jsx
import { Link } from "react-router-dom";
import React from "react";
import { MdPinDrop } from "react-icons/md";
import { BsPersonArmsUp } from "react-icons/bs";
import { MdOutlineHowToVote } from "react-icons/md";
import { FaRegHandPointRight } from "react-icons/fa6";
const AdminLayout = () => {
  return (
    <div>
      <main className="mx-auto max-w-4xl">
        <h1 className="text-xl font-semibold text-left sm:text-2xl mb-6 py-3 text-slate-900">
          Welcome Admin
        </h1>
        <hr className="py-2 border-t-2 border-gray-300" />
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4">
          <Link to="/admin/elections">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <MdOutlineHowToVote className="h-20 w-20 text-blue-500" />
              <label>Elections</label>
            </div>
          </Link>
          <Link to="/admin/candidate">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <BsPersonArmsUp className="h-20 w-20 text-blue-500" />
              <label>Candidates</label>
            </div>
          </Link>
          <Link to="/admin/constituency">
            <div className="min-w-80 h-40 border-2 border-gray-100 rounded-md p-5 flex items-center justify-center flex-col">
              <MdPinDrop className="h-20 w-20 text-blue-500" />
              <label>Constituency</label>
            </div>
          </Link>
        </div>
        <h1 className="text-xl font-semibold text-left sm:text-xl mb-2 py-1 text-slate-900">
          Utilities
        </h1>
        <DataLine
          value="Complaints"
          label="View Complaints"
          path="/admin/complaints"
        />
        <DataLine
          value="Settings"
          label="View Settings"
          path="/admin/settings"
        />
      </main>
    </div>
  );
};
const DataLine = ({ value, label, path }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className=" text-gray-900">{value}</span>
      <Link to={path} className="text-regal-blue-600 ">
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

export default AdminLayout;

// File: \Side Projects\facecast-vote\src\Layout\CandidatesLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const CandidatesLayout = () => {
  return (
    <div className="">
      <SubMenu />
      <main className="md:mx-auto max-w-5xl py-4 ">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/candidate"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};
export default CandidatesLayout;

// File: \Side Projects\facecast-vote\src\Layout\ComplaintLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ComplaintLayout = () => {
  return (
    <div className="">
      <main className="md:mx-auto max-w-5xl py-4 ">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default ComplaintLayout;

// File: \Side Projects\facecast-vote\src\Layout\ConstituencyLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ConstituencyLayout = () => {
  

  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};
const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/constituency"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default ConstituencyLayout;

// File: \Side Projects\facecast-vote\src\Layout\ElectionLayout.jsx
import React, { useState } from "react";
import { Outlet, Link } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const ElectionLayout = () => {
  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/elections"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create Election
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default ElectionLayout;

// File: \Side Projects\facecast-vote\src\Layout\PartyLayout.jsx
import React, { useState } from "react";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
import { Outlet, Link } from "react-router-dom";
const PartyLayout = () => {
  return (
    <div>
      <SubMenu />
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};
const SubMenu = () => {
  const [selectedItem, setSelectedItem] = useState(null);

  const handleItemClick = (itemName) => {
    setSelectedItem(itemName);
  };

  return (
    <nav className="bg-gray-600">
      <div className="max-w-5xl mx-auto">
        <ul className="flex gap-6 py-1">
          <li>
            <Link
              to="/admin/party"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Home" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Home")}
            >
              Home
            </Link>
          </li>
          <li>
            <Link
              to="create"
              className={`text-white hover:text-gray-200 ${
                selectedItem === "Create Election" ? "font-bold" : ""
              }`}
              onClick={() => handleItemClick("Create Election")}
            >
              Create
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};
export default PartyLayout;

// File: \Side Projects\facecast-vote\src\Layout\ProfileLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";
const ProfileLayout = () => {
  return (
    <div>
      <main className="mx-auto max-w-5xl py-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default ProfileLayout;

// File: \Side Projects\facecast-vote\src\Layout\RootLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import Footer from "../Components/Footer";
import AppHeader from "../Components/AppHeader";
import { Toaster } from "react-hot-toast";
const RootLayout = () => {
  return (
    <div>
      {/* <Header /> */}
      <AppHeader />
      <Toaster />
      <main className="min-h-screen">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export default RootLayout;

// File: \Side Projects\facecast-vote\src\Layout\SettingsLayout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import BreadCrumbs from "../Components/Utils/BreadCrumbs";

const SettingsLayout = () => {
  return (
    <div className="">
      <main className="lg:mx-auto lg:max-w-5xl lg:py-4 md:px-6 sm:px-4">
        <BreadCrumbs />
        <Outlet />
      </main>
    </div>
  );
};

export default SettingsLayout;

// File: \Side Projects\facecast-vote\src\Layout\VoterLayout.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getCollections } from "../utils/globals";
import { electionsRef } from "../config/firebase";
import { generatePDF } from "../utils/pdgGen";
import Select from "react-select";
import { SlEnvolopeLetter } from "react-icons/sl";
import { IoMdArrowDropright } from "react-icons/io";
import ComplaintModal from "../Pages/ComplaintModal";
import { getProfileByEmail } from "../utils/profile";
import { MdOutlineHowToVote } from "react-icons/md";
import { FaRegHandPointRight } from "react-icons/fa6";
import { LiaBoxOpenSolid } from "react-icons/lia";

const DataLine = ({ value, label, path }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className=" text-gray-900">{value}</span>
      <Link to={path} className="text-regal-blue-600 ">
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

const VoterLayout = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState([]);
  const [titles, setTitles] = useState([]);
  const [electionsData, setElectionsData] = useState([]);
  const [selectedElection, setSelectedElection] = useState(null);
  const [isOpen, setIsOpen] = useState(false);

  const getElectionTitles = async () => {
    try {
      const electionData = await getCollections(electionsRef);
      const titlesArray = electionData.map((election) => ({
        value: election,
        label: election.title,
      }));
      setTitles(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };

  useEffect(() => {
    getElectionTitles();
  }, []);

  useEffect(() => {
    console.log("elections", electionsData);
  }, [electionsData]);
  const handleSelectChange = (selectedOption) => {
    setSelectedElection(selectedOption);
    generatePDF(selectedOption.value);
  };

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);

  // complain
  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };
  return (
    <main className="mx-auto max-w-4xl">
      <h1 className="text-xl font-semibold text-left sm:text-xl mb-2 py-10 text-slate-900">
        Welcome
        <span className="font-bold pl-3">
          {profile.fname + " " + profile.lname}
        </span>
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ComplaintModal isOpen={isOpen} closeModal={closeModal} />
      <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-5">
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <SlEnvolopeLetter className="h-20 w-20 text-blue-500 mb-2" />
          <div className="flex gap-1 flex-col">
            <ul>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <Link to="/voter/complaint" className="text-regal-blue-700">
                  <div className="flex items-center justify-between">
                    <span className="text-regal-blue-700">View Complaints</span>
                    <IoMdArrowDropright />
                  </div>
                </Link>
              </li>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <div
                  onClick={openModal}
                  className="flex items-center justify-between text-regal-blue-700"
                >
                  <span className="text-regal-blue-700">File Complaints</span>
                  <IoMdArrowDropright />
                </div>
              </li>
            </ul>
          </div>
        </div>
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <MdOutlineHowToVote className="h-20 w-20 text-blue-500 mb-2" />
          <span className="text-regal-blue-700 text-left py-1">Elections Reports</span>
          <Select
            options={titles}
            value={selectedElection}
            onChange={handleSelectChange}
            className="w-60"
          />
        </div>
        <div className=" h-44 flex items-center flex-col min justify-center border-2 border-gray-100 rounded-md p-5">
          <LiaBoxOpenSolid className="h-20 w-20 text-blue-500 mb-2" />
          <div className="flex gap-1 flex-col">
            <ul>
              <li className=" w-full px-4   py-1 hover:bg-gray-100 hover:border-lg">
                <Link to="/voter/vote" className="text-regal-blue-700">
                  <div className="flex items-center justify-between">
                    <span className="text-regal-blue-700">
                      Vote Your Candidate
                    </span>
                    <IoMdArrowDropright />
                  </div>
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <DataLine value="Results" label="View Results" path="/voter/results" />
    </main>
  );
};

export default VoterLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\Auth\LoginLayout.jsx
import React, { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import { useNavigate } from "react-router-dom";
import { usersRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { Link } from "react-router-dom";
import logo from "./facecast-no-bg.png";
import toast from "react-hot-toast";
// import { getCollectionById } from "../../utils/globals";
const LoginLayout = () => {
  const { logIn } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loginAllowed, setLoginAllowed] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [role, setRole] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // Set loading to true while sign-up is in progress
    setErrorMessage("");

    try {
      const loginuser = await logIn(email, password);
      setEmail("");
      setPassword("");
      console.log("login user", loginuser.user.uid);
      if (loginuser) {
        const userData = await getCollectionById(usersRef, loginuser.user.uid);
        // toast.success("Login Successful");

        if (userData.roles === "voter") {
          toast.success("Voter Login Successful");
          navigate("/voter");
        } else if (userData.roles === "admin") {
          toast.success("Admin Login Successful");
          navigate("/admin");
        } else {

          navigate("/signin");
        }
      } else {
        setErrorMessage("Invalid email or password");
      }
    } catch (error) {
      // Handle signup errors
      console.error("Error during sign-up:", error);
      setErrorMessage("Invalid email or password");
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="max-w-4xl mx-auto mt-16">
      <main className=" grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 shadow-md p-10 border-stone-200 bg-stone-50">
        <section className="shadow-sm flex items-center flex-col gap-5    justify-center pb-14">
          <img src={logo} alt="Face cast logo" className="md:max-w-sm w-48" />
        </section>
        <section class="md:border-l border-stone-300 md:p-6 md:py-10 md:px-10 ">
          {errorMessage && (
            <Alert message={errorMessage} type="error" dismissible={true} />
          )}
          {/* {successMessage && <Alert message={successMessage} type="success" />} */}
          <h2 class="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Welcome Abroad
          </h2>
          <form
            action=""
            onSubmit={handleSubmit}
            class=" mx-auto flex flex-col items-left gap-4"
          >
            <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4">
              <div>
                <label htmlFor="name1" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  class="form-input text-md"
                />
              </div>

              <div>
                <label for="password" className="form-label">
                  Password
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  class="form-input text-md"
                />
              </div>
            </div>
            <div>
              Already have an account
              <Link
                to="/signup"
                className="pl-2 py-2 font-bold text-regal-blue-600"
              >
                Create Account
              </Link>
            </div>
            <div class="flex items-center justify-between">
              <button
                class={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Signing In..." : "Sign In"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default LoginLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\SignupLayout.jsx
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../../context/AuthContext";
import { setDoc, doc } from "firebase/firestore";
import Alert from "../../Components/Alert";
import Select from "react-select";
import { options } from "./data/options";
import { useNavigate } from "react-router-dom";
import { db } from "../../config/firebase";
import { BsPersonBoundingBox } from "react-icons/bs";
import { faceio } from "../../config/faceio";
import { permissionRef } from "../../config/firebase";
import { getCollectionById } from "../../utils/globals";
import { FaInfoCircle, FaCheck, FaTimes } from "react-icons/fa";
import toast from "react-hot-toast";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";

const SignupLayout = () => {
  const navigate = useNavigate();
  const [signUpAllowed, setSignUpAllowed] = useState(true);
  const { signUp, PERMISSIONSID } = useAuth();

  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

  const emailRef = useRef();
  const pwdRef = useRef();

  const [email, setEmail] = useState("");
  const [validEmail, setValidEmail] = useState(false);
  const [emailFocus, setEmailFocus] = useState("");

  const [password, setPassword] = useState("");
  const [validPassword, setValidPassword] = useState(false);
  const [passwordFocus, setPasswordFocus] = useState("");

  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCninc] = useState("");
  const [phone, setPhone] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [area, setArea] = useState("");
  const [faceData, setFaceData] = useState("");

  const [loading, setLoading] = useState(false);
  const [faceEnrolled, setFaceEnrolled] = useState(false);

  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    setValidEmail(EMAIL_REGEX.test(email));
  }, [email]);

  useEffect(() => {
    setValidPassword(PWD_REGEX.test(password));
  }, [password]);

  useEffect(() => {
    const fetchPermissions = async () => {
      const permissionData = await getCollectionById(
        permissionRef,
        PERMISSIONSID
      );
      if (permissionData) {
        setSignUpAllowed(permissionData.signUp);
      }
    };
    fetchPermissions();
  }, [PERMISSIONSID]);

  const handleFaceRegister = async () => {
    try {
      let response = await faceio.enroll({
        locale: "auto",
        payload: {
          email: email,
        },
      });
      console.log(`Unique Facial ID: ${response.facialId}
      Enrollment Date: ${response.timestamp}
      Gender: ${response.details.gender}
      Age Approximation: ${response.details.age}`);

      setFaceData(response);
      setFaceEnrolled(true);
    } catch (error) {
      console.log(error);
      setFaceEnrolled(false);
      setErrorMessage("Face enrollment failed. Please try again.");
    }
  };

  const handleProvinceChange = (selectedOption) => {
    setProvince(selectedOption);
    setCity("");
    setArea("");
  };

  const handleCityChange = (selectedOption) => {
    setCity(selectedOption);
    setArea("");
  };

  const handleAreaChange = (selectedOption) => {
    setArea(selectedOption);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!faceEnrolled) {
      setErrorMessage("Face enrollment is required to sign up.");
      return;
    }
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");

    try {
      const userCredential = await signUp(email, password);
      const user = userCredential.user;
      if (user) {
        const userId = user.uid;
        await setDoc(doc(db, "users", userId), {
          email,
          fname,
          lname,
          cnic,
          phone,
          address: {
            province: province.label || "",
            city: city.label || "",
            area: area.label || "",
          },
          faceData: faceData,
          roles: "voter",
        });
        toast.success("User Created Successfully");

        setCninc("");
        setFname("");
        setLname("");
        setPhone("");
      }
      setEmail("");
      setPassword("");
      setSuccessMessage("Sign-up successful!");
      navigate("/voter");
    } catch (error) {
      console.error("Error during sign-up:", error);
      switch (error.code) {
        case "auth/email-already-in-use":
          setErrorMessage(
            "Email is already in use. Please choose a different email."
          );
          break;
        case "auth/weak-password":
          setErrorMessage(
            "The password is too weak. Please choose a stronger password."
          );
          break;
        default:
          setErrorMessage(
            "An error occurred during sign-up. Please try again later."
          );
          break;
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <main>
        <section className="p-6 max-w-2xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Signup
          </h2>
          {errorMessage && (
            <Alert
              message={errorMessage}
              type="error"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {successMessage && (
            <Alert
              message={successMessage}
              type="success"
              dismissible={true}
              autoHideDelay={5000}
            />
          )}
          {signUpAllowed ? (
            <form
              action=""
              onSubmit={handleSubmit}
              className="mx-auto flex flex-col items-left gap-4"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="fname"
                    className="text-lg font-normal text-slate-900"
                  >
                    First name
                  </label>
                  <input
                    type="text"
                    id="fname"
                    name="fname"
                    value={fname}
                    onChange={(e) => setFname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="lname"
                    className="text-lg font-normal text-slate-900"
                  >
                    Last name
                  </label>
                  <input
                    type="text"
                    id="lname"
                    name="lname"
                    value={lname}
                    onChange={(e) => setLname(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="cnic"
                    className="text-lg font-normal text-slate-900"
                  >
                    ID number (cnic)
                  </label>
                  <input
                    type="number"
                    id="cnic"
                    name="cnic"
                    value={cnic}
                    onChange={(e) => setCninc(e.target.value)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    htmlFor="phone"
                    className="text-lg font-normal text-slate-900"
                  >
                    Phone
                  </label>
                  <PhoneInput
                    country={"pk"}
                    onlyCountries={["pk"]}
                    value={phone}
                    onChange={(value) => setPhone(value)}
                  />
                </div>
                <div>
                  <label
                    htmlFor="province"
                    className="text-lg font-normal text-slate-900"
                  >
                    Province
                  </label>
                  <Select
                    value={province}
                    onChange={handleProvinceChange}
                    options={options}
                    placeholder="Select Province"
                  />
                </div>

                <div>
                  <label
                    htmlFor="city"
                    className="text-lg font-normal text-slate-900"
                  >
                    City
                  </label>
                  <Select
                    value={city}
                    onChange={handleCityChange}
                    options={province.cities}
                    placeholder="Select City"
                  />
                </div>

                {city && city.areas && (
                  <div>
                    <label
                      htmlFor="area"
                      className="text-lg font-normal text-slate-900"
                    >
                      Area
                    </label>
                    <Select
                      value={area}
                      onChange={handleAreaChange}
                      options={city.areas.map((area) => ({
                        label: area,
                        value: area,
                      }))}
                      placeholder="Select Area"
                    />
                  </div>
                )}
                <div>
                  <label
                    htmlFor="email"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Email
                    <span
                      id="emailnote"
                      className={validEmail ? "m-2 text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      id="emailnote"
                      className={
                        validEmail || !email ? "hidden" : "text-red-600 m-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="email"
                    ref={emailRef}
                    value={email}
                    aria-invalid={validEmail ? "false" : "true"}
                    aria-describedby="emailnote"
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Please Enter"
                    onBlur={() => setEmailFocus(false)}
                    onFocus={() => setEmailFocus(true)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    className={
                      emailFocus && !validEmail
                        ? "text-red-600 flex items-center gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="" />
                    Invalid Email
                  </p>
                </div>

                <div>
                  <label
                    htmlFor="password"
                    className="text-lg font-normal text-slate-900 flex items-center gap-2"
                  >
                    Password
                    <span
                      id="uidnote"
                      className={validPassword ? "text-green-600" : "hidden"}
                    >
                      <FaCheck />
                    </span>
                    <span
                      className={
                        validPassword || !password
                          ? "hidden"
                          : "text-red-600 flex items-center gap-2"
                      }
                    >
                      <FaTimes />
                    </span>
                  </label>
                  <input
                    type="password"
                    required
                    aria-invalid={validPassword ? "false" : "true"}
                    aria-describedby="pwdnote"
                    ref={pwdRef}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Please Enter"
                    onFocus={() => setPasswordFocus(true)}
                    onBlur={() => setPasswordFocus(false)}
                    className="w-full p-1 border border-gray-300 rounded-md"
                  />
                  <p
                    id="pwdnote"
                    className={
                      passwordFocus && !validPassword
                        ? "text-red-600 flex  gap-2"
                        : "hidden"
                    }
                  >
                    <FaInfoCircle className="w-6 h-6" />
                    8 to 24 characters.
                    <br />
                    Must include uppercase and lowercase letters, a number and a
                    special character.
                    <br />
                  </p>
                </div>
                <div>
                  <label
                    htmlFor="faceauth"
                    className="text-lg font-normal text-slate-900"
                  >
                    Face Authentication
                  </label>
                  <div
                    onClick={handleFaceRegister}
                    className="w-full cursor-pointer p-2 border border-gray-300 rounded-md flex items-center gap-2"
                  >
                    <BsPersonBoundingBox />
                    <span className="ml-2">Authenticate</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mt-4">
                <button
                  type="submit"
                  className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                    loading || !faceEnrolled
                      ? "opacity-50 cursor-not-allowed"
                      : ""
                  }`}
                  disabled={loading || !faceEnrolled}
                >
                  {loading ? "Signing up..." : "Sign up"}
                </button>
              </div>
            </form>
          ) : (
            <div className="bg-red-200 p-4 flex items-center rounded-md">
              <p className="text-red-800 font-semibold">
                Registration is temporarily disabled. Come back later.
              </p>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default SignupLayout;

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\data.js
export const ProvincesOfPakistan = [
  { value: "Punjab", label: "Punjab" },
  { value: "Sindh", label: "Sindh" },
  { value: "Balochistan", label: "Balochistan" },
  { value: "Khyber Pakhtunkhwa", label: "Khyber Pakhtunkhwa" },
  { value: "Gilgit-Baltistan", label: "Gilgit-Baltistan" },
  { value: "Azad Kashmir", label: "Azad Kashmir" },
];
export const MajorCitiesOfPakistan = [
  {
    label: "Punjab",
    options: [
      { value: "Lahore", label: "Lahore" },
      { value: "Rawalpindi", label: "Rawalpindi" },
      { value: "Faisalabad", label: "Faisalabad" },
    ],
  },
  {
    label: "Sindh",
    options: [
      { value: "Karachi", label: "Karachi" },
      { value: "Hyderabad", label: "Hyderabad" },
      { value: "Sukkur", label: "Sukkur" },
    ],
  },
  {
    label: "Balochistan",
    options: [
      { value: "Quetta", label: "Quetta" },
      { value: "Gwadar", label: "Gwadar" },
      { value: "Hub", label: "Hub" },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    options: [
      { value: "Peshawar", label: "Peshawar" },
      { value: "Abbottabad", label: "Abbottabad" },
      { value: "Swat", label: "Swat" },
    ],
  },
  {
    label: "Gilgit-Baltistan",
    options: [
      { value: "Gilgit", label: "Gilgit" },
      { value: "Skardu", label: "Skardu" },
      { value: "Hunza", label: "Hunza" },
    ],
  },
  {
    label: "Azad Kashmir",
    options: [
      { value: "Muzaffarabad", label: "Muzaffarabad" },
      { value: "Mirpur", label: "Mirpur" },
      { value: "Rawalakot", label: "Rawalakot" },
    ],
  },
];

export const MajorAreasOfPakistan = [
    {
      label: "Lahore",
      options: [
        { value: "Gulberg", label: "Gulberg" },
        { value: "Defence", label: "Defence" },
        { value: "Johar Town", label: "Johar Town" },
        // Add more areas of Lahore here
      ]
    },
    {
      label: "Rawalpindi",
      options: [
        { value: "Saddar", label: "Saddar" },
        { value: "Bahria Town", label: "Bahria Town" },
        // Add more areas of Rawalpindi here
      ]
    },
    {
      label: "Faisalabad",
      options: [
        { value: "D Ground", label: "D Ground" },
        { value: "Gulberg", label: "Gulberg" },
        // Add more areas of Faisalabad here
      ]
    },
    {
      label: "Karachi",
      options: [
        { value: "Clifton", label: "Clifton" },
        { value: "Defence", label: "Defence" },
        { value: "Gulshan-e-Iqbal", label: "Gulshan-e-Iqbal" },
        // Add more areas of Karachi here
      ]
    },
    {
      label: "Hyderabad",
      options: [
        { value: "Latifabad", label: "Latifabad" },
        { value: "Qasimabad", label: "Qasimabad" },
        // Add more areas of Hyderabad here
      ]
    },
    {
      label: "Sukkur",
      options: [
        { value: "Bukera Road", label: "Bukera Road" },
        { value: "Sukkur Barrage", label: "Sukkur Barrage" },
        // Add more areas of Sukkur here
      ]
    },
    // Add more cities and areas as needed
  ];
  

// File: \Side Projects\facecast-vote\src\Layout\Auth\data\options.js
export const options = [
  {
    label: "Punjab",
    value: "punjab",
    cities: [
      {
        label: "Lahore",
        value: "lahore",
        areas: ["Gulberg", "Model Town", "DHA"],
      },
      {
        label: "Faisalabad",
        value: "faisalabad",
        areas: ["Gulberg", "Madina Town", "Peoples Colony"],
      },
      {
        label: "Rawalpindi",
        value: "rawalpindi",
        areas: ["Saddar", "Bahria Town", "Chaklala"],
      },
      {
        label: "Multan",
        value: "multan",
        areas: ["Cantt", "Bosan Road", "Shah Rukn-e-Alam Colony"],
      },
    ],
  },
  {
    label: "Sindh",
    value: "sindh",
    cities: [
      {
        label: "Karachi",
        value: "karachi",
        areas: ["Clifton", "Gulshan-e-Iqbal", "Defence"],
      },
      {
        label: "Hyderabad",
        value: "hyderabad",
        areas: ["Latifabad", "Qasimabad", "Phuleli"],
      },
      {
        label: "Sukkur",
        value: "sukkur",
        areas: ["Saddar", "Airport Road", "Barrage Colony"],
      },
      {
        label: "Larkana",
        value: "larkana",
        areas: ["Civil Lines", "Bunder Road", "Dokri Road"],
      },
    ],
  },
  {
    label: "Khyber Pakhtunkhwa",
    value: "kpk",
    cities: [
      {
        label: "Peshawar",
        value: "peshawar",
        areas: ["Hayatabad", "University Town", "Cantt"],
      },
      {
        label: "Abbottabad",
        value: "abbottabad",
        areas: ["Jinnahabad", "Sarban Chowk", "Mansehra Road"],
      },
      {
        label: "Swat",
        value: "swat",
        areas: ["Mingora", "Saidu Sharif", "Madyan"],
      },
      {
        label: "Mardan",
        value: "mardan",
        areas: ["Takht Bhai", "Charsadda Road", "Nowshera Road"],
      },
    ],
  },
  {
    label: "Balochistan",
    value: "balochistan",
    cities: [
      {
        label: "Quetta",
        value: "quetta",
        areas: ["Cantonment Area", "Samungli Road", "Chiltan Road"],
      },
      {
        label: "Gwadar",
        value: "gwadar",
        areas: ["Sangar", "Industrial Estate", "Old Town"],
      },
      {
        label: "Hub",
        value: "hub",
        areas: ["New Town", "Industrial Area", "Gulshan-e-Zainab"],
      },
      {
        label: "Khuzdar",
        value: "khuzdar",
        areas: ["Civil Lines", "Airport Road", "Mughal Road"],
      },
    ],
  },
];

// File: \Side Projects\facecast-vote\src\Layout\user\VoteNowLayout.jsx
import React from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import { Outlet } from "react-router-dom";
const VoteNowLayout = () => {
  return (
    <main className="mx-auto max-w-5xl py-4">
      <BreadCrumbs />
      <Outlet />
    </main>
  );
};

export default VoteNowLayout;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandCreate.jsx
import React, { useEffect, useState } from "react";
import Select from "react-select";
import { MajorAreasOfPakistan } from "../Constituency/AreasSelect";
import { religions, languages, affiliations, genders } from "./data";
import Alert from "../../Components/Alert";
import { createCandidate } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import toast from "react-hot-toast";
const CandCreate = () => {
  const [name, setName] = useState("");
  // const [age, setAge] = useState("");
  const [dob, setDob] = useState("");
  const [gender, setGender] = useState("");
  const [constituency, setConstituency] = useState("");
  const [education, setEducation] = useState([
    { degree: "", institute: "", year: "" },
  ]);
  const [religion, setReligion] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [address, setAddress] = useState({
    houseNo: "",
    area: "",
    city: "",
    province: "",
  });
  const [assets, setAssets] = useState({});
  const [affiliation, setAffiliation] = useState([]); //party
  const [language, setLanguage] = useState("");
  const [loading, setLoading] = useState(false);
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Data fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching:", error);
      }
    };

    fetchData();
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleLanguageChange = (selectedOption) => {
    console.log(selectedOption.value);
    setLanguage(selectedOption.value);
  };
  const handleGenderChange = (selectedOption) => {
    console.log(selectedOption.value);
    setGender(selectedOption.value);
  };

  const handleAffiliationChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAffiliation(selectedOption.value);
  };
  const handleHouseNumberChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, houseNo: e.target.value });
  };
  const handleAreaChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAddress({ ...address, area: selectedOption.value });
  };
  const handleCityChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, city: e.target.value });
  };
  const handleProvinceChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, province: e.target.value });
  };

  const handleAddEducation = () => {
    setEducation([...education, { degree: "", institute: "", year: "" }]);
  };

  const handleRemoveEducation = (indexToRemove) => {
    setEducation(education.filter((_, index) => index !== indexToRemove));
  };

  const handleDegreeChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].degree = e.target.value;
    setEducation(updatedEducation);
  };

  const handleInstitutionChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].institute = e.target.value;
    setEducation(updatedEducation);
  };

  const handleYearChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].year = e.target.value;
    setEducation(updatedEducation);
  };

  const handleReligionChange = (selectedOption) => {
    console.log(selectedOption.value);
    setReligion(selectedOption.value);
  };
  const customStyles = {
    container: (provided) => ({
      ...provided,
      position: "relative", // Ensure the container has a relative position
    }),
  };

  const [message, setMessage] = useState("");
  const [errMessage, setErrMessage] = useState("");
  // useEffect(() => {});
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("first");
    if (
      !name ||
      // !age ||
      !dob ||
      !gender ||
      !constituency ||
      !education ||
      !religion ||
      !phone ||
      !email ||
      !manifesto ||
      !address ||
      !assets ||
      !affiliation ||
      !language ||
      !image
    ) {
      setErrMessage("Please fill in all fields");
      setLoading(false);
      return;
    }
    console.log("first");
    const data = {
      name: name,
      dob: dob,
      gender: gender,
      constituency: constituency,
      education: education ? education : {},
      religion: religion,
      phone: phone,
      email: email,
      manifesto: manifesto,
      address: address ? address : {},
      assets: assets,
      affiliation: affiliation,
      language: language,
      imageURL: "",
    };
    try {
      console.log("first in try");
      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      if (!imagePath) {
        setErrMessage("Error Uploading Image");
        setLoading(false);
        return;
      }
      data.imageURL = imagePath;

      const candidate = await createCandidate(data);
      console.log("Candidate created with ID:", candidate);
      if (candidate) {
        console.log("first in try success");
        toast.success("Candidate Created Successfully");
        // setMessage("Candidate Created Successfully");
      } else {
        setErrMessage("Error Creating Candidate");
        toast.error("Error Creating Candidate");
      }
    } catch (error) {
      console.log("Error creating candidate", error);
      // setErrMessage("Error Creating Candidate");
      console.log("first in try catch");
      toast.error("Error Creating Candidate");
    } finally {
      console.log("first in try finally");
      setLoading(false);
    }
  };
  return (
    <section>
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {errMessage && (
        <Alert
          message={errMessage}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />

      <form onSubmit={handleSubmit}>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Personal Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={(e) => handleImageUpload(e)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Gender
            </label>
            <Select
              options={genders}
              value={gender}
              onChange={handleGenderChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Date of Birth
            </label>
            <input
              type="date"
              id="dob"
              name="dob"
              value={dob}
              onChange={(e) => setDob(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Relegion
            </label>
            <Select
              options={religions}
              value={religion}
              onChange={handleReligionChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Languages Spoken
            </label>
            <Select
              options={languages}
              value={language}
              onChange={handleLanguageChange}
              styles={customStyles}
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">Address</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              House Number
            </label>
            <input
              type="text"
              id="hno"
              name="hno"
              value={address.houseNo}
              onChange={handleHouseNumberChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              Area
            </label>
            <Select
              options={MajorAreasOfPakistan}
              value={address.area}
              onChange={handleAreaChange}
              styles={customStyles}
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={address.city}
              onChange={handleCityChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={address.province}
              onChange={handleProvinceChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Education Info
        </h2>
        {education.map((edu, index) => (
          <div
            key={index}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          >
            <div>
              <label
                htmlFor={`degree-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Degree
              </label>
              <input
                type="text"
                id={`degree-${index}`}
                name={`degree-${index}`}
                value={edu.degree}
                onChange={(e) => handleDegreeChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`institute-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Institute
              </label>
              <input
                type="text"
                id={`institute-${index}`}
                name={`institute-${index}`}
                value={edu.institute}
                onChange={(e) => handleInstitutionChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`year-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Year
              </label>
              <input
                type="date"
                id={`year-${index}`}
                name={`year-${index}`}
                value={edu.year}
                onChange={(e) => handleYearChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            {index > 0 && (
              <div className="flex justify-start py-4">
                <button
                  className="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                  onClick={() => handleRemoveEducation(index)}
                >
                  <span className="font-semibold text-base">Remove</span>
                </button>
              </div>
            )}
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button
            className="bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600"
            onClick={handleAddEducation}
          >
            <span className="font-semibold text-base">Add Education</span>
          </button>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Political Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="const"
              className="text-lg font-normal text-slate-900"
            >
              Constituency
            </label>
            <input
              type="text"
              id="const"
              name="const"
              value={constituency}
              onChange={(e) => setConstituency(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.label}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Financial Information
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Total Assets Amount
            </label>
            <input
              type="number"
              id="total"
              name="total"
              value={assets}
              className="w-full p-1 border border-gray-300 rounded-md"
              onChange={(e) => setAssets(e.target.value)}
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating Candidate..." : "Create Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandCreate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew, MdDelete } from "react-icons/md";
import { getCandidates, deleteCandidate } from "../../utils/candidates";

const CandHome = () => {
  const [candidates, setCandidates] = useState([]);

  useEffect(() => {
    const fetchCandidates = async () => {
      const data = await getCandidates();
      setCandidates(data);
    };
    fetchCandidates();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this candidate?"
    );
    if (confirmDelete) {
      await deleteCandidate(id);
      setCandidates(candidates.filter((candidate) => candidate.id !== id));
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <MdDelete />
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">
        Candidate Home
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email/Phone
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Affiliation
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {candidates.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.email} / {item.phone}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.affiliation.name || " "}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CandHome;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import Alert from "../../Components/Alert";
import { getCandidatesById } from "../../utils/candidates";
import DataLine from "../../Components/DataLine";
const CandPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const candData = await getCandidatesById(id);
        if (!candData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", candData);

        setData(candData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name || "N/A"} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Education</Tab>
          <Tab>Assets</Tab>
        </TabList>

        <TabPanel>
          <div>
            <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
              Overview
            </h4>

            <DataLine
              title="Affiliation"
              value={data.affiliation.name || "N/A"}
            />
            <div>
              <img
                src={data.affiliation.symbol_url}
                alt={data.name}
                className="w-16 h-16 rounded-full mr-4"
              />
            </div>
            <DataLine title="Email" value={data.email || "N/A"} />
            <DataLine title="Phone" value={data.phone || "N/A"} />
            <DataLine
              title="Address"
              value={
                `${data.address.houseNo} ${data.address.area} ${data.address.city} ${data.address.province}` ||
                "N/A"
              }
            />
            <DataLine title="Province" value={data.address.province || "N/A"} />
            {/* Add more DataLine components for other data */}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render education data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Education Details
          </h4>
          <div>
            {data.education.map((edu, index) => (
              <div key={index}>
                <DataLine title="Degree" value={edu.degree} />
                <DataLine title="Institution" value={edu.institute} />
                <DataLine title="Year" value={edu.year} />
              </div>
            ))}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render assets data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Assets
          </h4>
          <div>
            <DataLine title="Total Assets" value={data.assets} />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <div className="flex items-center">
            <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
              {title}
            </h2>
          </div>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <img
              src={data.imageURL}
              alt={data.name}
              className="w-16 h-16 rounded-full mr-4"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default CandPreview;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandUpdate.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { useParams } from "react-router-dom";
import { getCandidatesById, updateCandidates } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import Alert from "../../Components/Alert";

const CandUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [area, setArea] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [affiliation, setAffiliation] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [options, setOptions] = useState([]);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleAffiliationChange = (selectedOption) => {
    setAffiliation(selectedOption.value);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getCandidatesById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        setSuccess("Candidate found Successfully");
        console.log("Candidate data for update:", data);
        setName(data.name);
        setEmail(data.email);
        setPhone(data.phone);
        setHouseNumber(data.address.houseNo);
        setArea(data.address.area);
        setCity(data.address.city);
        setProvince(data.address.province);
        setAffiliation(data.affiliation);
      } catch (error) {
        console.error("Error fetching candidate", error);
        setError("Error fetching Candidate");
      }
    };
    fetchData();
  }, [id]);

  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Options fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching options:", error);
      }
    };

    fetchOptions();
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    try {
      const data = {
        name,
        email,
        phone,
        houseNumber,
        area,
        city,
        province,
        affiliation,
        imageURL: "",
      };

      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      data.imageURL = imagePath;

      const success = await updateCandidates(id, data);
      if (success) {
        setSuccess("Candidate updated successfully!");
        console.log("Candidate updated successfully!");
        // Reset form fields
        setHouseNumber("");
        setArea("");
        setCity("");
        setProvince("");
        setName("");
        setEmail("");
        setPhone("");
        setAffiliation("");
        setImage(null);
        setImageUrl("");
      } else {
        setError("Error updating Candidate");
      }
    } catch (error) {
      console.error("Error updating candidate: ", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert message={error} type="error" dismissible autoHideDelay={3000} />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Personal Information
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="image"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={handleImageUpload}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="phone"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Address
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="houseNumber"
              className="text-lg font-normal text-slate-900"
            >
              House Number
            </label>
            <input
              type="text"
              id="houseNumber"
              name="houseNumber"
              value={houseNumber}
              onChange={(e) => setHouseNumber(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={province}
              onChange={(e) => setProvince(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Political Affiliation
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="affiliation"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.find((option) => option.value === affiliation)}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button
            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
            type="submit"
          >
            <span className="font-semibold text-base">
              {loading ? "Loading..." : "Update Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\data.js
const languages = [
  { value: "Urdu", label: "Urdu" },
  { value: "Sindhi", label: "Sindhi" },
  { value: "English", label: "English" },
  { value: "Punjabi", label: "Punjabi" },
  { value: "Pashto", label: "Pashto" },
  { value: "Balochi", label: "Balochi" },
  { value: "Saraiki", label: "Saraiki" },
  { value: "Hindko", label: "Hindko" },
  { value: "Kashmiri", label: "Kashmiri" },
  { value: "Shina", label: "Shina" },
  { value: "Brahui", label: "Brahui" },
  { value: "Hazaragi", label: "Hazaragi" },
  { value: "Wakhi", label: "Wakhi" },
  { value: "Burushaski", label: "Burushaski" },
  { value: "Other", label: "Other" },
];
const religions = [
  { value: "Muslim", label: "Muslim" },
  { value: "Christian", label: "Christian" },
  { value: "Hindu", label: "Hindu" },
  { value: "Sikh", label: "Sikh" },
  { value: "Buddhist", label: "Buddhist" },
  { value: "Bahai", label: "Bahai" },
  { value: "Jain", label: "Jain" },
  { value: "Zoroastrian", label: "Zoroastrian" },
  { value: "Jewish", label: "Jewish" },
  { value: "Other", label: "Other" },
];
const affiliations = [
  { value: "PTI", label: "Pakistan Tehreek E Insaaf" },
  { value: "PMLN", label: "Pakistan Muslim Leagues (N)" },
  { value: "IND", label: "Independant" },
  { value: "NOT SURE", label: "Not Sure" },
];
const genders = [
  { value: "Male", label: "Male" },
  { value: "Female", label: "Female" },
  { value: "Trans", label: "Trans" },
  { value: "Other", label: "Other" },
];

module.exports = { languages, religions, affiliations,genders };

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreaCodes.js
const areaCodes = [
    { value: 'NA-118', label: 'NA-118 - Lahore 1 (Shahdara, Harbanspura, Nishtar Town)' },
    { value: 'NA-119', label: 'NA-119 - Lahore 2 (Gulberg, Model Town, Faisal Town)' },
    { value: 'NA-120', label: 'NA-120 - Lahore 3 (Ravi Town, Aziz Bhatti Town, Data Gunj Buksh Town)' },
    { value: 'NA-121', label: 'NA-121 - Lahore 4 (Walled City, Shalimar, Wagah, Lahore Cantt)' },
    { value: 'NA-122', label: 'NA-122 - Lahore 5 (Raiwind, Township, Samanabad)' },
    { value: 'NA-123', label: 'NA-123 - Lahore 6 (Iqbal Town, Green Town, Sabzazar)' },
    { value: 'NA-124', label: 'NA-124 - Lahore 7 (Johar Town, Wapda Town, Township)' },
    { value: 'NA-125', label: 'NA-125 - Lahore 8 (Cavalry Ground, DHA, Askari)' },
    { value: 'NA-126', label: 'NA-126 - Lahore 9 (Shadman, Kot Lakhpat, Ichra)' },
    { value: 'NA-127', label: 'NA-127 - Lahore 10 (Barki, Bedian Road, Kahna Nau)' },
    { value: 'NA-128', label: 'NA-128 - Lahore 11 (DHA Phase 1, Nishtar Colony, Garden Town)' },
    { value: 'NA-129', label: 'NA-129 - Lahore 12 (Sui Gas Housing Society, Punjab University, Wahdat Colony)' },
    { value: 'NA-130', label: 'NA-130 - Lahore 13 (Lahore Airport, Gulshan-e-Ravi, Baghbanpura)' },
    { value: 'NA-131', label: 'NA-131 - Lahore 14 (Jallo Park, Shah Kamal, Raiwind Road)' },
    { value: 'NA-132', label: 'NA-132 - Lahore 15 (Thokar Niaz Baig, Multan Road, Chung)' }
  ];
  
  export default areaCodes;
  

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreasSelect.js
export const MajorAreasOfPakistan = [
  { value: "Karachi", label: "Karachi" },
  { value: "Hyderabad", label: "Hyderabad" },
  { value: "Sukkur", label: "Sukkur" },
  { value: "Larkana", label: "Larkana" },
  { value: "Mirpur Khas", label: "Mirpur Khas" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Thatta", label: "Thatta" },
  { value: "Dadu", label: "Dadu" },
  { value: "Jacobabad", label: "Jacobabad" },
  { value: "Shikarpur", label: "Shikarpur" },
  { value: "Sanghar", label: "Sanghar" },
  { value: "Ghotki", label: "Ghotki" },
  { value: "Umerkot", label: "Umerkot" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Badin", label: "Badin" },
  { value: "Kotri", label: "Kotri" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tando Adam", label: "Tando Adam" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Moro", label: "Moro" },
  { value: "Kandhkot", label: "Kandhkot" },
  { value: "Daharki", label: "Daharki" },
  { value: "Rohri", label: "Rohri" },
  { value: "Jamshoro", label: "Jamshoro" },
  { value: "Mithi", label: "Mithi" },
  { value: "Hala", label: "Hala" },
  { value: "Sehwan", label: "Sehwan" },
  { value: "Naudero", label: "Naudero" },
  { value: "Warah", label: "Warah" },
  { value: "Ranipur", label: "Ranipur" },
  { value: "Kamber", label: "Kamber" },
  { value: "Rohri", label: "Rohri" },
  { value: "Meerwah", label: "Meerwah" },
  { value: "Dokri", label: "Dokri" },
  { value: "Tando Muhammad Khan", label: "Tando Muhammad Khan" },
  { value: "Moro", label: "Moro" },
  { value: "Digri", label: "Digri" },
  { value: "Qambar", label: "Qambar" },
  { value: "Wahi Pandhi", label: "Wahi Pandhi" },
  { value: "Khipro", label: "Khipro" },
  { value: "Sakrand", label: "Sakrand" },
  { value: "Mehrabpur", label: "Mehrabpur" },
  { value: "Khanpur", label: "Khanpur" },
  { value: "Matiari", label: "Matiari" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Jhol", label: "Jhol" },
  { value: "Shahdadpur", label: "Shahdadpur" },
  { value: "Sinjhoro", label: "Sinjhoro" },
  { value: "Khipro", label: "Khipro" },
  { value: "Thari Mirwah", label: "Thari Mirwah" },
  { value: "Tando Bago", label: "Tando Bago" },
  { value: "Rohri", label: "Rohri" },
  { value: "Kashmore", label: "Kashmore" },
  { value: "Ghari Khairo", label: "Ghari Khairo" },
  { value: "Madeji", label: "Madeji" },
  { value: "Tangwani", label: "Tangwani" },
  { value: "Sobho Dero", label: "Sobho Dero" },
  { value: "Lakhi", label: "Lakhi" },
  { value: "Qubo Saeed Khan", label: "Qubo Saeed Khan" },
  { value: "Daur", label: "Daur" },
  { value: "Bhiria", label: "Bhiria" },
  { value: "Mehar", label: "Mehar" },
  { value: "Bhiria Road", label: "Bhiria Road" },
  { value: "Hala New", label: "Hala New" },
  { value: "Jhudo", label: "Jhudo" },
  { value: "Sindhri", label: "Sindhri" },
  { value: "Bakrani", label: "Bakrani" },
  { value: "Samaro", label: "Samaro" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Therhi", label: "Therhi" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Sukrand", label: "Sukrand" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Mardan", label: "Mardan" },
  { value: "Swat", label: "Swat" },
  { value: "Abbottabad", label: "Abbottabad" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kohat", label: "Kohat" },
  { value: "Haripur", label: "Haripur" },
  { value: "Bannu", label: "Bannu" },
  { value: "Chitral", label: "Chitral" },
  { value: "Batagram", label: "Batagram" },
  { value: "Tank", label: "Tank" },
  { value: "Dir", label: "Dir" },
  { value: "Hangu", label: "Hangu" },
  { value: "Shangla", label: "Shangla" },
  { value: "Karak", label: "Karak" },
  { value: "Swabi", label: "Swabi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Kohistan", label: "Kohistan" },
  { value: "Buner", label: "Buner" },
  { value: "Malakand", label: "Malakand" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Mingora", label: "Mingora" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kabal", label: "Kabal" },
  { value: "Topi", label: "Topi" },
  { value: "Alpuri", label: "Alpuri" },
  { value: "Rustam", label: "Rustam" },
  { value: "Parachinar", label: "Parachinar" },
  { value: "Thana", label: "Thana" },
  { value: "Daggar", label: "Daggar" },
  { value: "Pabbi", label: "Pabbi" },
  { value: "Risalpur", label: "Risalpur" },
  { value: "Bakhshali", label: "Bakhshali" },
  { value: "Bela", label: "Bela" },
  { value: "Chakdara", label: "Chakdara" },
  { value: "Chakku", label: "Chakku" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Chitral", label: "Chitral" },
  { value: "Daggar", label: "Daggar" },
  { value: "Dargai", label: "Dargai" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Dir", label: "Dir" },
  { value: "Drosh", label: "Drosh" },
  { value: "Haripur", label: "Haripur" },
  { value: "Karak", label: "Karak" },
  { value: "Kohat", label: "Kohat" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Malakand", label: "Malakand" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Mardan", label: "Mardan" },
  { value: "Mingora", label: "Mingora" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Paharpur", label: "Paharpur" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Rustam", label: "Rustam" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Shangla", label: "Shangla" },
  { value: "Swabi", label: "Swabi" },
  { value: "Swat", label: "Swat" },
  { value: "Tank", label: "Tank" },
  { value: "Thana", label: "Thana" },
  { value: "Topi", label: "Topi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Quetta", label: "Quetta" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Chaman", label: "Chaman" },
  { value: "Turbat", label: "Turbat" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Sibi", label: "Sibi" },
  { value: "Zhob", label: "Zhob" },
  { value: "Loralai", label: "Loralai" },
  { value: "Dera Bugti", label: "Dera Bugti" },
  { value: "Nushki", label: "Nushki" },
  { value: "Mastung", label: "Mastung" },
  { value: "Kharan", label: "Kharan" },
  { value: "Panjgur", label: "Panjgur" },
  { value: "Kalat", label: "Kalat" },
  { value: "Mach", label: "Mach" },
  { value: "Awaran", label: "Awaran" },
  { value: "Qila Abdullah", label: "Qila Abdullah" },
  { value: "Ormara", label: "Ormara" },
  { value: "Pasni", label: "Pasni" },
  { value: "Kohlu", label: "Kohlu" },
  { value: "Dalbandin", label: "Dalbandin" },
  { value: "Wadh", label: "Wadh" },
  { value: "Dera Murad Jamali", label: "Dera Murad Jamali" },
  { value: "Bela", label: "Bela" },
  { value: "Kech", label: "Kech" },
  { value: "Sui", label: "Sui" },
  { value: "Gandava", label: "Gandava" },
  { value: "Chagai", label: "Chagai" },
  { value: "Harnai", label: "Harnai" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Lasbela", label: "Lasbela" },
  { value: "Makran", label: "Makran" },
  { value: "Mangochar", label: "Mangochar" },
  { value: "Mekhtar", label: "Mekhtar" },
  { value: "Pishin", label: "Pishin" },
  { value: "Killa Saifullah", label: "Killa Saifullah" },
  { value: "Musa Khel Bazar", label: "Musa Khel Bazar" },
  { value: "Killa Abdullah", label: "Killa Abdullah" },
  { value: "Barkhan", label: "Barkhan" },
  { value: "Sherani", label: "Sherani" },
  { value: "Lehri", label: "Lehri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Chaman", label: "Chaman" },
  { value: "Taftan", label: "Taftan" },
  { value: "Mand", label: "Mand" },
  { value: "Tump", label: "Tump" },
  { value: "Turbat", label: "Turbat" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Pasni", label: "Pasni" },
  { value: "Ormara", label: "Ormara" },
  { value: "Jiwani", label: "Jiwani" },
  { value: "Gaddani", label: "Gaddani" },
  { value: "Hub", label: "Hub" },
  { value: "Winder", label: "Winder" },
  { value: "Uthal", label: "Uthal" },
  { value: "Mach", label: "Mach" },
  { value: "Dera Allah Yar", label: "Dera Allah Yar" },
  { value: "Jaffarabad", label: "Jaffarabad" },
  { value: "Jhal Magsi", label: "Jhal Magsi" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Kalat", label: "Kalat" },
  { value: "Ziarat", label: "Ziarat" },
  { value: "Hanna Lake", label: "Hanna Lake" },
  { value: "Urak Valley", label: "Urak Valley" },
  { value: "Bolan Pass", label: "Bolan Pass" },
  { value: "Gaddani Beach", label: "Gaddani Beach" },
  { value: "Hingol National Park", label: "Hingol National Park" },
  { value: "Astola Island", label: "Astola Island" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Lahore", label: "Lahore" },
  { value: "Faisalabad", label: "Faisalabad" },
  { value: "Rawalpindi", label: "Rawalpindi" },
  { value: "Multan", label: "Multan" },
  { value: "Gujranwala", label: "Gujranwala" },
  { value: "Sialkot", label: "Sialkot" },
  { value: "Bahawalpur", label: "Bahawalpur" },
  { value: "Sargodha", label: "Sargodha" },
  { value: "Gujrat", label: "Gujrat" },
  { value: "Jhelum", label: "Jhelum" },
  { value: "Sahiwal", label: "Sahiwal" },
  { value: "Okara", label: "Okara" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Chiniot", label: "Chiniot" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Kasur", label: "Kasur" },
  { value: "Muzaffargarh", label: "Muzaffargarh" },
  { value: "Rahim Yar Khan", label: "Rahim Yar Khan" },
  { value: "Pakpattan", label: "Pakpattan" },
  { value: "Dera Ghazi Khan", label: "Dera Ghazi Khan" },
  { value: "Narowal", label: "Narowal" },
  { value: "Jhang", label: "Jhang" },
  { value: "Attock", label: "Attock" },
  { value: "Layyah", label: "Layyah" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Khushab", label: "Khushab" },
  { value: "Chakwal", label: "Chakwal" },
  { value: "Vehari", label: "Vehari" },
  { value: "Hafizabad", label: "Hafizabad" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Toba Tek Singh", label: "Toba Tek Singh" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Burewala", label: "Burewala" },
  { value: "Gojra", label: "Gojra" },
  { value: "Muridke", label: "Muridke" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Ahmedpur East", label: "Ahmedpur East" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Vihari", label: "Vihari" },
  { value: "Hasilpur", label: "Hasilpur" },
  { value: "Kahna Nau", label: "Kahna Nau" },
  { value: "Chichawatni", label: "Chichawatni" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Murree", label: "Murree" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Kot Addu", label: "Kot Addu" },
  { value: "Lodhran", label: "Lodhran" },
  { value: "Kharian", label: "Kharian" },
  { value: "Jaranwala", label: "Jaranwala" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Arifwala", label: "Arifwala" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Talagang", label: "Talagang" },
  { value: "Kahror Pakka", label: "Kahror Pakka" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Pind Dadan Khan", label: "Pind Dadan Khan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Shujaabad", label: "Shujaabad" },
  { value: "Bhalwal", label: "Bhalwal" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Bhawana", label: "Bhawana" },
  { value: "Jampur", label: "Jampur" },
  { value: "Kot Mithan", label: "Kot Mithan" },
  { value: "Pattoki", label: "Pattoki" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Kunjah", label: "Kunjah" },
  { value: "Choa Saidan Shah", label: "Choa Saidan Shah" },
  { value: "Daska", label: "Daska" },
  { value: "Hazro", label: "Hazro" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Dunyapur", label: "Dunyapur" },
  { value: "Kot Radha Kishan", label: "Kot Radha Kishan" },
  { value: "Chak Jhumra", label: "Chak Jhumra" },
  { value: "Qadirabad", label: "Qadirabad" },
  { value: "Kamra", label: "Kamra" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kahror Lal Essan", label: "Kahror Lal Essan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Lala Musa", label: "Lala Musa" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Minchinabad", label: "Minchinabad" },
  { value: "Mitha Tiwana", label: "Mitha Tiwana" },
  { value: "Monga", label: "Monga" },
  { value: "Mubarikpur", label: "Mubarikpur" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Pasrur", label: "Pasrur" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sohawa", label: "Sohawa" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Tarogil", label: "Tarogil" },
  { value: "Ugoke", label: "Ugoke" },
  { value: "Wah", label: "Wah" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Zafarwal", label: "Zafarwal" },
  { value: "Gujar Khan", label: "Gujar Khan" },
  { value: "Haveli Lakha", label: "Haveli Lakha" },
  { value: "Jalalpur Pirwala", label: "Jalalpur Pirwala" },
  { value: "Kallar Kahar", label: "Kallar Kahar" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Kharian", label: "Kharian" },
  { value: "Kot Momin", label: "Kot Momin" },
  { value: "Kundian", label: "Kundian" },
  { value: "Lalian", label: "Lalian" },
  { value: "Liaqatpur", label: "Liaqatpur" },
  { value: "Mamukanjan", label: "Mamukanjan" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Qila Didar Singh", label: "Qila Didar Singh" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Sangla Hill", label: "Sangla Hill" },
  { value: "Shahkot", label: "Shahkot" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Shamsabad", label: "Shamsabad" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sillanwali", label: "Sillanwali" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Wah Cantt", label: "Wah Cantt" },
  { value: "Bhera", label: "Bhera" },
  { value: "Chunian", label: "Chunian" },
  { value: "Darya Khan", label: "Darya Khan" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Haroonabad", label: "Haroonabad" },
  { value: "Jand", label: "Jand" },
  { value: "Jatoi", label: "Jatoi" },
  { value: "Kahna", label: "Kahna" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kallar Syedan", label: "Kallar Syedan" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Kot Sultan", label: "Kot Sultan" },
  { value: "Lalamusa", label: "Lalamusa" },
  { value: "Liaquatpur", label: "Liaquatpur" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Nowshera Virkan", label: "Nowshera Virkan" },
  { value: "Pindi Bhattian", label: "Pindi Bhattian" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Rabwah", label: "Rabwah" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Sarai Alamgir", label: "Sarai Alamgir" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Sharaqpur", label: "Sharaqpur" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Sodhra", label: "Sodhra" },
  { value: "Taunsa", label: "Taunsa" },
  { value: "Thatta Ghulamka Dheroka", label: "Thatta Ghulamka Dheroka" },
  { value: "Tibba Sultanpur", label: "Tibba Sultanpur" },
  { value: "F-6", label: "F-6" },
  { value: "F-7", label: "F-7" },
  { value: "F-8", label: "F-8" },
  { value: "F-9", label: "F-9" },
  { value: "F-10", label: "F-10" },
  { value: "F-11", label: "F-11" },
  { value: "G-5", label: "G-5" },
  { value: "G-6", label: "G-6" },
  { value: "G-7", label: "G-7" },
  { value: "G-8", label: "G-8" },
  { value: "G-9", label: "G-9" },
  { value: "G-10", label: "G-10" },
  { value: "G-11", label: "G-11" },
  { value: "G-12", label: "G-12" },
  { value: "H-8", label: "H-8" },
  { value: "H-9", label: "H-9" },
  { value: "H-10", label: "H-10" },
  { value: "I-8", label: "I-8" },
  { value: "I-9", label: "I-9" },
  { value: "I-10", label: "I-10" },
  { value: "I-11", label: "I-11" },
  { value: "E-7", label: "E-7" },
  { value: "E-8", label: "E-8" },
  { value: "E-9", label: "E-9" },
  { value: "E-10", label: "E-10" },
  { value: "E-11", label: "E-11" },
  { value: "F-5", label: "F-5" },
  { value: "G-13", label: "G-13" },
  { value: "G-14", label: "G-14" },
  { value: "G-15", label: "G-15" },
  { value: "G-16", label: "G-16" },
  { value: "G-17", label: "G-17" },
  { value: "H-11", label: "H-11" },
  { value: "H-12", label: "H-12" },
  { value: "H-13", label: "H-13" },
  { value: "H-14", label: "H-14" },
  { value: "I-12", label: "I-12" },
  { value: "I-13", label: "I-13" },
  { value: "I-14", label: "I-14" },
  { value: "I-15", label: "I-15" },
  { value: "I-16", label: "I-16" },
  { value: "I-17", label: "I-17" },
  { value: "I-18", label: "I-18" },
  { value: "D-12", label: "D-12" },
  { value: "D-13", label: "D-13" },
  { value: "D-14", label: "D-14" },
  { value: "E-6", label: "E-6" },
  { value: "E-12", label: "E-12" },
  { value: "E-13", label: "E-13" },
  { value: "E-14", label: "E-14" },
  { value: "F-12", label: "F-12" },
  { value: "F-13", label: "F-13" },
  { value: "F-14", label: "F-14" },
  { value: "G-18", label: "G-18" },
  { value: "H-15", label: "H-15" },
  { value: "H-16", label: "H-16" },
  { value: "H-17", label: "H-17" },
  { value: "I-19", label: "I-19" },
  { value: "I-20", label: "I-20" },
  { value: "I-21", label: "I-21" },
];

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstCreate.jsx
import React, { useState } from "react";
import Select from "react-select";
import { addDoc } from "firebase/firestore";
import { constituenciesRef } from "../../config/firebase.js";
import { MajorAreasOfPakistan } from "./AreasSelect.js";
import toast from "react-hot-toast";
const ConstCreate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null); // Initialize to null
  const [selectedType, setSelectedType] = useState(null); // Initialize to null
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const [ageDistribution, setAgeDistribution] = useState({
    young_adults: "",
    adults: "",
    middleaged: "",
    seniors: "",
  });
  const [genderDistribution, setGenderDistribution] = useState({
    male: "",
    female: "",
    other: "",
  });
  const [educationLevels, setEducationLevels] = useState({
    primary_school: "",
    secondary_school: "",
    higher_education: "",
  });
  const AssemblyOptions = [
    { value: "Punjab", label: "Punjab" },
    { value: "Sindh", label: "Sindh" },
    { value: "Balochistan", label: "Balochistan" },
    { value: "KPK", label: "KPK" },
    { value: "National", label: "National" },
  ];

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  const handleTypeChange = (selectedOptions) => {
    console.log("Selected Type", selectedOptions.value);
    setSelectedType(selectedOptions.value);
  };
  const data = {
    name: name,
    code: code,
    assembly: selectedType,
    region: selectedRegion,
    population: population,
    voters: voters,
    area: area,
    age_distribution: ageDistribution
      ? ageDistribution
      : { young_adults: "", adults: "", middleaged: "", seniors: "" },
    gender_distribution: genderDistribution
      ? genderDistribution
      : { male: "", female: "", other: "" },
    education_levels: educationLevels
      ? educationLevels
      : { primary_school: "", secondary_school: "", higher_education: "" },
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Data to be added", data);
      const docRef = await addDoc(constituenciesRef,data);
      console.log("Document written with ID: ", docRef.id);
      toast.success("Constituency Created Successfully");
      // Reset form fields
      setName("");
      setCode("");
      setSelectedRegion("");
      setSelectedType("");
      setPopulation("");
      setVoters("");
      setArea("");
      setAgeDistribution({
        young_adults: "",
        adults: "",
        middleaged: "",
        seniors: "",
      });
      setGenderDistribution({
        male: "",
        female: "",
        other: "",
      });
      setEducationLevels({
        primary_school: "",
        secondary_school: "",
        higher_education: "",
      });
    } catch (error) {
      console.log(error);
      toast.error("Error creating Constituency");
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="code"
              className="text-lg font-normal text-slate-900"
            >
              Code
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="assembly"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            {/* Assuming AssemblyOptions is imported */}
            <Select
              options={AssemblyOptions}
              value={selectedType}
              onChange={handleTypeChange}
            />
          </div>
          <div>
            <label
              htmlFor="region"
              className="text-lg font-normal text-slate-900"
            >
              Region
            </label>
            {/* Assuming areas is imported */}
            <Select
              options={MajorAreasOfPakistan}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label
              htmlFor="population"
              className="text-lg font-normal text-slate-900"
            >
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="voters"
              className="text-lg font-normal text-slate-900"
            >
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="young_adults"
              className="text-lg font-normal text-slate-900"
            >
              Young Adults
            </label>
            <input
              type="number"
              id="young_adults"
              name="young_adults"
              value={ageDistribution.young_adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  young_adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="adults"
              className="text-lg font-normal text-slate-900"
            >
              Adults
            </label>
            <input
              type="number"
              id="adults"
              name="adults"
              value={ageDistribution.adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="middleaged"
              className="text-lg font-normal text-slate-900"
            >
              Middle-aged
            </label>
            <input
              type="number"
              id="middleaged"
              name="middleaged"
              value={ageDistribution.middleaged}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  middleaged: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="seniors"
              className="text-lg font-normal text-slate-900"
            >
              Seniors
            </label>
            <input
              type="number"
              id="seniors"
              name="seniors"
              value={ageDistribution.seniors}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  seniors: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="male"
              className="text-lg font-normal text-slate-900"
            >
              Male
            </label>
            <input
              type="number"
              id="male"
              name="male"
              value={genderDistribution.male}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  male: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="female"
              className="text-lg font-normal text-slate-900"
            >
              Female
            </label>
            <input
              type="number"
              id="female"
              name="female"
              value={genderDistribution.female}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  female: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="other"
              className="text-lg font-normal text-slate-900"
            >
              Other
            </label>
            <input
              type="number"
              id="other"
              name="other"
              value={genderDistribution.other}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  other: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="primary_school"
              className="text-lg font-normal text-slate-900"
            >
              Primary School
            </label>
            <input
              type="number"
              id="primary_school"
              name="primary_school"
              value={educationLevels.primary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  primary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="secondary_school"
              className="text-lg font-normal text-slate-900"
            >
              Secondary School
            </label>
            <input
              type="number"
              id="secondary_school"
              name="secondary_school"
              value={educationLevels.secondary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  secondary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="higher_education"
              className="text-lg font-normal text-slate-900"
            >
              Higher Education
            </label>
            <input
              type="number"
              id="higher_education"
              name="higher_education"
              value={educationLevels.higher_education}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  higher_education: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Create Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstCreate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import {
  getConstituencies,
  deleteConstituency,
} from "../../utils/constituency";

const ConstHome = () => {
  const [constituencies, setConstituencies] = useState([]);

  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const data = await getConstituencies();
        setConstituencies(data);
      } catch (error) {
        console.error("Error fetching constituencies", error);
      }
    };
    fetchConstituencies();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this constituency?"
    );
    if (confirmDelete) {
      const isSuccess = await deleteConstituency(id);
      if (isSuccess) {
        setConstituencies(constituencies.filter((item) => item.id !== id));
      } else {
        console.error("Error deleting constituency");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        Delete
      </button>
    </div>
  );

  if (!constituencies.length) {
    return <div>Loading...</div>;
  }

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 py-4">
          Constituency Home
        </h1>
      </div>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assembly
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Code
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Region
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Voters
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {constituencies.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.assembly}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.code}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.region}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.voters}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConstHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
// import { constituencies } from "../../data/const.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getConstituencyById } from "../../utils/constituency.js";

const ConstPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const constData = await getConstituencyById(id);
        if (!constData) {
          return <div>No Data Found.</div>;
        }
        console.log("Constituency data:", constData);
        setData(constData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Demographics</Tab>
          <Tab>Age Distribution</Tab>
          <Tab>Gender Distribution</Tab>
          <Tab>Education Levels</Tab>
        </TabList>

        <TabPanel>
          <DataLine title="Registered Voters" value={data.voters || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Age
          </h4>
          {data.age_distribution && (
            <>
              <DataLine
                title="Young Adults (18yo - 25yo)"
                value={data.age_distribution.young_adults || "N/A"}
              />
              <DataLine
                title="Adults (26yo - 40yo)"
                value={data.age_distribution.adults || "N/A"}
              />
              <DataLine
                title="Middle Ages (41yo - 60yo)"
                value={data.age_distribution.middleaged || "N/A"}
              />
              <DataLine
                title="Seniors (60yo +)"
                value={data.age_distribution.seniors || "N/A"}
              />
            </>
          )}
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Gender
          </h4>
          <DataLine
            title="Male"
            value={data.gender_distribution.male || "N/A"}
          />
          <DataLine
            title="Female"
            value={data.gender_distribution.female || "N/A"}
          />
          <DataLine
            title="Others"
            value={data.gender_distribution.other || "N/A"}
          />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Education Levels
          </h4>
          <DataLine
            title="Primary School"
            value={data.education_levels.primary_school || "N/A"}
          />
          <DataLine
            title="Secondary School"
            value={data.education_levels.secondary_school || "N/A"}
          />
          <DataLine
            title="Higher Education"
            value={data.education_levels.higher_education || "N/A"}
          />
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Area</p>
            <p className="text-lg font-semibold">{data.region || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConstPreview;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstUpdate.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Select from "react-select";
import { areas } from "./data";
import {
  getConstituencyById,
  updateConstituency,
} from "../../utils/constituency";
import toast from "react-hot-toast";

const ConstUpdate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const { id } = useParams();

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region:", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getConstituencyById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Constituency data for update:", data);
        setName(data.name);
        setCode(data.code);
        setSelectedRegion(data.region);
        setPopulation(data.population);
        setVoters(data.voters);
        setArea(data.area);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [id]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const data = {
        name: name,
        code: code,
        region: selectedRegion,
        population: population,
        voters: voters,
        area: area,
      };

      const success = await updateConstituency(id, data);
      if (success) {
        console.log("Constituency updated successfully!");
        toast.success("Constituency updated successfully!");
        // Reset form fields
        setArea("");
        setCode("");
        setName("");
        setPopulation("");
        setSelectedRegion("");
        setVoters("");
      }
    } catch (error) {
      console.error("Error updating constituency: ", error);
      toast.error("Error updating constituency!");
    }
  };
  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Code
            </label>
            <input
              type="code"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Region
            </label>
            <Select
              options={areas}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Update Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\data.js
const areas = [
    { value: 'Shahdara', label: 'Shahdara' },
    { value: 'Harbanspura', label: 'Harbanspura' },
    { value: 'Nishtar Town', label: 'Nishtar Town' },
    { value: 'Gulberg', label: 'Gulberg' },
    { value: 'Model Town', label: 'Model Town' },
    { value: 'Faisal Town', label: 'Faisal Town' },
    { value: 'Ravi Town', label: 'Ravi Town' },
    { value: 'Aziz Bhatti Town', label: 'Aziz Bhatti Town' },
    { value: 'Data Gunj Buksh Town', label: 'Data Gunj Buksh Town' },
    { value: 'Walled City', label: 'Walled City' },
    { value: 'Shalimar', label: 'Shalimar' },
    { value: 'Wagah', label: 'Wagah' },
    { value: 'Lahore Cantt', label: 'Lahore Cantt' },
    { value: 'Raiwind', label: 'Raiwind' },
    { value: 'Township', label: 'Township' },
    { value: 'Samanabad', label: 'Samanabad' },
    { value: 'Iqbal Town', label: 'Iqbal Town' },
    { value: 'Green Town', label: 'Green Town' },
    { value: 'Sabzazar', label: 'Sabzazar' },
    { value: 'Johar Town', label: 'Johar Town' },
    { value: 'Wapda Town', label: 'Wapda Town' },
    { value: 'Shadman', label: 'Shadman' },
    { value: 'Kot Lakhpat', label: 'Kot Lakhpat' },
    { value: 'Ichra', label: 'Ichra' },
    { value: 'Barki', label: 'Barki' },
    { value: 'Bedian Road', label: 'Bedian Road' },
    { value: 'Kahna Nau', label: 'Kahna Nau' },
    { value: 'DHA Phase 1', label: 'DHA Phase 1' },
    { value: 'Nishtar Colony', label: 'Nishtar Colony' },
    { value: 'Garden Town', label: 'Garden Town' },
    { value: 'Sui Gas Housing Society', label: 'Sui Gas Housing Society' },
    { value: 'Punjab University', label: 'Punjab University' },
    { value: 'Wahdat Colony', label: 'Wahdat Colony' },
    { value: 'Lahore Airport', label: 'Lahore Airport' },
    { value: 'Gulshan-e-Ravi', label: 'Gulshan-e-Ravi' },
    { value: 'Baghbanpura', label: 'Baghbanpura' },
    { value: 'Jallo Park', label: 'Jallo Park' },
    { value: 'Shah Kamal', label: 'Shah Kamal' },
    { value: 'Raiwind Road', label: 'Raiwind Road' },
    { value: 'Thokar Niaz Baig', label: 'Thokar Niaz Baig' },
    { value: 'Multan Road', label: 'Multan Road' },
    { value: 'Chung', label: 'Chung' }
  ];
  
  const AssemblyOptions = [
    { value: "national", label: "National Assembly" },
    { value: "punjab", label: "Punjab Assembly" },
    { value: "sindh", label: "Sindh Assembly" },
    { value: "kpk", label: "KPK Assembly" },
    { value: "balochistan", label: "Balochistan Assembly" },
    // Add more options as needed
  ];
  export { areas, AssemblyOptions };
  

// File: \Side Projects\facecast-vote\src\Pages\Elections\CreateElection.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { createElections } from "../../utils/elections";
import {
  candidatesRef,
  constituenciesRef,
  partyRef,
} from "../../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../../utils/utilityFunctions";
import toast  from "react-hot-toast";
const CreateElection = () => {
  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState("");

  const [startDateTime, setStartDataTime] = useState("");
  const [endDateTime, setEndDateTime] = useState("");
  const [selectedAssembly, setSelectedAssembly] = useState(null);
  const [selectedConstituencies, setSelectedConstituencies] = useState([]);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [constituencyOptions, setConstituencyOptions] = useState([]);
  const [candidateOptions, setCandidateOptions] = useState([]);
  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const fieldsToRetrieve = ["name", "region", "assembly"];
        const filterField = "assembly";
        const filterValue = selectedAssembly.value; // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollection(
          constituenciesRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        setConstituencyOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", constituencyOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchConstituencies(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedAssembly]);
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const fieldsToRetrieve = ["name", "affiliation",];
        // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollectionWithOutFilter(
          candidatesRef,
          fieldsToRetrieve
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        // console.log("Formatted Party Data", formattedPartyData);
        setCandidateOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", candidateOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchCandidates(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedConstituencies]);

  const handleTypeChange = (event) => {
    setSelectedType(event.target.value);
  };

  const handleAssemblyChange = (selectedOptions) => {
    setSelectedAssembly(selectedOptions);
  };

  const handleConstituencyChange = (selectedOptions) => {
    setSelectedConstituencies(selectedOptions);
  };

  const handleCandidateChange = (index, selectedOptions) => {
    const updatedCandidates = [...selectedCandidates];
    updatedCandidates[index] = selectedOptions;
    setSelectedCandidates(updatedCandidates);
  };
  const AssemblyOptions = [
    { value: "National Assembly", label: "National Assembly" },
    { value: "Punjab", label: "Punjab Assembly" },
    { value: "Sindh", label: "Sindh Assembly" },
    // Add more options as needed
  ];

  const data = {
    title,
    selectedType,
    startDateTime,
    endDateTime,
    selectedAssembly,
    selectedConstituencies,
    selectedCandidates,
  };
  const getPartyImagebyName = async (name) => {
    try {
      const data = await fetchSpecificFieldsFromCollection(
        partyRef,
        ["symbol_url"],
        "name",
        name
      );

      console.log("Party Image Data", data);
      return data;
    } catch (error) {
      console.error("Error fetching party image:", error);
    }
  };
  useEffect(() => {
    const fetchData = async () => {
      const data = await getPartyImagebyName("Pakistan Tehreek-e-Insaf");
      console.log("Party Image Data", data);
    };
    fetchData();
  }, []);

  const electionData = {
    title: data.title,
    type: data.selectedType,
    start_at: data.startDateTime,
    end_at: data.endDateTime,
    created_at: new Date().toISOString(),
    constituencies: data.selectedConstituencies
      ? data.selectedConstituencies.map((constituency, index) => {
          return {
            const_id: constituency.value.id, // You may use a unique ID here
            name: constituency.value.name,
            candidates: data.selectedCandidates[index]
              ? data.selectedCandidates[index].map((candidate) => {
                  return {
                    id: candidate.value.id, // You may use a unique ID here
                    name: candidate.value.name,
                    partyImg: candidate.value.affiliation.symbol_url,
                  };
                })
              : [],
          };
        })
      : [],
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setLoading(true);
    setError(false); // Reset error state

    try {
      console.log("Election Data", electionData);
      const id = await createElections(electionData);
      console.log("Election Created Successfully", id);
      toast.success("Election created successfully!");
      
      // Clear form fields after successful submission
      setTitle("");
      setStartDataTime("");
      setEndDateTime("");
      setSelectedAssembly([]);
      setSelectedCandidates([]);
      setSelectedConstituencies([]);
      setSelectedType("");
    } catch (error) {
      setError(true);
      console.error("Error creating election:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Election
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Title
            </label>
            <input
              type="text"
              id="firstname"
              name="firstname"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            <Select
              options={AssemblyOptions}
              value={selectedAssembly}
              onChange={handleAssemblyChange}
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Start at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              name="date-time"
              value={startDateTime}
              onChange={(e) => setStartDataTime(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              End at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              value={endDateTime}
              onChange={(e) => setEndDateTime(e.target.value)}
              name="endtime"
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Type
            </label>
            <select
              name="type"
              id="type"
              className="w-full p-1 border border-gray-300 rounded-md"
              value={selectedType}
              onChange={handleTypeChange}
            >
              <option value="">Select an option</option>
              <option value="general">General</option>
              <option value="by-election">By-Election</option>
              {/* Add more options as needed */}
            </select>
          </div>
        </div>
        <div>
          <label htmlFor="name1" className="text-lg font-normal text-slate-900">
            Constituencies
          </label>
          <Select
            isMulti
            options={constituencyOptions}
            value={selectedConstituencies}
            onChange={handleConstituencyChange}
          />
        </div>
        {selectedConstituencies.map((constituency, index) => (
          <div key={index}>
            <label
              htmlFor={`candidates-${index}`}
              className="text-lg font-normal text-slate-900"
            >
              Candidates for {constituency.label}
            </label>
            <Select
              isMulti
              id={`candidates-${index}`}
              options={candidateOptions}
              onChange={(selectedOptions) =>
                handleCandidateChange(index, selectedOptions)
              }
            />
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              Create Election {loading ? "...." : ""} {error ? "(Error!)" : ""}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreateElection;

// File: \Side Projects\facecast-vote\src\Pages\Elections\EditModal.jsx
import React, { useState, useEffect } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { updateElection, getElectiontById } from "../../utils/elections";
const EditModal = ({ isOpen, closeModal, electionId }) => {
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");

  const [loading, setLoading] = useState(false);
  const [updated, setUpdated] = useState(false);
  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getElectiontById(electionId);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Election data for update:", data);

        setStartTime(data.start_at);
        setEndTime(data.end_at);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [electionId]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    try {
      const data = {
        start_at: startTime,
        end_at: endTime,
      };
      const success = await updateElection(electionId, data);
      if (success) {
        console.log("Election updated successfully");
        closeModal();
      }
    } catch (error) {
      console.error("Error updating election", error);
    } finally {
      setLoading(false);
    }
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Edit Schedule
              </Dialog.Title>
              <div className="mt-2">
                {updated ? (
                  <div>
                    <p className="text-lg text-regal-blue-700">
                      Election Updated Successfully.
                    </p>
                  </div>
                ) : (
                  <form>
                    <div className="flex flex-col gap-2">
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          Start Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={startTime}
                          onChange={(e) => setStartTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          End Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={endTime}
                          onChange={(e) => setEndTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>

                      <div className="flex justify-start py-4">
                        <button
                          onClick={handleSubmit}
                          className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                        >
                          <span className="font-semibold text-base">
                            {loading ? "Updating..." : "Update Election"}
                          </span>
                        </button>
                      </div>
                    </div>
                  </form>
                )}
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default EditModal;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionHome.jsx
import React, { useEffect, useState } from "react";
import EditModal from "./EditModal";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { getElections } from "../../utils/elections";
import { MdOutlineLocalPrintshop } from "react-icons/md";

const ElectionHome = () => {
  // Define data
  const [elections, setElections] = useState([]);
  const [isOpen, setIsOpen] = useState(false);

  const closeModal = () => {
    setIsOpen(false);
  };

  const [selectedElectionId, setSelectedElectionId] = useState(null);

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedElectionId(id);
  };
  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElections();
        console.log("data", data);
        if (data) {
          setElections(data);
        }
      } catch (error) {
        console.error("Error fetching documents:", error);
      }
    };
    fetchData();
  }, []);

  const generatePDF = (election) => {
    if (!election) return;

    // Get current date
    const currentDate = new Date();
    // Convert election date string to Date object
    const electionDate = new Date(election.election_date);

    // Create a new jsPDF instance with orientation 'p' for portrait mode
    const pdf = new jsPDF("p", "mm", "a4");

    // Add a header with Election Commission of Pakistan logo and title
    // Add announcement if current date is before election date

    // Add a title to the PDF
    pdf.setFontSize(18);
    pdf.setTextColor("#006600"); // Green color for title
    pdf.text("Election Data", 105, 20, { align: "center" });

    if (currentDate < electionDate) {
      // Additional text about the election announcement
      pdf.setFont("times", "normal");
      pdf.setFontSize(12);
      pdf.setTextColor("#000000"); // Black color for text
      pdf.text("Announcement:", 10, 40);
      pdf.text(
        "The Election Commission of Pakistan announces the details of the upcoming election.",
        10,
        50
      );
    }

    // Add election details to the PDF
    pdf.setFont("times", "normal");
    pdf.setFontSize(14);
    pdf.setTextColor("#000000"); // Black color for text
    pdf.text("Election Details:", 10, currentDate < electionDate ? 70 : 40);
    pdf.text(
      `Title: ${election.title}`,
      10,
      currentDate < electionDate ? 80 : 50
    );
    pdf.text(
      `Type: ${election.type}`,
      10,
      currentDate < electionDate ? 90 : 60
    );
    pdf.text(
      `Election Date: ${election.election_date}`,
      10,
      currentDate < electionDate ? 100 : 70
    );

    // Add constituencies and candidates to the PDF
    let yPosition = currentDate < electionDate ? 120 : 90; // Starting y-position for constituency data
    election.constituencies.forEach((constituency) => {
      pdf.setFont("times", "bold");
      pdf.setFontSize(16);
      pdf.text(`Constituency: ${constituency.name}`, 10, yPosition);
      yPosition += 10;
      constituency.candidates.forEach((candidate) => {
        pdf.setFont("times", "normal");
        pdf.setFontSize(14);
        pdf.text(`- ${candidate.name}`, 15, yPosition);
        yPosition += 5;
      });
      yPosition += 5; // Add spacing between constituencies
    });

    // Save the PDF file with a filename
    pdf.save("election_announcement_ecp.pdf");
  };

  // Save the PDF file with a filename

  // const difference = +new Date(election.end_at) - +new Date();
  const renderActions = (elections) => (
    <div className="flex items-center justify-between gap-4">
      <button
        className="bg-regal-blue-700 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-700/80"
        onClick={() => generatePDF(elections)} // Pass the current election item to generatePDF
      >
        <MdOutlineLocalPrintshop />
      </button>
      {
      +new Date(elections.end_at) - +new Date() > 0 ? (
        <button
          className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
          onClick={() => openModal(elections.id)} // Pass id to onEdit function
        >
          <FaRegEdit />
        </button>
      ) : null}
      <Link to={`${elections.id}`} className="text-green-600 hover:underline">
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
    </div>
  );

  return (
    <>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Elections Home
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <EditModal
        isOpen={isOpen}
        closeModal={closeModal}
        electionId={selectedElectionId}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Type
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Start datetime - End datetime
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Election Date
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          -
          {elections.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.title}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.type}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).getHours() +
                    ":" +
                    new Date(item.start_at).getMinutes() +
                    " - " +
                    new Date(item.end_at).getHours() +
                    ":" +
                    new Date(item.end_at).getMinutes()}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).toISOString().split("T")[0]}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};

export default ElectionHome;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionPreview.jsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { getElectiontById } from "../../utils/elections";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";

const ElectionPreview = () => {
  const { id } = useParams();
  const [election, setElection] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElectiontById(id);
        if (data) {
          setElection(data);
        }
      } catch (error) {
        console.error("Error fetching election:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!election) {
    return <div>No election found with the provided id.</div>;
  }

  return (
    <section>
      <ElectionDetails
        title={election.title}
        status={election.status}
        startdate={election.start_at}
        enddate={election.end_at}
        election_Date={election.election_date}
      />
      <Tabs>
        <TabList>
          <Tab>Constituencies</Tab>
          {election.constituencies.map((constituency) => (
            <Tab key={constituency.id}>{constituency.name}</Tab>
          ))}
        </TabList>

        <TabPanel>
          <ConstituenciesTabPanel election={election} />
        </TabPanel>
        {election.constituencies.map((constituency) => (
          <TabPanel key={constituency.id}>
            <CandidatesTabPanel candidates={constituency.candidates} />
          </TabPanel>
        ))}
      </Tabs>
    </section>
  );
};

const ElectionDetails = ({ title, startdate, enddate, election_Date }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <StatusBadge electionDate={election_Date} />
          <p className="text-sm text-gray-500">{election_Date}</p>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Start time</p>
            <p className="text-lg font-semibold">{startdate}</p>
          </div>
          <div>
            <p className="text-base font-medium">End time</p>
            <p className="text-lg font-semibold">{enddate}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatusBadge = ({ electionDate }) => {
  const currentDate = new Date().getDate();
  const electionDateObj = new Date(electionDate).getDate();
  console.log("election date obj", electionDateObj, "currentDAte", currentDate);

  if (electionDateObj < currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-blue-500 rounded-full uppercase font-semibold">
        Upcoming
      </span>
    );
  } else if (electionDateObj > currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-gray-500 rounded-full uppercase font-semibold">
        Offline
      </span>
    );
  } else {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-green-500 rounded-full uppercase font-semibold">
        Online
      </span>
    );
  }
};
const ConstituenciesTabPanel = ({ election }) => {
  return (
    <div>
      {election.constituencies.map((constituency) => (
        <div key={constituency.id}>
          <DataLine title={constituency.name} />
        </div>
      ))}
    </div>
  );
};

const CandidatesTabPanel = ({ candidates }) => {
  return (
    <div>
      {candidates.map((candidate) => (
        <div key={candidate.id}>
          <DataLine title="Candidate" value={candidate.name} />
        </div>
      ))}
    </div>
  );
};

export default ElectionPreview;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyCreate.jsx
import React, { useState } from "react";
import { createParty } from "../../utils/parties";
import { uploadImage } from "../../utils/globals";
import Alert from "../../Components/Alert";
import toast from "react-hot-toast";
const PartyCreate = () => {
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      name: name,
      acronym: acronym,
      leader: leader,
      ideology: ideology,
      founded: founded,
      headQuaters: headQuaters,
      manifesto: manifesto,
      email: email,
      phone: phone,
      address: address,
      symbol: symbol,
      symbol_url: "",
    };
    try {
      if (image) {
        const url = await uploadImage(image, "images/party");

        console.log(url);
        data.symbol_url = url;
        setImageUrl(url);
        console.log("Image URL:", url);
      }

      const docRef = await createParty(data);
      console.log("Party created with ID:", docRef);
      if (!docRef) {
        console.log("Error creating Party");
        setError("Error creating Party");
      }
      toast.success("Party Created Successfully");
    } catch (error) {
      console.log(error);

      toast.error("Error creating Party");
    }
    setLoading(false);
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyCreate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { getParties, deleteParty } from "../../utils/parties";

const PartyHome = () => {
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [alertMessage, setAlertMessage] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await getParties();
        setParties(response);
      } catch (error) {
        setError("Error Fetching Data");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleDelete = async (id) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this party?"
    );
    if (confirmed) {
      try {
        await deleteParty(id);
        setParties(parties.filter((party) => party.id !== id));
        setAlertMessage("Party deleted successfully");
      } catch (error) {
        setAlertMessage("Error deleting party");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
        onClick={() => handleDelete(id)}
      >
        Delete
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Party Home</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      {alertMessage && (
        <div
          className={`alert ${
            alertMessage.includes("successfully")
              ? "alert-success"
              : "alert-error"
          }`}
        >
          {alertMessage}
        </div>
      )}
      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div>{error}</div>
      ) : (
        <table className="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Reg Number
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Foundation Year
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Leader
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {parties.map((item, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.reg_number}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.name}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.founded}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.leader}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                  {renderActions(item.id)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PartyHome;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { getPartybyId, updateParty } from "../../utils/parties";
import { useParams } from "react-router-dom";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";
const PartyUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };
  const data = {
    name: name,
    acronym: acronym,
    leader: leader,
    ideology: ideology,
    founded: founded,
    headQuaters: headQuaters,
    manifesto: manifesto,
    email: email,
    phone: phone,
    address: address,
    symbol_url: "",
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const url = await uploadImage(image, "images/party");
      setSuccess("Image uploaded successfully");
      data.symbol_url = url;
      setImageUrl(url);
      console.log("Image URL:", url);
      const docRef = await updateParty(id, data);
      console.log("Party created with ID:", docRef);
      setSuccess("Party updated successfully");
      if (!docRef) {
        console.log("Error creating Party");
        toast.error("Error creating Party");
      }
    } catch (error) {
      console.log(error);
      setError("Error creating Party");
    }
    setLoading(false);
  };
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const partyData = await getPartybyId(id);
        console.log("Party Data:", partyData);
        setName(partyData.name);
        setAcronym(partyData.acronym);
        setLeader(partyData.leader);
        setIdeology(partyData.ideology);
        setFounded(partyData.founded);
        setHeadQuaters(partyData.headQuaters);
        setManifesto(partyData.manifesto);
        setEmail(partyData.email);
        setPhone(partyData.phone);
        setAddress(partyData.address);
        setSymbol(partyData.symbol);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [id]);

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyView.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { politicalParties } from "../../data/parties.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getPartybyId } from "../../utils/parties";
const PartyView = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const partyData = await getPartybyId(id);
        if (!partyData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", partyData);

        setData(partyData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <HeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Contact Information</Tab>
          <Tab>Sybmol</Tab>
        </TabList>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Overview
          </h4>
          <DataLine title="Acronym" value={data.acronym || "N/A"} />
          <DataLine title="Leader" value={data.leader || "N/A"} />
          <DataLine title="Foundation Year" value={data.founded || "N/A"} />
          <DataLine title="Ideology" value={data.ideology || "N/A"} />
          <DataLine title="Headquarters" value={data.headQuaters || "N/A"} />
          <DataLine title="Manifesto" value={data.manifesto || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Contact Information
          </h4>
          <DataLine title="Phone" value={data.phone || "N/A"} />
          <DataLine title="Email" value={data.email || "N/A"} />
          <DataLine title="Address" value={data.address || "N/A"} />
        </TabPanel>
        <TabPanel>
          <DataLine title="Party Symbol" value="" />
          <div>
            <img
              src={data.symbol_url}
              alt={data.name}
              className="w-40 h-40 rounded-sm"
            />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const HeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Registeration Number</p>
            <p className="text-lg font-semibold">{data.reg_number || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PartyView;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfilePage.jsx
import React, { useState, useEffect } from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import DataLine from "../../Components/DataLine";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail } from "../../utils/profile";
const ProfilePage = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []); // Add currUser as a dependency to useEffect
  return (
    <div class="">
      <div class="p-8 bg-white shadow mt-12 ">
        <div class="grid grid-cols-1 md:grid-cols-3 ">
          <div></div>
          <div class="relative">
            <div className="w-48 h-48 border-2 mx-auto rounded-full absolute inset-x-0 top-0 -mt-24 flex items-center justify-center text-regal-blue-50">
              {profile.image ? (
                <img
                  className="h-44 w-44 rounded-full"
                  src={profile.image}
                  alt={profile.fname + "Profile Image"}
                />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-24 w-24 bg-regal-blue-700 rounded-full"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
              )}
            </div>
          </div>
          <div></div>
        </div>

        <div class="mt-32 text-center border-b pb-10 max-w-xl mx-auto">
          <div class="bg-white overflow-hidden rounded-md border">
            <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
              <div class="sm:divide-y sm:divide-gray-200">
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Full name
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.fname + " " + profile.lname}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Email address
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.email}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Phone number
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.phone}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">CNIC</span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.cnic}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* <div class="mt-12 flex flex-col justify-center">
          <p class="text-gray-600 text-center font-light lg:px-16">
            An artist of considerable range, Ryan — the name taken by
            Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs and
            records all of his own music, giving it a warm, intimate feel with a
            solid groove structure. An artist of considerable range.
          </p>
          <button class="text-indigo-500 py-2 px-4  font-medium mt-4">
            Show more
          </button>
        </div> */}
      </div>
    </div>
  );
};

export default ProfilePage;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfileUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail, updateProfileByEmail } from "../../utils/profile";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";

const ProfileUpdate = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCnic] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
        setFname(userProfile.fname);
        setLname(userProfile.lname);
        setCnic(userProfile.cnic);
        setPhone(userProfile.phone);
        setImageUrl(userProfile.image);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");
  
    try {
      if (currUser) {
        let updatedProfile = {
          email: currUser.email,
          fname,
          lname,
          cnic,
          phone,
          image: imageUrl, // Use the existing image URL if no new image is uploaded
        };
  
        if (image) {
          // If a new image is uploaded, upload it and update the profile with the new image path
          const imagePath = await uploadImage(image, "/user/profile");
          console.log("Image Path", imagePath);
          updatedProfile = { ...updatedProfile, image: imagePath };
        }
  
        await updateProfileByEmail(currUser.email, updatedProfile);
        setSuccessMessage("Profile updated successfully!");
        toast.success("Profile updated successfully!");
      }
    } catch (error) {
      console.error("Error during profile update:", error);
      setErrorMessage("Failed to update profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div>
      <main>
        <section className="p-6 max-w-4xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Update Profile
          </h2>
          {errorMessage && <Alert message={errorMessage} type="error" />}
          {successMessage && <Alert message={successMessage} type="success" />}
          <form
            onSubmit={handleSubmit}
            className="mx-auto flex flex-col items-left gap-4"
          >
            <div>
              <label
                htmlFor="name"
                className="text-lg font-normal text-slate-900"
              >
                Image
              </label>
              <input
                type="file"
                id="image"
                name="image"
                accept="image/*"
                onChange={(e) => handleImageUpload(e)}
                
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="fname"
                  className="text-lg font-normal text-slate-900"
                >
                  First name
                </label>
                <input
                  type="text"
                  id="fname"
                  name="fname"
                  value={fname}
                  onChange={(e) => setFname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your first name"
                />
              </div>
              <div>
                <label
                  htmlFor="lname"
                  className="text-lg font-normal text-slate-900"
                >
                  Last name
                </label>
                <input
                  type="text"
                  id="lname"
                  name="lname"
                  value={lname}
                  onChange={(e) => setLname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your last name"
                />
              </div>
              <div>
                <label
                  htmlFor="cnic"
                  className="text-lg font-normal text-slate-900"
                >
                  ID number (CNIC)
                </label>
                <input
                  type="number"
                  id="cnic"
                  name="cnic"
                  value={cnic}
                  onChange={(e) => setCnic(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your CNIC number"
                />
              </div>
              <div>
                <label
                  htmlFor="phone"
                  className="text-lg font-normal text-slate-900"
                >
                  Phone
                </label>
                <input
                  type="phone"
                  id="phone"
                  name="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your phone number"
                />
              </div>
            </div>
            <div className="flex items-center justify-between mt-4">
              <button
                className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Updating..." : "Update"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default ProfileUpdate;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\AnnounceResult.js
export const AnnounceResults = (id) => {
  console.log("Election has ended. Results will be announced soon.", id);
};

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\Modal.jsx
import React, { useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { checkUserExists } from "../../utils/profile";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const Modal = ({ isOpen, closeModal, onUserExists }) => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const { currUser } = useAuth();
  const navigate = useNavigate();

  // Function to handle input change for email
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
    setError(""); // Clear any previous errors when user types in the email field
  };

  // Function to check if the user exists based on the input email
  const handleCheckUserExists = async () => {
    try {
      const exists = await checkUserExists(email, currUser);
      if (exists) {
        onUserExists(exists);
        toast.success("User exists. Please proceed.");
        closeModal();
        // User exists, navigate or perform desired action
        // For example, navigate to a specific page
        // navigate("/da/shboard");
      } else {
        // User does not exist, display an error message or take appropriate action
        toast.error("User does not exist. Please try again.");
      }
    } catch (error) {
      console.error("Error checking user existence:", error);
      toast.error("Error checking user existence. Please try again.");
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Please verify
              </Dialog.Title>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Please verify your identity to proceed
                </p>
              </div>
              <div className="mt-4">
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="mt-1 p-2 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  placeholder="Enter your email"
                  value={email}
                  onChange={handleEmailChange}
                />
              </div>
              {error && <p className="text-sm text-red-500 mt-2">{error}</p>}
              <div className="mt-4">
                <button
                  onClick={handleCheckUserExists}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                >
                  Verify
                </button>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default Modal;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteHome.jsx
import React, { useState, useEffect } from "react";
// import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import { getElections } from "../../utils/elections";
import CountdownTimer from "../../Components/CountdownTimer";
import { getProfileByEmail } from "../../utils/profile";
import Instructions from "../../Components/Instructions";
import { Link } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";


const VoteHome = () => {
  const { currUser } = useAuth();
  const [elections, setElections] = useState([]);
  const [userElection, setUserElection] = useState([]);
  const [timeRem, setTimeRem] = useState(0);

  // useEffect(() => {

  //   const fetchElections = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //       } else {
  //         console.log("No data found");
  //         return;
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   fetchElections();
  // }, [currUser]);

  // useEffect(() => {
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //         const filteredElections = elections.filter((election) => {
  //           const userArea = profile.address.area;

  //           return election.constituencies.some((constituency) => {
  //             const constituencyArea = constituency.name;
  //             return constituencyArea.includes(userArea);
  //           });
  //         });

  //         console.log("filteredElections", filteredElections);
  //         setUserElection(filteredElections); // Update userElection state with filtered elections
  //       } else {
  //         console.log("No data found");
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  //   elections && elections.map((election) => {
  //     console.log("constiturenceis", election.constituencies);
  //   });
  //   // console.log(elections.constituencies);
  // }, [currUser.email, setElections]); // Include currUser.email and setElections in the dependency array

  // useEffect(() => {
  //   console.log("elections", elections);
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       console.log("user election", elections);
  //       console.log("user election", profile.address.area);

  //       const filteredElections = elections.filter((election) =>
  //         election.constituencies.some(
  //           (constituency) => constituency.name === profile.address.area
  //         )
  //       );
  //       console.log("filteredElections", filteredElections);
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  // }, [elections]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const profile = await getProfileByEmail(currUser.email);
        if (!profile) {
          console.log("No profile found");
          return;
        }
        const electionsData = await getElections();
        if (!electionsData) {
          console.log("No election data found");
          return;
        }
        const currentDate = new Date();
        const userArea = profile.address.area;
        console.log("userArea", userArea);
        const filteredElections = electionsData.filter(
          (election) =>
            election.constituencies.some((constituency) =>
              constituency.name.includes(userArea)
            ) &&
            new Date(election.start_at) <= currentDate &&
            currentDate <= new Date(election.end_at)
        );
        console.log("filteredElections", filteredElections);
        setUserElection(filteredElections);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [currUser.email]);
  return (
    <section className="px-4 py-5 md:py-5">
      <div className="py-5">
        <h1 className="pb-4 text-xl font-medium">Instructions</h1>
        <Instructions
          stepNumber={1}
          description="User Needs to Vderify his identity to vote"
        />
        <Instructions
          stepNumber={2}
          description="You have only 30 seconds to cast a vote"
        />
        <Instructions
          stepNumber={4}
          description="You can only vote once for a candidate"
        />
        <Instructions
          stepNumber={3}
          description="You can only vote for the candidates in your area"
        />
      </div>
      <div className="py-3 border-b border-b-slate-300">
        <h1 className="pb-4 text-3xl font-medium">Elections in your Area</h1>
      </div>
      {userElection.length > 0 ? (
        userElection.map((election) => (
          <div key={election.id}>
            <Link to={`${election.id}`}>
              <ElectionsDetails
                title={election.title}
                end={election.end_at}
                electionType={election.type}
              />
            </Link>
          </div>
        ))
      ) : (
        <div className="flex items-center justify-center mt-32">
          <h1 className="text-2xl font-sans font-semibold select-none">
            No elections found For Your Area
          </h1>
        </div>
      )}
    </section>
  );
};


const ElectionsDetails = ({ title, end, electionType }) => {
  const announceResults = () => {
    console.log("Time's up!");
  };

  return (
    <div className="border-b border-b-stone-300 mb-0 py-4">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          {/* title */}
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResults}
          />
        </div>
      </div>
    </div>
  );
};

export default VoteHome;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteScreen.jsx
// VoteScreen.jsx
import React, { useEffect, useState } from "react";
import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import ElectionCard from "../../Components/ElectionCard";
// import { AnnounceResults } from "./AnnounceResult";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import { createUserVote, checkIfUserVoted } from "../../utils/userVotes";
import { getElectiontById } from "../../utils/elections";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import Modal from "./Modal";
import { faceio } from "../../config/faceio";
import { useDispatch, useSelector } from "react-redux";
import { decrementVoteAmount } from "../../config/Slices/walletSlice";
import toast from "react-hot-toast";

const VoteScreen = () => {
  const dispatch = useDispatch();
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  const { id } = useParams();
  const { currUser } = useAuth();
  const navigate = useNavigate();
  const [election, setElection] = useState({});
  const [constituency, setConstituency] = useState({});
  const [voted, setVoted] = useState(false);
  const [verified, setVerified] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [userExists, setUserExists] = useState(false);
  const [message, setMessage] = useState("");
  const [authError, setAuthError] = useState(false);
  const [loading, setLoading] = useState(true);

  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };

  const authenticateUser = async () => {
    try {
      const userData = await faceio.authenticate({
        locale: "auto", // Default user locale
      });
      console.log("Success, user identified", userData);
      setVerified(true);
      faceio.restartSession();
    } catch (error) {
      console.error("Error authenticating user:", error);
      setAuthError(true); // Set authentication error flag
    }
  };

  useEffect(() => {
    authenticateUser();
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      navigate("/voter");
    }, 60000); // 1 minute in milliseconds

    return () => clearTimeout(timer);
  }, [navigate]);

  const handleUserExists = (exists) => {
    if (exists) {
      setUserExists(exists);
      setVerified(true);
    } else {
      setVerified(false);
      setMessage(
        <div className="p-4 bg-red-100 rounded-md">
          Error Validating User Please Try Again.{" "}
          <button onClick={handleNavigateButtonClick} className="text-red-800">
            Go back
          </button>
        </div>
      );
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedElection = await getElectiontById(id);
        const userArea = "Lahore"; // Replace with actual user's area
        const matchingConstituency = fetchedElection.constituencies.find(
          (constituency) => constituency.name.includes(userArea)
        );
        console.log("matchingConstituency", matchingConstituency);
        setElection(fetchedElection);
        setConstituency(matchingConstituency);
      } catch (error) {
        console.error("Error fetching election:", error);
        setMessage("Error fetching election details, please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleNavigateButtonClick = () => {
    navigate("/voter");
  };

  useEffect(() => {
    const difference = +new Date(election.end_at) - +new Date();

    if (difference <= 0) {
      setMessage(
        <div className="p-4 bg-regal-blue-100 rounded-md">
          Election has ended. Results will be announced soon.{" "}
          <button
            onClick={handleNavigateButtonClick}
            className="text-regal-blue-600"
          >
            Go back
          </button>
        </div>
      );
    }
  }, [election, constituency]);

  useEffect(() => {
    const checkIfVoted = async () => {
      try {
        const ifVoted = await checkIfUserVoted(
          currUser.uid,
          constituency.const_id,
          election.id
        );
        setVoted(ifVoted);
        if (ifVoted) {
          setMessage("You have already voted");
        }
      } catch (error) {
        console.error("Error checking if user voted:", error);
        setMessage("Error checking vote status, please try again.");
      }
    };
    if (currUser && constituency.const_id && election.id) {
      checkIfVoted();
    }
  }, [currUser, constituency, election]);

  const handleOtherAuth = () => {
    openModal();
  };

  const handleVote = async (candidateId) => {
    console.log("voted for ", candidateId);
    console.log("user", currUser.uid);
    if (walletValue < 5) {
      toast.error("You don't have enough balance to vote");
      return;
    } else {
      try {
        if (!voted) {
          await createUserVote({
            candidate_id: candidateId,
            election_id: election.id,
            user_id: currUser.uid,
            constituency_id: constituency.const_id,
            dated: new Date().toISOString(),
          });
          dispatch(decrementVoteAmount());
          console.log("voted successfully");
          toast.success("Voted Successfully");
          setVoted(true);
        } else {
          console.log("user has already voted");
        }
      } catch (error) {
        console.log("error", error);
        toast.error("Error voting, please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      {isOpen && (
        <Modal
          isOpen={isOpen}
          closeModal={closeModal}
          onUserExists={handleUserExists}
        />
      )}
      {verified ? (
        <section className="md:px-8 py-4 px-4">
          <div>
            <ElectionsDetails
              title={election.title}
              end={election.end_at}
              electionType={election.type}
              id={id}
            />
          </div>

          <div className="py-4 flex items-center justify-between">
            <h3 className="text-lg font-normal">
              Date:{" "}
              <span className="font-semibold">
                {new Date(election.start_at).toLocaleString() || ""}
              </span>
            </h3>
          </div>
          {message.length > 0 && (
            <Alert
              message={message}
              type="success"
              dismissible={true}
              autoHideDelay={8000}
            />
          )}
          {voted && (
            <div className="bg-green-200 p-4 flex items-center rounded-md my-5">
              <p className="text-green-800 font-semibold">
                You have Voted Successfully
              </p>
            </div>
          )}
          <div className="grid px-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
            {constituency.candidates &&
              constituency.candidates.map((candidate) => (
                <ElectionCard
                  key={candidate.id}
                  candidate={candidate}
                  onVote={handleVote}
                  disabled={voted}
                />
              ))}
          </div>
        </section>
      ) : (
        <div className="bg-red-200 p-4 flex items-center rounded-md my-5">
          <p className="text-red-950 font-semibold">
            Auth failed try again later
          </p>
          <button className="mx-2" onClick={handleOtherAuth}>
            Other method
          </button>
        </div>
      )}
    </div>
  );
};

export default VoteScreen;

// File: \Side Projects\facecast-vote\src\Pages\AdminSettings.jsx
import React, { useState } from "react";
import { Switch } from "@headlessui/react";
import { updateDocument } from "../utils/globals"; //returns boolean true or false
import { useAuth } from "../context/AuthContext";
import { permissionRef } from "../config/firebase";
import { Link } from "react-router-dom";
import toast from "react-hot-toast";
import { FaRegHandPointRight } from "react-icons/fa6";

const AdminSettings = () => {
  const { PERMISSIONSID } = useAuth();
  const [signUp, setSignUp] = useState(true);
  const [complaints, setComplaints] = useState(true);
  const [voterLogin, setVoterLogin] = useState(true);

  const handleToggleSignUp = async () => {
    const newSignUp = !signUp;
    await updateDocument(permissionRef, PERMISSIONSID, {
      signUp: newSignUp,
    });

    setSignUp(newSignUp);
    console.log("signUp", newSignUp);
  };

  const handleToggleComplaints = async () => {
    const newComplaints = !complaints;
    await updateDocument(permissionRef, PERMISSIONSID, {
      complaints: newComplaints,
    });

    setComplaints(newComplaints);
    console.log("complaints", newComplaints);
  };

  const handleToggleVoterLogin = async () => {
    const newVoterLogin = !voterLogin;
    await updateDocument(permissionRef, PERMISSIONSID, {
      voterLogin: newVoterLogin,
    });

    setVoterLogin(newVoterLogin);
    console.log("voterLogin", newVoterLogin);
  };

  return (
    <div>
      <section>
        <h1 className="text-2xl font-semibold text-gray-800 py-4">Settings</h1>
        <hr className="py-2 border-t-2 border-gray-300" />
        <div>
          <h1 className="text-lg font-semibold text-gray-800 py-4">
            Permissions
          </h1>
          <DataLine
            value="Voter Registration"
            enabled={signUp}
            handleToggle={handleToggleSignUp}
          />
          <DataLine
            value="Complaints"
            enabled={complaints}
            handleToggle={handleToggleComplaints}
          />
          <DataLine
            value="Voter Login"
            enabled={voterLogin}
            handleToggle={handleToggleVoterLogin}
          />
          <DataLine1
            value="Seed Data"
            label={voterLogin}
            path="/admin/settings/seed-data"
          />
        </div>
      </section>
    </div>
  );
};
const DataLine1 = ({ value, label, path }) => {
  return (
    <div className="border-b border-gray-200 py-4 ">
      <Link to={path} className="text-regal-blue-600 flex justify-between">
        <span className=" text-gray-900">{value}</span>
        <label className="flex flex-row items-center gap-5">
          {label}
          <FaRegHandPointRight />
        </label>
      </Link>
    </div>
  );
};

const DataLine = ({ value, enabled, handleToggle }) => {
  return (
    <div className="flex border-b border-gray-200 py-4 justify-between">
      <span className="text-gray-900">{value}</span>
      <Switch
        checked={enabled}
        onChange={handleToggle}
        className={`group inline-flex h-6 w-11 items-center rounded-full transition duration-300 ease-in-out ${
          enabled
            ? "bg-regal-blue-500" // Apply this color when enabled
            : "bg-gray-200" // Apply this color when not enabled
        }`}
      >
        <span className="sr-only">Enable/Disable</span>
        <span
          className={`${
            enabled
              ? "translate-x-5 bg-regal-blue-800"
              : "translate-x-1 bg-white"
          } inline-block w-5 h-5 transform pointer-events-none rounded-full transition ease-in-out duration-200`}
        />
      </Switch>
    </div>
  );
};

export default AdminSettings;

// File: \Side Projects\facecast-vote\src\Pages\ComplaintModal.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { SlEnvolopeLetter } from "react-icons/sl";
import { RiPagesLine } from "react-icons/ri";
import { complainRef, permissionRef } from "../config/firebase";
import { createDocument, getCollectionById } from "../utils/globals";
import { useAuth } from "../context/AuthContext";
const ComplaintModal = ({ isOpen, closeModal }) => {
  const { PERMISSIONSID } = useAuth();
  const [ComplaintsAllowed, setComplaintsAllowed] = useState(false);
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [subject, setSubject] = useState("");
  const [message, setMessage] = useState("");

  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  //   const [password, setPassword] = useState("");
  //   const { currUser } = useAuth();
  useEffect(() => {
    const fetchPermissions = async () => {
      const permissions = await getCollectionById(permissionRef, PERMISSIONSID);
      if (permissions) {
        setComplaintsAllowed(permissions.complaints);
      }
    };
    fetchPermissions();
  }, []);

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      email,
      name,
      subject,
      message,
      status: "pending",
      remarks: "",
    };
    try {
      const submit = await createDocument(complainRef, data);
      if (submit) {
        setEmail("");
        setName("");
        setSubject("");
        setMessage("");
        setSubmitted(true);
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };
  const handleNewComplaint = () => {
    setSubmitted(false);
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                File a Complaint
              </Dialog.Title>
              {ComplaintsAllowed ? (
                <div className="mt-2">
                  {submitted ? (
                    <div className="flex flex-col py-4 font-semibold text-lg">
                      <h1>Complaint Submitted Successfully</h1>
                      <button
                        onClick={handleNewComplaint}
                        className="text-regal-blue-700 text-left py-2"
                      >
                        Another complaint?
                      </button>
                    </div>
                  ) : (
                    <form onSubmit={handleOnSubmit}>
                      <div className="flex flex-col gap-2">
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Name
                          </label>
                          <input
                            type="text"
                            id="name"
                            name="name"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            email
                          </label>
                          <input
                            type="email"
                            id="email"
                            name="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Subject
                          </label>
                          <input
                            type="text"
                            id="subject"
                            name="subject"
                            value={subject}
                            onChange={(e) => setSubject(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          />
                        </div>
                        <div>
                          <label
                            htmlFor="name1"
                            className="text-lg font-normal text-slate-900"
                          >
                            Message
                          </label>
                          <textarea
                            rows="4"
                            cols="50"
                            name="message"
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            className="w-full p-1 border border-gray-300 rounded-md"
                          ></textarea>
                        </div>

                        <div className="flex justify-start py-4">
                          <button
                            // onClick={closeModal}
                            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                          >
                            <span className="font-semibold text-base">
                              Register Complaint
                            </span>
                          </button>
                        </div>
                      </div>
                    </form>
                  )}
                </div>
              ) : (
                <div className="bg-red-200 p-2 mt-4 flex items-center rounded-md">
                  <p className="text-red-800 font-semibold">
                    Complaints are temproarily Closed
                  </p>
                </div>
              )}
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ComplaintModal;

// File: \Side Projects\facecast-vote\src\Pages\Results.jsx
import React, { useState, useEffect } from "react";
import { getCollections } from "../utils/globals";
import { resultsRef } from "../config/firebase";
import { MdPrint } from "react-icons/md";
import toast from "react-hot-toast";
import { generateResultPdf } from "../utils/pdgGen";

const Results = () => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // Add error state

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const fetchedResults = await getCollections(resultsRef);
        console.log("Fetched Results: ", fetchedResults); // Debug log
        setResults(fetchedResults);
        setLoading(false);
      } catch (error) {
        console.log("Error fetching results", error);
        setError("Error fetching results");
        setLoading(false);
      }
    };
    fetchResults();
  }, []);

  const asyncGeneratePDF = async (result) => {
    console.log("Generating PDF for", result);
    const value = await generateResultPdf(result);
    if (value === true) {
      toast.success("PDF generated successfully");
    } else {
      toast.error("Error generating PDF");
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <section>
        <h1 className="text-3xl font-semibold text-gray-800 py-6">Results</h1>
        <hr className="py-4 border-t-2 border-gray-300" />
        {results.length > 0 ? (
          results.map((result) => (
            <DataLine1
              key={result.id}
              value={result.electionTitle}
              result={result}
              onPrintClick={asyncGeneratePDF}
            />
          ))
        ) : (
          <p>No results available</p>
        )}
      </section>
    </div>
  );
};

const DataLine1 = ({ value, result, onPrintClick }) => {
  return (
    <div className="border-b border-gray-200 py-4 flex justify-between">
      <span className="text-gray-900 text-lg font-medium">{value}</span>
      <button
        onClick={() => onPrintClick(result)}
        className="flex flex-row items-center gap-5"
      >
        <MdPrint className="h-6 w-6" />
      </button>
    </div>
  );
};

export default Results;

// File: \Side Projects\facecast-vote\src\Pages\SeedData.jsx
import React from "react";
import Select from "react-select";
import Instructions from "../Components/Instructions";
import { useEffect, useState } from "react";
import { electionsRef, usersRef } from "../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../utils/utilityFunctions";
import { writeBatch, addDoc } from "firebase/firestore";
import { db, userVoteRef } from "../config/firebase";
import toast from "react-hot-toast";

const SeedData = () => {
  const [selectedElection, setSelectedElection] = useState(null);
  const [options, setOptions] = useState([]);
  const [constituencies, setConstituencies] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const [users, setUsers] = useState([]);
  const [elections, setElections] = useState([]);
  const [seeding, setSeeding] = useState(false);
  const [batchSize, setBatchSize] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["constituencies", "title"];
        const Data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          electionsRef,
          fieldsToRetrieve
        );
        console.log("Data new", Data); // Update constituencies state
        const formattedData = Data.map((item) => ({
          value: item,
          label: item.title,
        }));

        console.log("Formatted  Data", formattedData);
        // setElections(Data);
        setOptions(formattedData);
        console.log("Election Options", options);
      } catch (error) {
        console.error("Error fetching :", error);
      }
    };
    console.log("Selected Assembly", selectedElection);

    fetchData();
  }, []);
  const handleElectionChange = (selectedOption) => {
    console.log("Selected Election", selectedOption.value.id);
    setElections(selectedOption.value.id);
    setSelectedElection(selectedOption.value);
    // Call fetchConstituencies here
    fetchConstituencies(selectedOption.value);
  };

  const fetchConstituencies = async (selectedOption) => {
    // console.log("Selected Option", elections[0].id);
    // console.log("Selected Option", selectedOption.value);
    if (selectedOption) {
      // Update constituencies state
      setConstituencies(selectedOption.constituencies);
      getCandidates(selectedOption.constituencies);
      console.log("Selected Constituencies", selectedOption.constituencies);
    }
  };

  const getCandidates = async (constituencies) => {
    const allCandidates = constituencies.flatMap((constituency) =>
      constituency.candidates.map((candidate) => ({
        id: candidate.id,
        name: candidate.name,
      }))
    );

    // Update candidates state
    setCandidates(allCandidates);
    console.log("Selected Candidates", allCandidates);
  };
  

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const filterField = "roles";
        const filterValue = "voter";
        const fieldsToRetrieve = ["roles"];

        const Data = await fetchSpecificFieldsFromCollection(
          usersRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new users", Data); // Update constituencies state
        const formattedData = Data.map((item) => ({
          value: item,
          label: item.roles,
        }));
        console.log("Formatted  Data Users", formattedData);
        setUsers(Data);
      } catch (error) {
        console.error("Error fetching :", error);
      }
    };
    fetchUsers();
  }, []);

  const generaterandomConsitituency = () => {
    const randomConstituency =
      constituencies[Math.floor(Math.random() * constituencies.length)];
    return randomConstituency.const_id;
  };
  const generaterandomCandidate = () => {
    const randomCandidate =
      candidates[Math.floor(Math.random() * candidates.length)];
    return randomCandidate.id;
  };
  //   const generateRandomUserData = () => {
  //     const randomUser = users[Math.floor(Math.random() * users.length)];
  //     return randomUser.id;
  //   };
  const votes = [];
  const generateRandomVote = () => {
    console.log("Election", elections);
    for (let i = 0; i < 250; i++) {
      // const electionId = generateRandomId(12); // Adjust the length as needed
      const vote = {
        election_id: elections,
        candidate_id: generaterandomCandidate(),
        constituency_id: generaterandomConsitituency(),
        user_id: generateRandomId(12),
      };
      votes.push(vote);
    }
  };
  let percentage;
  const seedingData7 = async () => {
    try {
      let batch = writeBatch(db);
     
      const totalVotes = votes.length;
      let progress = 0;

      for (let i = 0; i < totalVotes; i += batchSize) {
        const batchVotes = votes.slice(i, i + batchSize);
        batchVotes.forEach((data) => {
          const docRef = addDoc(userVoteRef, data);
        });

        await batch.commit();
        progress += batchVotes.length;

        // Calculate progress percentage
        percentage = (progress / totalVotes) * 100;
        console.log(`Seeding progress: ${percentage.toFixed(2)}%`);

        // Reset batch for next iteration
        batch = writeBatch(db);
      }

      console.log("Data Seeding Successful");
      toast.success("Data Seeding Successful");
    } catch (error) {
      console.log(error);
      toast.error("Data Seeding Failed");
    }
  };

  const generateRandomId = (length) => {
    let id = "";
    const characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
      id += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return id;
  };
  const handleSeedData = () => {
    console.log("Constituency", generaterandomConsitituency());
    console.log("Candidate", generaterandomCandidate());
    // console.log("user", generateRandomUserData());
    generateRandomVote();
    setSeeding(true);
    seedingData7();
    setSeeding(false);
  };

  return (
    <div>
      <main>
        <section className="py-6 max-w-6xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-2xl mb-6 text-slate-900">
            Seed Sample Data
          </h2>
          <div className="">
            <h1 className="pb-4 text-xl font-medium">Instructions</h1>
            <Instructions
              stepNumber={1}
              description="This Feature is only for testing purposes."
            />
            <Instructions
              stepNumber={2}
              description="Will be used to seed sample data into the database. to test possible application scenarios."
            />
          </div>
          <div className="mt-6 grid  grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4 border-t-2 py-4 border-gray-200">
            <div className="flex justify-between">
              <label
                htmlFor="name1"
                className="text-lg font-normal text-slate-900"
              >
                Select Election
              </label>
              <Select
                className="w-60"
                options={options}
                value={selectedElection}
                onChange={handleElectionChange}
              />
            </div>
            <div className="">
              <label
                htmlFor="name1"
                className="text-lg font-normal text-slate-900"
              >
                Total Votes
              </label>
              <input
                type="number"
                id="batch"
                name="batch"
                value={batchSize}
                onChange={(e) => setBatchSize(e.target.value)}
                className="w-60 mx-6 p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <button
                onClick={handleSeedData}
                className="bg-regal-blue-500 hover:bg-regal-blue-700 text-white font-bold py-2 px-4 rounded"
              >
                {seeding
                  ? `Seeding Data... ${percentage.toFixed(2)}%`
                  : "Seed Data"}
              </button>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default SeedData;

// File: \Side Projects\facecast-vote\src\Pages\SiteHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { getCollections } from "../utils/globals";
import { electionsRef, candidatesRef, partyRef } from "../config/firebase";
import { generatePDF, generatePDF1 } from "../utils/pdgGen";
import Select from "react-select";
import { IoMdArrowDropright } from "react-icons/io";
import HeroImage from "../assets/HeroImage3.jpg";

const VoterLayout = () => {
  const { currUser } = useAuth();
  const [party, setParty] = useState([]);
  const [titles, setTitles] = useState([]);
  const [candidate, setCandidate] = useState([]);
  const [selectedElection, setSelectedElection] = useState(null);
  const [selectedCandidate, setSelectedCandidate] = useState(null);
  const [isOpen, setIsOpen] = useState(false);

  const getElectionTitles = async () => {
    try {
      const electionData = await getCollections(electionsRef);
      const titlesArray = electionData.map((election) => ({
        value: election,
        label: election.title,
      }));
      setTitles(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };
  const getParties = async () => {
    try {
      const partyData = await getCollections(partyRef);
      console.log("partyData", partyData);
      setParty(partyData);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };
  const getCandidaetsTitles = async () => {
    try {
      const candidateData = await getCollections(candidatesRef);
      const titlesArray = candidateData.map((data) => ({
        value: data,
        label: data.name,
      }));

      setCandidate(titlesArray);
    } catch (error) {
      console.error("Error fetching election data:", error);
    }
  };

  useEffect(() => {
    getElectionTitles();
  }, []);
  useEffect(() => {
    getCandidaetsTitles();
  }, []);
  useEffect(() => {
    getParties();
  }, []);
  const advantages = [
    {
      id: 1,
      title: "Accessibility",
    },
    {
      id: 2,
      title: "Convenience",
    },
    {
      id: 3,
      title: "Cost-effectiveness",
    },
    {
      id: 4,
      title: "Accuracy and Security",
    },
    {
      id: 5,
      title: "Increased Voter Engagement",
    },
    {
      id: 6,
      title: "Efficiency in Vote Counting",
    },
    {
      id: 7,
      title: "Flexibility in Voting Hours",
    },
    {
      id: 8,
      title: "Enhanced Transparency",
    },
  ];
  return (
    <div>
      <div className=" max-w-6xl mx-auto">
        <section class="text-gray-600 body-font">
          <div class="container mx-auto flex px-5 py-24 md:flex-row flex-col items-center">
            <div class="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
              <h1 class="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">
                Pakistan's first online voting system
              </h1>
              <p class="mb-8 leading-relaxed">
                Vote from anywhere in the world, your right is just a click away
                you can cange pakistan. Cote now to make a better tomorrow
              </p>
              <div class="flex w-full md:justify-start justify-center items-end">
                <button class="inline-flex text-white bg-regal-blue-700 border-0 py-2 px-6 focus:outline-none hover:bg-regal-blue-800 rounded text-lg">
                  <Link to="/signin">Get Started</Link>
                </button>
              </div>
            </div>
            <div class="lg:max-w-lg lg:w-full md:w-1/2 w-5/6">
              <img
                class="object-cover object-center rounded"
                alt="hero"
                src={HeroImage}
              />
              {/* <img class="object-cover object-center rounded" alt="hero" src="https://dummyimage.com/720x600"> */}
            </div>
          </div>
        </section>
        {/*  */}
        <hr className=" border-2 " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="text-center mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium text-center title-font text-gray-900 mb-4">
                Advantages of an Online Voting Portal
              </h1>
              <p class="text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto">
                Discover how these advantages transform traditional voting
                methods, making democracy more inclusive, efficient, and
                environmentally friendly.
              </p>
            </div>
            <div class="flex flex-wrap lg:w-4/5 sm:mx-auto sm:mb-2 -mx-2">
              {advantages &&
                advantages.map((data) => (
                  <div key={data.id} class="p-2 sm:w-1/2 w-full">
                    <div class="bg-gray-100 rounded flex p-4 h-full items-center">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="3"
                        class="text-regal-blue-500 w-6 h-6 flex-shrink-0 mr-4"
                        viewBox="0 0 24 24"
                      >
                        <path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path>
                        <path d="M22 4L12 14.01l-3-3"></path>
                      </svg>
                      <span class="title-font font-medium">
                        {data.title || "Advantage"}
                      </span>
                    </div>
                  </div>
                ))}
            </div>
            <button class="flex mx-auto mt-16 text-white bg-regal-blue-700 border-0 py-2 px-8 focus:outline-none hover:bg-regal-blue-800 rounded text-lg">
              <Link to="/signin"> Vote Now</Link>
            </button>
          </div>
        </section>
        <hr className=" border-2  " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="text-center mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium text-center title-font text-gray-900 mb-4">
                A Great Leader once said
              </h1>
            </div>
            <div class="xl:w-1/2 mx-auto text-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                class="inline-block w-8 h-8 text-gray-400 mb-8"
                viewBox="0 0 975.036 975.036"
              >
                <path d="M925.036 57.197h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.399 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l36 76c11.6 24.399 40.3 35.1 65.1 24.399 66.2-28.6 122.101-64.8 167.7-108.8 55.601-53.7 93.7-114.3 114.3-181.9 20.601-67.6 30.9-159.8 30.9-276.8v-239c0-27.599-22.401-50-50-50zM106.036 913.497c65.4-28.5 121-64.699 166.9-108.6 56.1-53.7 94.4-114.1 115-181.2 20.6-67.1 30.899-159.6 30.899-277.5v-239c0-27.6-22.399-50-50-50h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.4 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l35.9 75.8c11.601 24.399 40.501 35.2 65.301 24.399z"></path>
              </svg>
              <p class="leading-relaxed text-lg">
                The first thing that I want to tell you is this, that you should
                not be influenced by any political pressure, by any political
                party or individual politician. If you want to raise the
                prestige and greatness of Pakistan, you must not fall a victim
                to any pressure, but do your duty as servants to the people and
                the State, fearlessly and honestly. You should have no hand in
                supporting this political party or that political party, this
                political leader or that political leader – this is not your
                business. Whichever government is formed according to the
                constitution, and whoever happens to be the prime minister or
                minister coming into power in the ordinary constructional
                course, your duty is not only to serve that government loyally
                and faithfully, but, at the same time, fearlessly, maintaining
                your high reputation, your prestige, your honour and the
                integrity of your service. If you will start with that
                determination, you will make a great contribution to the
                building up of Pakistan, of your conception and our dream – a
                glorious State and one of the greatest nations in the world.
              </p>
              <span class="inline-block h-1 w-10 rounded bg-regal-blue-700 mt-8 mb-6"></span>
              <h2 class="text-gray-900 font-medium title-font tracking-wider text-sm">
                Muhammad Ali Jinnah
              </h2>
              <p class="text-gray-500">Founder of Pakistan</p>
            </div>
          </div>
        </section>
        {/*  */}
        <hr className="border-2 " />
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-24 mx-auto">
            <div class="flex flex-col text-center w-full mb-20">
              <h1 class="sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900">
                Registered Political Parties
              </h1>
            </div>
            <section className="max-w-6xl mx-auto">
              <div class=" flex flex-wrap -m-4">
                {party &&
                  party.map((data) => (
                    <div class="lg:w-1/3 sm:w-1/2 p-4">
                      <div class="flex relative">
                        <div className="bg-stone-900">
                          <img
                            alt="gallery"
                            class="absolute inset-0 min-w-60 max-w-full h-full object-cover object-center "
                            src={
                              data.symbol_url
                                ? data.symbol_url
                                : "https://dummyimage.com/600x360"
                            }
                          />
                        </div>
                        <div class="px-8 py-10 relative z-10 w-full border-4 border-gray-200 bg-white opacity-0 hover:opacity-100 rounded-md">
                          <h2 class="tracking-widest text-sm title-font font-medium text-regal-blue-500 mb-1">
                            {data.leader || "Party Leader"}
                          </h2>
                          <h1 class="title-font text-lg font-medium text-gray-900 mb-3">
                            {data.name || "Party Name"}
                          </h1>
                          <p class="leading-relaxed">
                            {data.manifesto || "Manifesto"}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </section>
          </div>
        </section>

        {/* <Footer /> */}
      </div>
      <div className="mt-5 bg-regal-blue-700 w-full">
        <section class="text-gray-600 body-font">
          <div class="container px-5 py-16 mx-auto">
            <div class="lg:w-2/3 flex flex-col sm:flex-row sm:items-center items-start mx-auto">
              <h1 class="flex-grow sm:pr-16 text-2xl font-medium title-font text-gray-100">
                Submit complaints hassle-free, ensuring your voice is heard
                promptly.
              </h1>
              <button class="flex-shrink-0 text-white bg-regal-blue-900 border-0 py-2 px-8 focus:outline-none hover:bg-regal-blue-900/80 rounded text-lg mt-10 sm:mt-0">
                <Link to="signin">Submit Complaints</Link>
              </button>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
};

export default VoterLayout;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandCreate.jsx
import React, { useEffect, useState } from "react";
import Select from "react-select";
import { MajorAreasOfPakistan } from "../Constituency/AreasSelect";
import { religions, languages, affiliations, genders } from "./data";
import Alert from "../../Components/Alert";
import { createCandidate } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import toast from "react-hot-toast";
const CandCreate = () => {
  const [name, setName] = useState("");
  // const [age, setAge] = useState("");
  const [dob, setDob] = useState("");
  const [gender, setGender] = useState("");
  const [constituency, setConstituency] = useState("");
  const [education, setEducation] = useState([
    { degree: "", institute: "", year: "" },
  ]);
  const [religion, setReligion] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [address, setAddress] = useState({
    houseNo: "",
    area: "",
    city: "",
    province: "",
  });
  const [assets, setAssets] = useState({});
  const [affiliation, setAffiliation] = useState([]); //party
  const [language, setLanguage] = useState("");
  const [loading, setLoading] = useState(false);
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");

  const [options, setOptions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Data fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching:", error);
      }
    };

    fetchData();
  }, []);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleLanguageChange = (selectedOption) => {
    console.log(selectedOption.value);
    setLanguage(selectedOption.value);
  };
  const handleGenderChange = (selectedOption) => {
    console.log(selectedOption.value);
    setGender(selectedOption.value);
  };

  const handleAffiliationChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAffiliation(selectedOption.value);
  };
  const handleHouseNumberChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, houseNo: e.target.value });
  };
  const handleAreaChange = (selectedOption) => {
    console.log(selectedOption.value);
    setAddress({ ...address, area: selectedOption.value });
  };
  const handleCityChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, city: e.target.value });
  };
  const handleProvinceChange = (e) => {
    console.log(e.target.value);
    setAddress({ ...address, province: e.target.value });
  };

  const handleAddEducation = () => {
    setEducation([...education, { degree: "", institute: "", year: "" }]);
  };

  const handleRemoveEducation = (indexToRemove) => {
    setEducation(education.filter((_, index) => index !== indexToRemove));
  };

  const handleDegreeChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].degree = e.target.value;
    setEducation(updatedEducation);
  };

  const handleInstitutionChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].institute = e.target.value;
    setEducation(updatedEducation);
  };

  const handleYearChange = (e, index) => {
    const updatedEducation = [...education];
    updatedEducation[index].year = e.target.value;
    setEducation(updatedEducation);
  };

  const handleReligionChange = (selectedOption) => {
    console.log(selectedOption.value);
    setReligion(selectedOption.value);
  };
  const customStyles = {
    container: (provided) => ({
      ...provided,
      position: "relative", // Ensure the container has a relative position
    }),
  };

  const [message, setMessage] = useState("");
  const [errMessage, setErrMessage] = useState("");
  // useEffect(() => {});
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    console.log("first");
    if (
      !name ||
      // !age ||
      !dob ||
      !gender ||
      !constituency ||
      !education ||
      !religion ||
      !phone ||
      !email ||
      !manifesto ||
      !address ||
      !assets ||
      !affiliation ||
      !language ||
      !image
    ) {
      setErrMessage("Please fill in all fields");
      setLoading(false);
      return;
    }
    console.log("first");
    const data = {
      name: name,
      dob: dob,
      gender: gender,
      constituency: constituency,
      education: education ? education : {},
      religion: religion,
      phone: phone,
      email: email,
      manifesto: manifesto,
      address: address ? address : {},
      assets: assets,
      affiliation: affiliation,
      language: language,
      imageURL: "",
    };
    try {
      console.log("first in try");
      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      if (!imagePath) {
        setErrMessage("Error Uploading Image");
        setLoading(false);
        return;
      }
      data.imageURL = imagePath;

      const candidate = await createCandidate(data);
      console.log("Candidate created with ID:", candidate);
      if (candidate) {
        console.log("first in try success");
        toast.success("Candidate Created Successfully");
        // setMessage("Candidate Created Successfully");
      } else {
        setErrMessage("Error Creating Candidate");
        toast.error("Error Creating Candidate");
      }
    } catch (error) {
      console.log("Error creating candidate", error);
      // setErrMessage("Error Creating Candidate");
      console.log("first in try catch");
      toast.error("Error Creating Candidate");
    } finally {
      console.log("first in try finally");
      setLoading(false);
    }
  };
  return (
    <section>
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {errMessage && (
        <Alert
          message={errMessage}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />

      <form onSubmit={handleSubmit}>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Personal Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={(e) => handleImageUpload(e)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Gender
            </label>
            <Select
              options={genders}
              value={gender}
              onChange={handleGenderChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Date of Birth
            </label>
            <input
              type="date"
              id="dob"
              name="dob"
              value={dob}
              onChange={(e) => setDob(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="dob" className="text-lg font-normal text-slate-900">
              Relegion
            </label>
            <Select
              options={religions}
              value={religion}
              onChange={handleReligionChange}
              className="relative z-0"
            />
          </div>

          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Languages Spoken
            </label>
            <Select
              options={languages}
              value={language}
              onChange={handleLanguageChange}
              styles={customStyles}
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">Address</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              House Number
            </label>
            <input
              type="text"
              id="hno"
              name="hno"
              value={address.houseNo}
              onChange={handleHouseNumberChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label htmlFor="hno" className="text-lg font-normal text-slate-900">
              Area
            </label>
            <Select
              options={MajorAreasOfPakistan}
              value={address.area}
              onChange={handleAreaChange}
              styles={customStyles}
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={address.city}
              onChange={handleCityChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={address.province}
              onChange={handleProvinceChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Education Info
        </h2>
        {education.map((edu, index) => (
          <div
            key={index}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          >
            <div>
              <label
                htmlFor={`degree-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Degree
              </label>
              <input
                type="text"
                id={`degree-${index}`}
                name={`degree-${index}`}
                value={edu.degree}
                onChange={(e) => handleDegreeChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`institute-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Institute
              </label>
              <input
                type="text"
                id={`institute-${index}`}
                name={`institute-${index}`}
                value={edu.institute}
                onChange={(e) => handleInstitutionChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <label
                htmlFor={`year-${index}`}
                className="text-lg font-normal text-slate-900"
              >
                Year
              </label>
              <input
                type="date"
                id={`year-${index}`}
                name={`year-${index}`}
                value={edu.year}
                onChange={(e) => handleYearChange(e, index)}
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            {index > 0 && (
              <div className="flex justify-start py-4">
                <button
                  className="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600"
                  onClick={() => handleRemoveEducation(index)}
                >
                  <span className="font-semibold text-base">Remove</span>
                </button>
              </div>
            )}
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button
            className="bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600"
            onClick={handleAddEducation}
          >
            <span className="font-semibold text-base">Add Education</span>
          </button>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Political Info
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="const"
              className="text-lg font-normal text-slate-900"
            >
              Constituency
            </label>
            <input
              type="text"
              id="const"
              name="const"
              value={constituency}
              onChange={(e) => setConstituency(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.label}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 py-4">
          Financial Information
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label
              htmlFor="institute"
              className="text-lg font-normal text-slate-900"
            >
              Total Assets Amount
            </label>
            <input
              type="number"
              id="total"
              name="total"
              value={assets}
              className="w-full p-1 border border-gray-300 rounded-md"
              onChange={(e) => setAssets(e.target.value)}
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating Candidate..." : "Create Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandCreate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew, MdDelete } from "react-icons/md";
import { getCandidates, deleteCandidate } from "../../utils/candidates";

const CandHome = () => {
  const [candidates, setCandidates] = useState([]);

  useEffect(() => {
    const fetchCandidates = async () => {
      const data = await getCandidates();
      setCandidates(data);
    };
    fetchCandidates();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this candidate?"
    );
    if (confirmDelete) {
      await deleteCandidate(id);
      setCandidates(candidates.filter((candidate) => candidate.id !== id));
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <MdDelete />
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">
        Candidate Home
      </h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email/Phone
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Affiliation
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {candidates.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.email} / {item.phone}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.affiliation.name || " "}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CandHome;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import Alert from "../../Components/Alert";
import { getCandidatesById } from "../../utils/candidates";
import DataLine from "../../Components/DataLine";
const CandPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const candData = await getCandidatesById(id);
        if (!candData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", candData);

        setData(candData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      {message && (
        <Alert
          message={message}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name || "N/A"} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Education</Tab>
          <Tab>Assets</Tab>
        </TabList>

        <TabPanel>
          <div>
            <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
              Overview
            </h4>

            <DataLine
              title="Affiliation"
              value={data.affiliation.name || "N/A"}
            />
            <div>
              <img
                src={data.affiliation.symbol_url}
                alt={data.name}
                className="w-16 h-16 rounded-full mr-4"
              />
            </div>
            <DataLine title="Email" value={data.email || "N/A"} />
            <DataLine title="Phone" value={data.phone || "N/A"} />
            <DataLine
              title="Address"
              value={
                `${data.address.houseNo} ${data.address.area} ${data.address.city} ${data.address.province}` ||
                "N/A"
              }
            />
            <DataLine title="Province" value={data.address.province || "N/A"} />
            {/* Add more DataLine components for other data */}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render education data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Education Details
          </h4>
          <div>
            {data.education.map((edu, index) => (
              <div key={index}>
                <DataLine title="Degree" value={edu.degree} />
                <DataLine title="Institution" value={edu.institute} />
                <DataLine title="Year" value={edu.year} />
              </div>
            ))}
          </div>
        </TabPanel>
        <TabPanel>
          {/* Render assets data */}
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Assets
          </h4>
          <div>
            <DataLine title="Total Assets" value={data.assets} />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <div className="flex items-center">
            <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
              {title}
            </h2>
          </div>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <img
              src={data.imageURL}
              alt={data.name}
              className="w-16 h-16 rounded-full mr-4"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default CandPreview;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\CandUpdate.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { useParams } from "react-router-dom";
import { getCandidatesById, updateCandidates } from "../../utils/candidates";
import { uploadImage } from "../../utils/globals";
import { fetchSpecificFieldsFromCollectionWithOutFilter } from "../../utils/utilityFunctions";
import { partyRef } from "../../config/firebase";
import Alert from "../../Components/Alert";

const CandUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [area, setArea] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [affiliation, setAffiliation] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [options, setOptions] = useState([]);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleAffiliationChange = (selectedOption) => {
    setAffiliation(selectedOption.value);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getCandidatesById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        setSuccess("Candidate found Successfully");
        console.log("Candidate data for update:", data);
        setName(data.name);
        setEmail(data.email);
        setPhone(data.phone);
        setHouseNumber(data.address.houseNo);
        setArea(data.address.area);
        setCity(data.address.city);
        setProvince(data.address.province);
        setAffiliation(data.affiliation);
      } catch (error) {
        console.error("Error fetching candidate", error);
        setError("Error fetching Candidate");
      }
    };
    fetchData();
  }, [id]);

  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const fieldsToRetrieve = ["name", "symbol_url"];
        const data = await fetchSpecificFieldsFromCollectionWithOutFilter(
          partyRef,
          fieldsToRetrieve
        );
        const formattedData = data.map((item) => ({
          value: item,
          label: item.name,
        }));
        setOptions(formattedData);
        console.log("Options fetched:", formattedData);
      } catch (error) {
        console.error("Error fetching options:", error);
      }
    };

    fetchOptions();
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    try {
      const data = {
        name,
        email,
        phone,
        houseNumber,
        area,
        city,
        province,
        affiliation,
        imageURL: "",
      };

      const imagePath = await uploadImage(image, "images/candidates");
      console.log("Image Path", imagePath);
      data.imageURL = imagePath;

      const success = await updateCandidates(id, data);
      if (success) {
        setSuccess("Candidate updated successfully!");
        console.log("Candidate updated successfully!");
        // Reset form fields
        setHouseNumber("");
        setArea("");
        setCity("");
        setProvince("");
        setName("");
        setEmail("");
        setPhone("");
        setAffiliation("");
        setImage(null);
        setImageUrl("");
      } else {
        setError("Error updating Candidate");
      }
    } catch (error) {
      console.error("Error updating candidate: ", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert message={error} type="error" dismissible autoHideDelay={3000} />
      )}
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Candidate
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Personal Information
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-10">
          <div>
            <label
              htmlFor="image"
              className="text-lg font-normal text-slate-900"
            >
              Image
            </label>
            <input
              type="file"
              id="image"
              name="image"
              accept="image/*"
              onChange={handleImageUpload}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div className="h-28 w-28 border-2 border-gray-300 rounded-md">
            {imageUrl && (
              <img
                className="rounded-full max-w-28"
                src={imageUrl}
                alt="Profile"
              />
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="text-lg font-normal text-slate-900"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="phone"
              className="text-lg font-normal text-slate-900"
            >
              Phone Number
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Address
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="houseNumber"
              className="text-lg font-normal text-slate-900"
            >
              House Number
            </label>
            <input
              type="text"
              id="houseNumber"
              name="houseNumber"
              value={houseNumber}
              onChange={(e) => setHouseNumber(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="text-lg font-normal text-slate-900"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="province"
              className="text-lg font-normal text-slate-900"
            >
              Province
            </label>
            <input
              type="text"
              id="province"
              name="province"
              value={province}
              onChange={(e) => setProvince(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 border-b-2 py-1 border-stone-200">
          Political Affiliation
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="affiliation"
              className="text-lg font-normal text-slate-900"
            >
              Affiliation
            </label>
            <Select
              options={options}
              value={options.find((option) => option.value === affiliation)}
              onChange={handleAffiliationChange}
              className="relative z-0"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button
            className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
            type="submit"
          >
            <span className="font-semibold text-base">
              {loading ? "Loading..." : "Update Candidate"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CandUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Candidate\data.js
const languages = [
  { value: "Urdu", label: "Urdu" },
  { value: "Sindhi", label: "Sindhi" },
  { value: "English", label: "English" },
  { value: "Punjabi", label: "Punjabi" },
  { value: "Pashto", label: "Pashto" },
  { value: "Balochi", label: "Balochi" },
  { value: "Saraiki", label: "Saraiki" },
  { value: "Hindko", label: "Hindko" },
  { value: "Kashmiri", label: "Kashmiri" },
  { value: "Shina", label: "Shina" },
  { value: "Brahui", label: "Brahui" },
  { value: "Hazaragi", label: "Hazaragi" },
  { value: "Wakhi", label: "Wakhi" },
  { value: "Burushaski", label: "Burushaski" },
  { value: "Other", label: "Other" },
];
const religions = [
  { value: "Muslim", label: "Muslim" },
  { value: "Christian", label: "Christian" },
  { value: "Hindu", label: "Hindu" },
  { value: "Sikh", label: "Sikh" },
  { value: "Buddhist", label: "Buddhist" },
  { value: "Bahai", label: "Bahai" },
  { value: "Jain", label: "Jain" },
  { value: "Zoroastrian", label: "Zoroastrian" },
  { value: "Jewish", label: "Jewish" },
  { value: "Other", label: "Other" },
];
const affiliations = [
  { value: "PTI", label: "Pakistan Tehreek E Insaaf" },
  { value: "PMLN", label: "Pakistan Muslim Leagues (N)" },
  { value: "IND", label: "Independant" },
  { value: "NOT SURE", label: "Not Sure" },
];
const genders = [
  { value: "Male", label: "Male" },
  { value: "Female", label: "Female" },
  { value: "Trans", label: "Trans" },
  { value: "Other", label: "Other" },
];

module.exports = { languages, religions, affiliations,genders };

// File: \Side Projects\facecast-vote\src\Pages\Candidate\utils\actions.js
export const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submission");
};
export default handleSubmit;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ComplaintAdminHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { IoIosCloseCircle } from "react-icons/io";
import { getCollections, updateDocument } from "../../../utils/globals";
import { complainRef } from "../../../config/firebase";
import ModalUpdate from "./ModalUpdate";
import toast from "react-hot-toast";

const ComplaintAdminHome = () => {
  const [complaints, setComplaints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOpen, setIsOpen] = useState(false);
  const [selectedComplaintId, setSelectedComplaintId] = useState(null);

  const closeModal = () => {
    setIsOpen(false);
  };

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedComplaintId(id);
  };
  const fetchComplaints = async () => {
    const data = await getCollections(complainRef);
    console.log("Complaints data", data);
    setComplaints(data);
    setLoading(false);
  };
  useEffect(() => {
    fetchComplaints();
  }, []);

  const rejectComplaint = async (id) => {
    try {
      const updateStatus = await updateDocument(complainRef, id, {
        status: "rejected",
      });
      console.log("Update status", updateStatus);
      if (updateStatus) {
        const updatedComplaints = complaints.map((item) => {
          if (item.id === id) {
            return { ...item, status: "rejected" };
          }
          return item;
        });
        setComplaints(updatedComplaints);
        console.log("Complaint Rejected Successfully");
        toast.success("Complaint Rejected Successfully");
      }
    } catch (error) {
      console.error("Error rejecting complaint:", error);
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4">
      <button
        onClick={() => openModal(id)}
        className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
      >
        <FaRegEdit />
      </button>
      <button
        onClick={() => rejectComplaint(id)}
        className="bg-red-600 text-green-50 p-2 rounded-md hover:bg-red-600/80"
      >
        <IoIosCloseCircle />
      </button>
    </div>
  );

  const StatusBadge = ({ status }) => {
    // Determine the background and text color based on the status
    let bgColor = "";
    let textColor = "";

    switch (status) {
      case "accepted":
        bgColor = "bg-green-600";
        textColor = "text-white";
        break;
      case "pending":
        bgColor = "bg-red-600";
        textColor = "text-white";
        break;
      case "rejected":
        bgColor = "bg-yellow-500";
        textColor = "text-white";
        break;
      default:
        bgColor = "bg-gray-600";
        textColor = "text-white";
    }

    return (
      <span
        className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
      >
        {status}
      </span>
    );
  };
  const [complaintsStatus, setComplaintsStatus] = useState(false);

  const HandleUpdateStatus = (value) => {
    setComplaintsStatus(value);
    toast.success("Complaint Accepted Successfully");
  };
  useEffect(() => {
    fetchComplaints();
  }, [complaintsStatus]);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <ModalUpdate
        isOpen={isOpen}
        closeModal={closeModal}
        selectedComplaintId={selectedComplaintId}
        onupdate={HandleUpdateStatus}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Subject
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Message
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Status
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {complaints.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.subject && item.subject
                    ? item.subject.split(" ").slice(0, 4).join(" ") +
                      (item.subject.split(" ").length > 4 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {item.message && item.message
                    ? item.message.split(" ").slice(0, 8).join(" ") +
                      (item.message.split(" ").length > 8 ? " ..." : "")
                    : ""}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  <StatusBadge status={item.status} />
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ComplaintAdminHome;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\Admin\ModalUpdate.jsx
import React, { useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
// import { checkUserExists } from "../../utils/profile";
import { complainRef } from "../../../config/firebase";
import { updateDocument } from "../../../utils/globals";
const ModalUpdate = ({ isOpen, closeModal, selectedComplaintId,onupdate }) => {
  // const [subject, setSubject] = useState("");
  // const [submitted, setSubmitted] = useState(false);
  // const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [remark, setRemark] = useState("");

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      status: "accepted",
      remarks: remark,
    };
    try {
      const submit = await updateDocument(
        complainRef,
        selectedComplaintId,
        data
      );
      if (submit) {
        console.log("Complaint submitted successfully", submit);
        // setMessage("");
        onupdate(true);
        alert("Complaint submitted successfully");
        console.log("Complaint submitted successfully");
      }
    } catch (error) {
      onupdate(false);
      setError(error.message);
      console.log("Error submitting complaint", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-2xl font-medium leading-6 text-gray-900"
              >
                Complaint
              </Dialog.Title>
              <div className="mt-2">
                <form onSubmit={handleOnSubmit}>
                  <div className="flex flex-col gap-2">
                    <div>
                      <label
                        htmlFor="name1"
                        className="text-lg font-normal text-slate-900"
                      >
                        Remarks
                      </label>
                      <textarea
                        rows="4"
                        cols="50"
                        name="message"
                        value={remark}
                        onChange={(e) => setRemark(e.target.value)}
                        className="w-full p-1 border border-gray-300 rounded-md"
                      ></textarea>
                    </div>

                    <div className="flex justify-start py-4">
                      <button
                        onClick={() => {
                          if (!loading) {
                            closeModal();
                          }
                        }}
                        className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                      >
                        <span className="font-semibold text-base">
                          {loading ? "Loading..." : "Submit"}
                        </span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default ModalUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Complaints\User\ComplaintUserHome.jsx
import React, { useState, useEffect } from "react";
import { complainRef } from "../../../config/firebase";
import { getCollections } from "../../../utils/globals";
const ComplaintUserHome = () => {
  const [complaints, setComplaints] = useState([]);
  useEffect(() => {
    const fetchComplaints = async () => {
      const complaintsData = await getCollections(complainRef);
      setComplaints(complaintsData);
    };
    fetchComplaints();
  }, []);

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Complaints</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      <div>
        {complaints.map((item, index) => (
          <div key={index}>
            <UserComplaint item={item} />
          </div>
        ))}
      </div>
    </div>
  );
};

const UserComplaint = ({ item }) => {
  return (
    <section className="text-gray-600 body-font border-gray-100 border-2 py-4 rounded-md">
      <div className="container mx-auto flex px-5  md:flex-row flex-col items-center">
        <div className="lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center">
          <div className="flex items-center justify-between w-full">
            <h1 className="title-font sm:text-2xl text-xl mb-4 font-medium text-gray-900">
              {item.subject && item.subject
                ? item.subject.split(" ").slice(0, 10).join(" ") +
                  (item.subject.split(" ").length > 10 ? " ..." : "")
                : ""}
            </h1>
            <div className="">
              <StatusBadge status={item.status} />
            </div>
          </div>
          <p className="mb-2 leading-relaxed">
            {item.message && item.subject
              ? item.message.split(" ").slice(0, 4).join(" ") +
                (item.message.split(" ").length > 4 ? " ..." : "")
              : ""}
          </p>

          {item.status === "accepted" && (
            <div className="">
              <h1 className="title-font sm:text-lg text-lg mb-1 font-medium text-gray-900">
                Response
              </h1>
              <p className="leading-relaxed text-gray-500 mt-2">
                {item.remarks}
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};
const StatusBadge = ({ status }) => {
  // Determine the background and text color based on the status
  let bgColor = "";
  let textColor = "";

  switch (status) {
    case "accepted":
      bgColor = "bg-green-600";
      textColor = "text-white";
      break;
    case "pending":
      bgColor = "bg-red-600";
      textColor = "text-white";
      break;
    case "rejected":
      bgColor = "bg-yellow-500";
      textColor = "text-white";
      break;
    default:
      bgColor = "bg-gray-600";
      textColor = "text-white";
  }

  return (
    <span
      className={`inline-block px-2 py-1 text-sm rounded-md ${bgColor} ${textColor}`}
    >
      {status}
    </span>
  );
};
export default ComplaintUserHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreaCodes.js
const areaCodes = [
    { value: 'NA-118', label: 'NA-118 - Lahore 1 (Shahdara, Harbanspura, Nishtar Town)' },
    { value: 'NA-119', label: 'NA-119 - Lahore 2 (Gulberg, Model Town, Faisal Town)' },
    { value: 'NA-120', label: 'NA-120 - Lahore 3 (Ravi Town, Aziz Bhatti Town, Data Gunj Buksh Town)' },
    { value: 'NA-121', label: 'NA-121 - Lahore 4 (Walled City, Shalimar, Wagah, Lahore Cantt)' },
    { value: 'NA-122', label: 'NA-122 - Lahore 5 (Raiwind, Township, Samanabad)' },
    { value: 'NA-123', label: 'NA-123 - Lahore 6 (Iqbal Town, Green Town, Sabzazar)' },
    { value: 'NA-124', label: 'NA-124 - Lahore 7 (Johar Town, Wapda Town, Township)' },
    { value: 'NA-125', label: 'NA-125 - Lahore 8 (Cavalry Ground, DHA, Askari)' },
    { value: 'NA-126', label: 'NA-126 - Lahore 9 (Shadman, Kot Lakhpat, Ichra)' },
    { value: 'NA-127', label: 'NA-127 - Lahore 10 (Barki, Bedian Road, Kahna Nau)' },
    { value: 'NA-128', label: 'NA-128 - Lahore 11 (DHA Phase 1, Nishtar Colony, Garden Town)' },
    { value: 'NA-129', label: 'NA-129 - Lahore 12 (Sui Gas Housing Society, Punjab University, Wahdat Colony)' },
    { value: 'NA-130', label: 'NA-130 - Lahore 13 (Lahore Airport, Gulshan-e-Ravi, Baghbanpura)' },
    { value: 'NA-131', label: 'NA-131 - Lahore 14 (Jallo Park, Shah Kamal, Raiwind Road)' },
    { value: 'NA-132', label: 'NA-132 - Lahore 15 (Thokar Niaz Baig, Multan Road, Chung)' }
  ];
  
  export default areaCodes;
  

// File: \Side Projects\facecast-vote\src\Pages\Constituency\AreasSelect.js
export const MajorAreasOfPakistan = [
  { value: "Karachi", label: "Karachi" },
  { value: "Hyderabad", label: "Hyderabad" },
  { value: "Sukkur", label: "Sukkur" },
  { value: "Larkana", label: "Larkana" },
  { value: "Mirpur Khas", label: "Mirpur Khas" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Thatta", label: "Thatta" },
  { value: "Dadu", label: "Dadu" },
  { value: "Jacobabad", label: "Jacobabad" },
  { value: "Shikarpur", label: "Shikarpur" },
  { value: "Sanghar", label: "Sanghar" },
  { value: "Ghotki", label: "Ghotki" },
  { value: "Umerkot", label: "Umerkot" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Badin", label: "Badin" },
  { value: "Kotri", label: "Kotri" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tando Adam", label: "Tando Adam" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Moro", label: "Moro" },
  { value: "Kandhkot", label: "Kandhkot" },
  { value: "Daharki", label: "Daharki" },
  { value: "Rohri", label: "Rohri" },
  { value: "Jamshoro", label: "Jamshoro" },
  { value: "Mithi", label: "Mithi" },
  { value: "Hala", label: "Hala" },
  { value: "Sehwan", label: "Sehwan" },
  { value: "Naudero", label: "Naudero" },
  { value: "Warah", label: "Warah" },
  { value: "Ranipur", label: "Ranipur" },
  { value: "Kamber", label: "Kamber" },
  { value: "Rohri", label: "Rohri" },
  { value: "Meerwah", label: "Meerwah" },
  { value: "Dokri", label: "Dokri" },
  { value: "Tando Muhammad Khan", label: "Tando Muhammad Khan" },
  { value: "Moro", label: "Moro" },
  { value: "Digri", label: "Digri" },
  { value: "Qambar", label: "Qambar" },
  { value: "Wahi Pandhi", label: "Wahi Pandhi" },
  { value: "Khipro", label: "Khipro" },
  { value: "Sakrand", label: "Sakrand" },
  { value: "Mehrabpur", label: "Mehrabpur" },
  { value: "Khanpur", label: "Khanpur" },
  { value: "Matiari", label: "Matiari" },
  { value: "Nawabshah", label: "Nawabshah" },
  { value: "Jhol", label: "Jhol" },
  { value: "Shahdadpur", label: "Shahdadpur" },
  { value: "Sinjhoro", label: "Sinjhoro" },
  { value: "Khipro", label: "Khipro" },
  { value: "Thari Mirwah", label: "Thari Mirwah" },
  { value: "Tando Bago", label: "Tando Bago" },
  { value: "Rohri", label: "Rohri" },
  { value: "Kashmore", label: "Kashmore" },
  { value: "Ghari Khairo", label: "Ghari Khairo" },
  { value: "Madeji", label: "Madeji" },
  { value: "Tangwani", label: "Tangwani" },
  { value: "Sobho Dero", label: "Sobho Dero" },
  { value: "Lakhi", label: "Lakhi" },
  { value: "Qubo Saeed Khan", label: "Qubo Saeed Khan" },
  { value: "Daur", label: "Daur" },
  { value: "Bhiria", label: "Bhiria" },
  { value: "Mehar", label: "Mehar" },
  { value: "Bhiria Road", label: "Bhiria Road" },
  { value: "Hala New", label: "Hala New" },
  { value: "Jhudo", label: "Jhudo" },
  { value: "Sindhri", label: "Sindhri" },
  { value: "Bakrani", label: "Bakrani" },
  { value: "Samaro", label: "Samaro" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Therhi", label: "Therhi" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Matiari", label: "Matiari" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Sukrand", label: "Sukrand" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Mardan", label: "Mardan" },
  { value: "Swat", label: "Swat" },
  { value: "Abbottabad", label: "Abbottabad" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kohat", label: "Kohat" },
  { value: "Haripur", label: "Haripur" },
  { value: "Bannu", label: "Bannu" },
  { value: "Chitral", label: "Chitral" },
  { value: "Batagram", label: "Batagram" },
  { value: "Tank", label: "Tank" },
  { value: "Dir", label: "Dir" },
  { value: "Hangu", label: "Hangu" },
  { value: "Shangla", label: "Shangla" },
  { value: "Karak", label: "Karak" },
  { value: "Swabi", label: "Swabi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Kohistan", label: "Kohistan" },
  { value: "Buner", label: "Buner" },
  { value: "Malakand", label: "Malakand" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Mingora", label: "Mingora" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Kabal", label: "Kabal" },
  { value: "Topi", label: "Topi" },
  { value: "Alpuri", label: "Alpuri" },
  { value: "Rustam", label: "Rustam" },
  { value: "Parachinar", label: "Parachinar" },
  { value: "Thana", label: "Thana" },
  { value: "Daggar", label: "Daggar" },
  { value: "Pabbi", label: "Pabbi" },
  { value: "Risalpur", label: "Risalpur" },
  { value: "Bakhshali", label: "Bakhshali" },
  { value: "Bela", label: "Bela" },
  { value: "Chakdara", label: "Chakdara" },
  { value: "Chakku", label: "Chakku" },
  { value: "Charsadda", label: "Charsadda" },
  { value: "Chitral", label: "Chitral" },
  { value: "Daggar", label: "Daggar" },
  { value: "Dargai", label: "Dargai" },
  { value: "Dera Ismail Khan", label: "Dera Ismail Khan" },
  { value: "Dir", label: "Dir" },
  { value: "Drosh", label: "Drosh" },
  { value: "Haripur", label: "Haripur" },
  { value: "Karak", label: "Karak" },
  { value: "Kohat", label: "Kohat" },
  { value: "Lakki Marwat", label: "Lakki Marwat" },
  { value: "Lower Dir", label: "Lower Dir" },
  { value: "Malakand", label: "Malakand" },
  { value: "Mansehra", label: "Mansehra" },
  { value: "Mardan", label: "Mardan" },
  { value: "Mingora", label: "Mingora" },
  { value: "Nowshera", label: "Nowshera" },
  { value: "Paharpur", label: "Paharpur" },
  { value: "Peshawar", label: "Peshawar" },
  { value: "Rustam", label: "Rustam" },
  { value: "Shabqadar", label: "Shabqadar" },
  { value: "Shangla", label: "Shangla" },
  { value: "Swabi", label: "Swabi" },
  { value: "Swat", label: "Swat" },
  { value: "Tank", label: "Tank" },
  { value: "Thana", label: "Thana" },
  { value: "Topi", label: "Topi" },
  { value: "Upper Dir", label: "Upper Dir" },
  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Quetta", label: "Quetta" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Chaman", label: "Chaman" },
  { value: "Turbat", label: "Turbat" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Sibi", label: "Sibi" },
  { value: "Zhob", label: "Zhob" },
  { value: "Loralai", label: "Loralai" },
  { value: "Dera Bugti", label: "Dera Bugti" },
  { value: "Nushki", label: "Nushki" },
  { value: "Mastung", label: "Mastung" },
  { value: "Kharan", label: "Kharan" },
  { value: "Panjgur", label: "Panjgur" },
  { value: "Kalat", label: "Kalat" },
  { value: "Mach", label: "Mach" },
  { value: "Awaran", label: "Awaran" },
  { value: "Qila Abdullah", label: "Qila Abdullah" },
  { value: "Ormara", label: "Ormara" },
  { value: "Pasni", label: "Pasni" },
  { value: "Kohlu", label: "Kohlu" },
  { value: "Dalbandin", label: "Dalbandin" },
  { value: "Wadh", label: "Wadh" },
  { value: "Dera Murad Jamali", label: "Dera Murad Jamali" },
  { value: "Bela", label: "Bela" },
  { value: "Kech", label: "Kech" },
  { value: "Sui", label: "Sui" },
  { value: "Gandava", label: "Gandava" },
  { value: "Chagai", label: "Chagai" },
  { value: "Harnai", label: "Harnai" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Lasbela", label: "Lasbela" },
  { value: "Makran", label: "Makran" },
  { value: "Mangochar", label: "Mangochar" },
  { value: "Mekhtar", label: "Mekhtar" },
  { value: "Pishin", label: "Pishin" },
  { value: "Killa Saifullah", label: "Killa Saifullah" },
  { value: "Musa Khel Bazar", label: "Musa Khel Bazar" },
  { value: "Killa Abdullah", label: "Killa Abdullah" },
  { value: "Barkhan", label: "Barkhan" },
  { value: "Sherani", label: "Sherani" },
  { value: "Lehri", label: "Lehri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Chaman", label: "Chaman" },
  { value: "Taftan", label: "Taftan" },
  { value: "Mand", label: "Mand" },
  { value: "Tump", label: "Tump" },
  { value: "Turbat", label: "Turbat" },
  { value: "Gwadar", label: "Gwadar" },
  { value: "Pasni", label: "Pasni" },
  { value: "Ormara", label: "Ormara" },
  { value: "Jiwani", label: "Jiwani" },
  { value: "Gaddani", label: "Gaddani" },
  { value: "Hub", label: "Hub" },
  { value: "Winder", label: "Winder" },
  { value: "Uthal", label: "Uthal" },
  { value: "Mach", label: "Mach" },
  { value: "Dera Allah Yar", label: "Dera Allah Yar" },
  { value: "Jaffarabad", label: "Jaffarabad" },
  { value: "Jhal Magsi", label: "Jhal Magsi" },
  { value: "Khuzdar", label: "Khuzdar" },
  { value: "Kalat", label: "Kalat" },
  { value: "Ziarat", label: "Ziarat" },
  { value: "Hanna Lake", label: "Hanna Lake" },
  { value: "Urak Valley", label: "Urak Valley" },
  { value: "Bolan Pass", label: "Bolan Pass" },
  { value: "Gaddani Beach", label: "Gaddani Beach" },
  { value: "Hingol National Park", label: "Hingol National Park" },
  { value: "Astola Island", label: "Astola Island" },
  { value: "Bela", label: "Bela" },
  { value: "New Saeedabad", label: "New Saeedabad" },
  { value: "Rajo Khanani", label: "Rajo Khanani" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Bhan", label: "Bhan" },
  { value: "Pir jo Goth", label: "Pir jo Goth" },
  { value: "Tando Ghulam Ali", label: "Tando Ghulam Ali" },
  { value: "Chuhar Jamali", label: "Chuhar Jamali" },
  { value: "Nabisar", label: "Nabisar" },
  { value: "Daur", label: "Daur" },
  { value: "Daulatpur", label: "Daulatpur" },
  { value: "Nara", label: "Nara" },
  { value: "Khairpur", label: "Khairpur" },
  { value: "Ratodero", label: "Ratodero" },
  { value: "Dokri", label: "Dokri" },
  { value: "Thul", label: "Thul" },
  { value: "Meeranpur", label: "Meeranpur" },
  { value: "Gambat", label: "Gambat" },
  { value: "Kingri", label: "Kingri" },
  { value: "Sijawal Junejo", label: "Sijawal Junejo" },
  { value: "Naudero", label: "Naudero" },
  { value: "Garhi Yasin", label: "Garhi Yasin" },
  { value: "Sobhodero", label: "Sobhodero" },

  { value: "Bhit Shah", label: "Bhit Shah" },
  { value: "Tharu Shah", label: "Tharu Shah" },
  { value: "New Badah", label: "New Badah" },
  { value: "Bakhri", label: "Bakhri" },
  { value: "Rohri", label: "Rohri" },
  { value: "Nasirabad", label: "Nasirabad" },
  { value: "Lahore", label: "Lahore" },
  { value: "Faisalabad", label: "Faisalabad" },
  { value: "Rawalpindi", label: "Rawalpindi" },
  { value: "Multan", label: "Multan" },
  { value: "Gujranwala", label: "Gujranwala" },
  { value: "Sialkot", label: "Sialkot" },
  { value: "Bahawalpur", label: "Bahawalpur" },
  { value: "Sargodha", label: "Sargodha" },
  { value: "Gujrat", label: "Gujrat" },
  { value: "Jhelum", label: "Jhelum" },
  { value: "Sahiwal", label: "Sahiwal" },
  { value: "Okara", label: "Okara" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Chiniot", label: "Chiniot" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Kasur", label: "Kasur" },
  { value: "Muzaffargarh", label: "Muzaffargarh" },
  { value: "Rahim Yar Khan", label: "Rahim Yar Khan" },
  { value: "Pakpattan", label: "Pakpattan" },
  { value: "Dera Ghazi Khan", label: "Dera Ghazi Khan" },
  { value: "Narowal", label: "Narowal" },
  { value: "Jhang", label: "Jhang" },
  { value: "Attock", label: "Attock" },
  { value: "Layyah", label: "Layyah" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Khushab", label: "Khushab" },
  { value: "Chakwal", label: "Chakwal" },
  { value: "Vehari", label: "Vehari" },
  { value: "Hafizabad", label: "Hafizabad" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Khanewal", label: "Khanewal" },
  { value: "Toba Tek Singh", label: "Toba Tek Singh" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Burewala", label: "Burewala" },
  { value: "Gojra", label: "Gojra" },
  { value: "Muridke", label: "Muridke" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Ahmedpur East", label: "Ahmedpur East" },
  { value: "Tando Allahyar", label: "Tando Allahyar" },
  { value: "Vihari", label: "Vihari" },
  { value: "Hasilpur", label: "Hasilpur" },
  { value: "Kahna Nau", label: "Kahna Nau" },
  { value: "Chichawatni", label: "Chichawatni" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Murree", label: "Murree" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Kot Addu", label: "Kot Addu" },
  { value: "Lodhran", label: "Lodhran" },
  { value: "Kharian", label: "Kharian" },
  { value: "Jaranwala", label: "Jaranwala" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Arifwala", label: "Arifwala" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Talagang", label: "Talagang" },
  { value: "Kahror Pakka", label: "Kahror Pakka" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Pind Dadan Khan", label: "Pind Dadan Khan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Shujaabad", label: "Shujaabad" },
  { value: "Bhalwal", label: "Bhalwal" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Bhawana", label: "Bhawana" },
  { value: "Jampur", label: "Jampur" },
  { value: "Kot Mithan", label: "Kot Mithan" },
  { value: "Pattoki", label: "Pattoki" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Kunjah", label: "Kunjah" },
  { value: "Choa Saidan Shah", label: "Choa Saidan Shah" },
  { value: "Daska", label: "Daska" },
  { value: "Hazro", label: "Hazro" },
  { value: "Bhakkar", label: "Bhakkar" },
  { value: "Dunyapur", label: "Dunyapur" },
  { value: "Kot Radha Kishan", label: "Kot Radha Kishan" },
  { value: "Chak Jhumra", label: "Chak Jhumra" },
  { value: "Qadirabad", label: "Qadirabad" },
  { value: "Kamra", label: "Kamra" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kahror Lal Essan", label: "Kahror Lal Essan" },
  { value: "Kanganpur", label: "Kanganpur" },
  { value: "Lala Musa", label: "Lala Musa" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Minchinabad", label: "Minchinabad" },
  { value: "Mitha Tiwana", label: "Mitha Tiwana" },
  { value: "Monga", label: "Monga" },
  { value: "Mubarikpur", label: "Mubarikpur" },
  { value: "Nankana Sahib", label: "Nankana Sahib" },
  { value: "Pasrur", label: "Pasrur" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Sambrial", label: "Sambrial" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sohawa", label: "Sohawa" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Tarogil", label: "Tarogil" },
  { value: "Ugoke", label: "Ugoke" },
  { value: "Wah", label: "Wah" },
  { value: "Wazirabad", label: "Wazirabad" },
  { value: "Zafarwal", label: "Zafarwal" },
  { value: "Gujar Khan", label: "Gujar Khan" },
  { value: "Haveli Lakha", label: "Haveli Lakha" },
  { value: "Jalalpur Pirwala", label: "Jalalpur Pirwala" },
  { value: "Kallar Kahar", label: "Kallar Kahar" },
  { value: "Kamalia", label: "Kamalia" },
  { value: "Kharian", label: "Kharian" },
  { value: "Kot Momin", label: "Kot Momin" },
  { value: "Kundian", label: "Kundian" },
  { value: "Lalian", label: "Lalian" },
  { value: "Liaqatpur", label: "Liaqatpur" },
  { value: "Mamukanjan", label: "Mamukanjan" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Qila Didar Singh", label: "Qila Didar Singh" },
  { value: "Raiwind", label: "Raiwind" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Renala Khurd", label: "Renala Khurd" },
  { value: "Sangla Hill", label: "Sangla Hill" },
  { value: "Shahkot", label: "Shahkot" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Shamsabad", label: "Shamsabad" },
  { value: "Shorkot", label: "Shorkot" },
  { value: "Sillanwali", label: "Sillanwali" },
  { value: "Tandlianwala", label: "Tandlianwala" },
  { value: "Wah Cantt", label: "Wah Cantt" },
  { value: "Bhera", label: "Bhera" },
  { value: "Chunian", label: "Chunian" },
  { value: "Darya Khan", label: "Darya Khan" },
  { value: "Fort Abbas", label: "Fort Abbas" },
  { value: "Haroonabad", label: "Haroonabad" },
  { value: "Jand", label: "Jand" },
  { value: "Jatoi", label: "Jatoi" },
  { value: "Kahna", label: "Kahna" },
  { value: "Kahuta", label: "Kahuta" },
  { value: "Kallar Syedan", label: "Kallar Syedan" },
  { value: "Kamoke", label: "Kamoke" },
  { value: "Kot Sultan", label: "Kot Sultan" },
  { value: "Lalamusa", label: "Lalamusa" },
  { value: "Liaquatpur", label: "Liaquatpur" },
  { value: "Mailsi", label: "Mailsi" },
  { value: "Malakwal", label: "Malakwal" },
  { value: "Mandi Bahauddin", label: "Mandi Bahauddin" },
  { value: "Mian Channu", label: "Mian Channu" },
  { value: "Mianwali", label: "Mianwali" },
  { value: "Nowshera Virkan", label: "Nowshera Virkan" },
  { value: "Pindi Bhattian", label: "Pindi Bhattian" },
  { value: "Pir Mahal", label: "Pir Mahal" },
  { value: "Rabwah", label: "Rabwah" },
  { value: "Rajanpur", label: "Rajanpur" },
  { value: "Ratwal", label: "Ratwal" },
  { value: "Sadiqabad", label: "Sadiqabad" },
  { value: "Sarai Alamgir", label: "Sarai Alamgir" },
  { value: "Shakargarh", label: "Shakargarh" },
  { value: "Sharaqpur", label: "Sharaqpur" },
  { value: "Sheikhupura", label: "Sheikhupura" },
  { value: "Sodhra", label: "Sodhra" },
  { value: "Taunsa", label: "Taunsa" },
  { value: "Thatta Ghulamka Dheroka", label: "Thatta Ghulamka Dheroka" },
  { value: "Tibba Sultanpur", label: "Tibba Sultanpur" },
  { value: "F-6", label: "F-6" },
  { value: "F-7", label: "F-7" },
  { value: "F-8", label: "F-8" },
  { value: "F-9", label: "F-9" },
  { value: "F-10", label: "F-10" },
  { value: "F-11", label: "F-11" },
  { value: "G-5", label: "G-5" },
  { value: "G-6", label: "G-6" },
  { value: "G-7", label: "G-7" },
  { value: "G-8", label: "G-8" },
  { value: "G-9", label: "G-9" },
  { value: "G-10", label: "G-10" },
  { value: "G-11", label: "G-11" },
  { value: "G-12", label: "G-12" },
  { value: "H-8", label: "H-8" },
  { value: "H-9", label: "H-9" },
  { value: "H-10", label: "H-10" },
  { value: "I-8", label: "I-8" },
  { value: "I-9", label: "I-9" },
  { value: "I-10", label: "I-10" },
  { value: "I-11", label: "I-11" },
  { value: "E-7", label: "E-7" },
  { value: "E-8", label: "E-8" },
  { value: "E-9", label: "E-9" },
  { value: "E-10", label: "E-10" },
  { value: "E-11", label: "E-11" },
  { value: "F-5", label: "F-5" },
  { value: "G-13", label: "G-13" },
  { value: "G-14", label: "G-14" },
  { value: "G-15", label: "G-15" },
  { value: "G-16", label: "G-16" },
  { value: "G-17", label: "G-17" },
  { value: "H-11", label: "H-11" },
  { value: "H-12", label: "H-12" },
  { value: "H-13", label: "H-13" },
  { value: "H-14", label: "H-14" },
  { value: "I-12", label: "I-12" },
  { value: "I-13", label: "I-13" },
  { value: "I-14", label: "I-14" },
  { value: "I-15", label: "I-15" },
  { value: "I-16", label: "I-16" },
  { value: "I-17", label: "I-17" },
  { value: "I-18", label: "I-18" },
  { value: "D-12", label: "D-12" },
  { value: "D-13", label: "D-13" },
  { value: "D-14", label: "D-14" },
  { value: "E-6", label: "E-6" },
  { value: "E-12", label: "E-12" },
  { value: "E-13", label: "E-13" },
  { value: "E-14", label: "E-14" },
  { value: "F-12", label: "F-12" },
  { value: "F-13", label: "F-13" },
  { value: "F-14", label: "F-14" },
  { value: "G-18", label: "G-18" },
  { value: "H-15", label: "H-15" },
  { value: "H-16", label: "H-16" },
  { value: "H-17", label: "H-17" },
  { value: "I-19", label: "I-19" },
  { value: "I-20", label: "I-20" },
  { value: "I-21", label: "I-21" },
];

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstCreate.jsx
import React, { useState } from "react";
import Select from "react-select";
import { addDoc } from "firebase/firestore";
import { constituenciesRef } from "../../config/firebase.js";
import { MajorAreasOfPakistan } from "./AreasSelect.js";
import toast from "react-hot-toast";
const ConstCreate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null); // Initialize to null
  const [selectedType, setSelectedType] = useState(null); // Initialize to null
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const [ageDistribution, setAgeDistribution] = useState({
    young_adults: "",
    adults: "",
    middleaged: "",
    seniors: "",
  });
  const [genderDistribution, setGenderDistribution] = useState({
    male: "",
    female: "",
    other: "",
  });
  const [educationLevels, setEducationLevels] = useState({
    primary_school: "",
    secondary_school: "",
    higher_education: "",
  });
  const AssemblyOptions = [
    { value: "Punjab", label: "Punjab" },
    { value: "Sindh", label: "Sindh" },
    { value: "Balochistan", label: "Balochistan" },
    { value: "KPK", label: "KPK" },
    { value: "National", label: "National" },
  ];

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  const handleTypeChange = (selectedOptions) => {
    console.log("Selected Type", selectedOptions.value);
    setSelectedType(selectedOptions.value);
  };
  const data = {
    name: name,
    code: code,
    assembly: selectedType,
    region: selectedRegion,
    population: population,
    voters: voters,
    area: area,
    age_distribution: ageDistribution
      ? ageDistribution
      : { young_adults: "", adults: "", middleaged: "", seniors: "" },
    gender_distribution: genderDistribution
      ? genderDistribution
      : { male: "", female: "", other: "" },
    education_levels: educationLevels
      ? educationLevels
      : { primary_school: "", secondary_school: "", higher_education: "" },
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Data to be added", data);
      const docRef = await addDoc(constituenciesRef,data);
      console.log("Document written with ID: ", docRef.id);
      toast.success("Constituency Created Successfully");
      // Reset form fields
      setName("");
      setCode("");
      setSelectedRegion("");
      setSelectedType("");
      setPopulation("");
      setVoters("");
      setArea("");
      setAgeDistribution({
        young_adults: "",
        adults: "",
        middleaged: "",
        seniors: "",
      });
      setGenderDistribution({
        male: "",
        female: "",
        other: "",
      });
      setEducationLevels({
        primary_school: "",
        secondary_school: "",
        higher_education: "",
      });
    } catch (error) {
      console.log(error);
      toast.error("Error creating Constituency");
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name"
              className="text-lg font-normal text-slate-900"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="code"
              className="text-lg font-normal text-slate-900"
            >
              Code
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="assembly"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            {/* Assuming AssemblyOptions is imported */}
            <Select
              options={AssemblyOptions}
              value={selectedType}
              onChange={handleTypeChange}
            />
          </div>
          <div>
            <label
              htmlFor="region"
              className="text-lg font-normal text-slate-900"
            >
              Region
            </label>
            {/* Assuming areas is imported */}
            <Select
              options={MajorAreasOfPakistan}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label
              htmlFor="population"
              className="text-lg font-normal text-slate-900"
            >
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="voters"
              className="text-lg font-normal text-slate-900"
            >
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="area"
              className="text-lg font-normal text-slate-900"
            >
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="young_adults"
              className="text-lg font-normal text-slate-900"
            >
              Young Adults
            </label>
            <input
              type="number"
              id="young_adults"
              name="young_adults"
              value={ageDistribution.young_adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  young_adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="adults"
              className="text-lg font-normal text-slate-900"
            >
              Adults
            </label>
            <input
              type="number"
              id="adults"
              name="adults"
              value={ageDistribution.adults}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  adults: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="middleaged"
              className="text-lg font-normal text-slate-900"
            >
              Middle-aged
            </label>
            <input
              type="number"
              id="middleaged"
              name="middleaged"
              value={ageDistribution.middleaged}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  middleaged: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="seniors"
              className="text-lg font-normal text-slate-900"
            >
              Seniors
            </label>
            <input
              type="number"
              id="seniors"
              name="seniors"
              value={ageDistribution.seniors}
              onChange={(e) =>
                setAgeDistribution({
                  ...ageDistribution,
                  seniors: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="male"
              className="text-lg font-normal text-slate-900"
            >
              Male
            </label>
            <input
              type="number"
              id="male"
              name="male"
              value={genderDistribution.male}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  male: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="female"
              className="text-lg font-normal text-slate-900"
            >
              Female
            </label>
            <input
              type="number"
              id="female"
              name="female"
              value={genderDistribution.female}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  female: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="other"
              className="text-lg font-normal text-slate-900"
            >
              Other
            </label>
            <input
              type="number"
              id="other"
              name="other"
              value={genderDistribution.other}
              onChange={(e) =>
                setGenderDistribution({
                  ...genderDistribution,
                  other: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="primary_school"
              className="text-lg font-normal text-slate-900"
            >
              Primary School
            </label>
            <input
              type="number"
              id="primary_school"
              name="primary_school"
              value={educationLevels.primary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  primary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="secondary_school"
              className="text-lg font-normal text-slate-900"
            >
              Secondary School
            </label>
            <input
              type="number"
              id="secondary_school"
              name="secondary_school"
              value={educationLevels.secondary_school}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  secondary_school: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="higher_education"
              className="text-lg font-normal text-slate-900"
            >
              Higher Education
            </label>
            <input
              type="number"
              id="higher_education"
              name="higher_education"
              value={educationLevels.higher_education}
              onChange={(e) =>
                setEducationLevels({
                  ...educationLevels,
                  higher_education: e.target.value,
                })
              }
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Create Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstCreate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstHome.jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import {
  getConstituencies,
  deleteConstituency,
} from "../../utils/constituency";

const ConstHome = () => {
  const [constituencies, setConstituencies] = useState([]);

  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const data = await getConstituencies();
        setConstituencies(data);
      } catch (error) {
        console.error("Error fetching constituencies", error);
      }
    };
    fetchConstituencies();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this constituency?"
    );
    if (confirmDelete) {
      const isSuccess = await deleteConstituency(id);
      if (isSuccess) {
        setConstituencies(constituencies.filter((item) => item.id !== id));
      } else {
        console.error("Error deleting constituency");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        onClick={() => handleDelete(id)}
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
      >
        Delete
      </button>
    </div>
  );

  if (!constituencies.length) {
    return <div>Loading...</div>;
  }

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800 py-4">
          Constituency Home
        </h1>
      </div>
      <hr className="py-2 border-t-2 border-gray-300" />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assembly
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Code
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Region
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Voters
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {constituencies.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.name}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.assembly}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.code}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.region}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.voters}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item.id)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConstHome;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstPreview.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
// import { constituencies } from "../../data/const.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getConstituencyById } from "../../utils/constituency.js";

const ConstPreview = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const constData = await getConstituencyById(id);
        if (!constData) {
          return <div>No Data Found.</div>;
        }
        console.log("Constituency data:", constData);
        setData(constData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <ConstituencyHeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Demographics</Tab>
          <Tab>Age Distribution</Tab>
          <Tab>Gender Distribution</Tab>
          <Tab>Education Levels</Tab>
        </TabList>

        <TabPanel>
          <DataLine title="Registered Voters" value={data.voters || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Age
          </h4>
          {data.age_distribution && (
            <>
              <DataLine
                title="Young Adults (18yo - 25yo)"
                value={data.age_distribution.young_adults || "N/A"}
              />
              <DataLine
                title="Adults (26yo - 40yo)"
                value={data.age_distribution.adults || "N/A"}
              />
              <DataLine
                title="Middle Ages (41yo - 60yo)"
                value={data.age_distribution.middleaged || "N/A"}
              />
              <DataLine
                title="Seniors (60yo +)"
                value={data.age_distribution.seniors || "N/A"}
              />
            </>
          )}
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Gender
          </h4>
          <DataLine
            title="Male"
            value={data.gender_distribution.male || "N/A"}
          />
          <DataLine
            title="Female"
            value={data.gender_distribution.female || "N/A"}
          />
          <DataLine
            title="Others"
            value={data.gender_distribution.other || "N/A"}
          />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Population by Education Levels
          </h4>
          <DataLine
            title="Primary School"
            value={data.education_levels.primary_school || "N/A"}
          />
          <DataLine
            title="Secondary School"
            value={data.education_levels.secondary_school || "N/A"}
          />
          <DataLine
            title="Higher Education"
            value={data.education_levels.higher_education || "N/A"}
          />
        </TabPanel>
      </Tabs>
    </section>
  );
};

const ConstituencyHeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Area</p>
            <p className="text-lg font-semibold">{data.region || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConstPreview;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\ConstUpdate.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Select from "react-select";
import { areas } from "./data";
import {
  getConstituencyById,
  updateConstituency,
} from "../../utils/constituency";
import toast from "react-hot-toast";

const ConstUpdate = () => {
  const [name, setName] = useState("");
  const [code, setCode] = useState("");
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [population, setPopulation] = useState("");
  const [voters, setVoters] = useState("");
  const [area, setArea] = useState("");
  const { id } = useParams();

  const handleRegionChange = (selectedOptions) => {
    console.log("Selected Region:", selectedOptions.value);
    setSelectedRegion(selectedOptions.value);
  };

  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getConstituencyById(id);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Constituency data for update:", data);
        setName(data.name);
        setCode(data.code);
        setSelectedRegion(data.region);
        setPopulation(data.population);
        setVoters(data.voters);
        setArea(data.area);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [id]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const data = {
        name: name,
        code: code,
        region: selectedRegion,
        population: population,
        voters: voters,
        area: area,
      };

      const success = await updateConstituency(id, data);
      if (success) {
        console.log("Constituency updated successfully!");
        toast.success("Constituency updated successfully!");
        // Reset form fields
        setArea("");
        setCode("");
        setName("");
        setPopulation("");
        setSelectedRegion("");
        setVoters("");
      }
    } catch (error) {
      console.error("Error updating constituency: ", error);
      toast.error("Error updating constituency!");
    }
  };
  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Constituency
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Code
            </label>
            <input
              type="code"
              id="code"
              name="code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Region
            </label>
            <Select
              options={areas}
              value={selectedRegion}
              onChange={handleRegionChange}
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Population
            </label>
            <input
              type="number"
              id="population"
              name="population"
              value={population}
              onChange={(e) => setPopulation(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Voters
            </label>
            <input
              type="number"
              id="voters"
              name="voters"
              value={voters}
              onChange={(e) => setVoters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Total Area
            </label>
            <input
              type="text"
              id="area"
              name="area"
              value={area}
              onChange={(e) => setArea(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">Update Constituency</span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default ConstUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Constituency\data.js
const areas = [
    { value: 'Shahdara', label: 'Shahdara' },
    { value: 'Harbanspura', label: 'Harbanspura' },
    { value: 'Nishtar Town', label: 'Nishtar Town' },
    { value: 'Gulberg', label: 'Gulberg' },
    { value: 'Model Town', label: 'Model Town' },
    { value: 'Faisal Town', label: 'Faisal Town' },
    { value: 'Ravi Town', label: 'Ravi Town' },
    { value: 'Aziz Bhatti Town', label: 'Aziz Bhatti Town' },
    { value: 'Data Gunj Buksh Town', label: 'Data Gunj Buksh Town' },
    { value: 'Walled City', label: 'Walled City' },
    { value: 'Shalimar', label: 'Shalimar' },
    { value: 'Wagah', label: 'Wagah' },
    { value: 'Lahore Cantt', label: 'Lahore Cantt' },
    { value: 'Raiwind', label: 'Raiwind' },
    { value: 'Township', label: 'Township' },
    { value: 'Samanabad', label: 'Samanabad' },
    { value: 'Iqbal Town', label: 'Iqbal Town' },
    { value: 'Green Town', label: 'Green Town' },
    { value: 'Sabzazar', label: 'Sabzazar' },
    { value: 'Johar Town', label: 'Johar Town' },
    { value: 'Wapda Town', label: 'Wapda Town' },
    { value: 'Shadman', label: 'Shadman' },
    { value: 'Kot Lakhpat', label: 'Kot Lakhpat' },
    { value: 'Ichra', label: 'Ichra' },
    { value: 'Barki', label: 'Barki' },
    { value: 'Bedian Road', label: 'Bedian Road' },
    { value: 'Kahna Nau', label: 'Kahna Nau' },
    { value: 'DHA Phase 1', label: 'DHA Phase 1' },
    { value: 'Nishtar Colony', label: 'Nishtar Colony' },
    { value: 'Garden Town', label: 'Garden Town' },
    { value: 'Sui Gas Housing Society', label: 'Sui Gas Housing Society' },
    { value: 'Punjab University', label: 'Punjab University' },
    { value: 'Wahdat Colony', label: 'Wahdat Colony' },
    { value: 'Lahore Airport', label: 'Lahore Airport' },
    { value: 'Gulshan-e-Ravi', label: 'Gulshan-e-Ravi' },
    { value: 'Baghbanpura', label: 'Baghbanpura' },
    { value: 'Jallo Park', label: 'Jallo Park' },
    { value: 'Shah Kamal', label: 'Shah Kamal' },
    { value: 'Raiwind Road', label: 'Raiwind Road' },
    { value: 'Thokar Niaz Baig', label: 'Thokar Niaz Baig' },
    { value: 'Multan Road', label: 'Multan Road' },
    { value: 'Chung', label: 'Chung' }
  ];
  
  const AssemblyOptions = [
    { value: "national", label: "National Assembly" },
    { value: "punjab", label: "Punjab Assembly" },
    { value: "sindh", label: "Sindh Assembly" },
    { value: "kpk", label: "KPK Assembly" },
    { value: "balochistan", label: "Balochistan Assembly" },
    // Add more options as needed
  ];
  export { areas, AssemblyOptions };
  

// File: \Side Projects\facecast-vote\src\Pages\Elections\CreateElection.jsx
import React, { useState, useEffect } from "react";
import Select from "react-select";
import { createElections } from "../../utils/elections";
import {
  candidatesRef,
  constituenciesRef,
  partyRef,
} from "../../config/firebase";
import {
  fetchSpecificFieldsFromCollection,
  fetchSpecificFieldsFromCollectionWithOutFilter,
} from "../../utils/utilityFunctions";
import toast  from "react-hot-toast";
const CreateElection = () => {
  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState("");

  const [startDateTime, setStartDataTime] = useState("");
  const [endDateTime, setEndDateTime] = useState("");
  const [selectedAssembly, setSelectedAssembly] = useState(null);
  const [selectedConstituencies, setSelectedConstituencies] = useState([]);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [constituencyOptions, setConstituencyOptions] = useState([]);
  const [candidateOptions, setCandidateOptions] = useState([]);
  useEffect(() => {
    const fetchConstituencies = async () => {
      try {
        const fieldsToRetrieve = ["name", "region", "assembly"];
        const filterField = "assembly";
        const filterValue = selectedAssembly.value; // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollection(
          constituenciesRef,
          fieldsToRetrieve,
          filterField,
          filterValue
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        setConstituencyOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", constituencyOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchConstituencies(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedAssembly]);
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const fieldsToRetrieve = ["name", "affiliation",];
        // Filter documents where the assembly field is selectedAssembly
        const partyData = await fetchSpecificFieldsFromCollectionWithOutFilter(
          candidatesRef,
          fieldsToRetrieve
        );
        console.log("Data new", partyData); // Update constituencies state
        const formattedPartyData = partyData.map((party) => ({
          value: party,
          label: party.name,
        }));
        console.log("Formatted Party Data", formattedPartyData);
        // console.log("Formatted Party Data", formattedPartyData);
        setCandidateOptions(formattedPartyData);
        // constituencyOptions = formattedPartyData;
        console.log("Constituency Options", candidateOptions);
      } catch (error) {
        console.error("Error fetching constituencies:", error);
      }
    };
    console.log("Selected Assembly", selectedAssembly);

    if (selectedAssembly) {
      fetchCandidates(); // Call fetchConstituencies when selectedAssembly changes
    }
  }, [selectedConstituencies]);

  const handleTypeChange = (event) => {
    setSelectedType(event.target.value);
  };

  const handleAssemblyChange = (selectedOptions) => {
    setSelectedAssembly(selectedOptions);
  };

  const handleConstituencyChange = (selectedOptions) => {
    setSelectedConstituencies(selectedOptions);
  };

  const handleCandidateChange = (index, selectedOptions) => {
    const updatedCandidates = [...selectedCandidates];
    updatedCandidates[index] = selectedOptions;
    setSelectedCandidates(updatedCandidates);
  };
  const AssemblyOptions = [
    { value: "National Assembly", label: "National Assembly" },
    { value: "Punjab", label: "Punjab Assembly" },
    { value: "Sindh", label: "Sindh Assembly" },
    // Add more options as needed
  ];

  const data = {
    title,
    selectedType,
    startDateTime,
    endDateTime,
    selectedAssembly,
    selectedConstituencies,
    selectedCandidates,
  };
  const getPartyImagebyName = async (name) => {
    try {
      const data = await fetchSpecificFieldsFromCollection(
        partyRef,
        ["symbol_url"],
        "name",
        name
      );

      console.log("Party Image Data", data);
      return data;
    } catch (error) {
      console.error("Error fetching party image:", error);
    }
  };
  useEffect(() => {
    const fetchData = async () => {
      const data = await getPartyImagebyName("Pakistan Tehreek-e-Insaf");
      console.log("Party Image Data", data);
    };
    fetchData();
  }, []);

  const electionData = {
    title: data.title,
    type: data.selectedType,
    start_at: data.startDateTime,
    end_at: data.endDateTime,
    created_at: new Date().toISOString(),
    constituencies: data.selectedConstituencies
      ? data.selectedConstituencies.map((constituency, index) => {
          return {
            const_id: constituency.value.id, // You may use a unique ID here
            name: constituency.value.name,
            candidates: data.selectedCandidates[index]
              ? data.selectedCandidates[index].map((candidate) => {
                  return {
                    id: candidate.value.id, // You may use a unique ID here
                    name: candidate.value.name,
                    partyImg: candidate.value.affiliation.symbol_url,
                  };
                })
              : [],
          };
        })
      : [],
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setLoading(true);
    setError(false); // Reset error state

    try {
      console.log("Election Data", electionData);
      const id = await createElections(electionData);
      console.log("Election Created Successfully", id);
      toast.success("Election created successfully!");
      
      // Clear form fields after successful submission
      setTitle("");
      setStartDataTime("");
      setEndDateTime("");
      setSelectedAssembly([]);
      setSelectedCandidates([]);
      setSelectedConstituencies([]);
      setSelectedType("");
    } catch (error) {
      setError(true);
      console.error("Error creating election:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Election
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <form
        action=""
        onSubmit={handleSubmit}
        className="mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Title
            </label>
            <input
              type="text"
              id="firstname"
              name="firstname"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Assembly
            </label>
            <Select
              options={AssemblyOptions}
              value={selectedAssembly}
              onChange={handleAssemblyChange}
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Start at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              name="date-time"
              value={startDateTime}
              onChange={(e) => setStartDataTime(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              End at
            </label>
            <input
              type="datetime-local"
              id="datetime"
              value={endDateTime}
              onChange={(e) => setEndDateTime(e.target.value)}
              name="endtime"
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label
              htmlFor="name1"
              className="text-lg font-normal text-slate-900"
            >
              Type
            </label>
            <select
              name="type"
              id="type"
              className="w-full p-1 border border-gray-300 rounded-md"
              value={selectedType}
              onChange={handleTypeChange}
            >
              <option value="">Select an option</option>
              <option value="general">General</option>
              <option value="by-election">By-Election</option>
              {/* Add more options as needed */}
            </select>
          </div>
        </div>
        <div>
          <label htmlFor="name1" className="text-lg font-normal text-slate-900">
            Constituencies
          </label>
          <Select
            isMulti
            options={constituencyOptions}
            value={selectedConstituencies}
            onChange={handleConstituencyChange}
          />
        </div>
        {selectedConstituencies.map((constituency, index) => (
          <div key={index}>
            <label
              htmlFor={`candidates-${index}`}
              className="text-lg font-normal text-slate-900"
            >
              Candidates for {constituency.label}
            </label>
            <Select
              isMulti
              id={`candidates-${index}`}
              options={candidateOptions}
              onChange={(selectedOptions) =>
                handleCandidateChange(index, selectedOptions)
              }
            />
          </div>
        ))}
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              Create Election {loading ? "...." : ""} {error ? "(Error!)" : ""}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreateElection;

// File: \Side Projects\facecast-vote\src\Pages\Elections\EditModal.jsx
import React, { useState, useEffect } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { updateElection, getElectiontById } from "../../utils/elections";
const EditModal = ({ isOpen, closeModal, electionId }) => {
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");

  const [loading, setLoading] = useState(false);
  const [updated, setUpdated] = useState(false);
  useEffect(() => {
    const fetchConstituency = async () => {
      try {
        const data = await getElectiontById(electionId);
        if (!data) {
          console.log("No Data Found.");
          return;
        }
        console.log("Election data for update:", data);

        setStartTime(data.start_at);
        setEndTime(data.end_at);
      } catch (error) {
        console.error("Error fetching constituency", error);
      }
    };
    fetchConstituency();
  }, [electionId]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    try {
      const data = {
        start_at: startTime,
        end_at: endTime,
      };
      const success = await updateElection(electionId, data);
      if (success) {
        console.log("Election updated successfully");
        closeModal();
      }
    } catch (error) {
      console.error("Error updating election", error);
    } finally {
      setLoading(false);
    }
  };
  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          {/* This is the modal itself */}
          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Edit Schedule
              </Dialog.Title>
              <div className="mt-2">
                {updated ? (
                  <div>
                    <p className="text-lg text-regal-blue-700">
                      Election Updated Successfully.
                    </p>
                  </div>
                ) : (
                  <form>
                    <div className="flex flex-col gap-2">
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          Start Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={startTime}
                          onChange={(e) => setStartTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>
                      <div>
                        <label
                          htmlFor="name1"
                          className="text-lg font-normal text-slate-900"
                        >
                          End Time
                        </label>
                        <input
                          type="datetime-local"
                          id="time"
                          name="time"
                          value={endTime}
                          onChange={(e) => setEndTime(e.target.value)}
                          className="w-full p-1 border border-gray-300 rounded-md"
                        />
                      </div>

                      <div className="flex justify-start py-4">
                        <button
                          onClick={handleSubmit}
                          className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80"
                        >
                          <span className="font-semibold text-base">
                            {loading ? "Updating..." : "Update Election"}
                          </span>
                        </button>
                      </div>
                    </div>
                  </form>
                )}
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default EditModal;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionHome.jsx
import React, { useEffect, useState } from "react";
import EditModal from "./EditModal";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { getElections } from "../../utils/elections";
import { MdOutlineLocalPrintshop } from "react-icons/md";

const ElectionHome = () => {
  // Define data
  const [elections, setElections] = useState([]);
  const [isOpen, setIsOpen] = useState(false);

  const closeModal = () => {
    setIsOpen(false);
  };

  const [selectedElectionId, setSelectedElectionId] = useState(null);

  const openModal = (id) => {
    setIsOpen(true);
    setSelectedElectionId(id);
  };
  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElections();
        console.log("data", data);
        if (data) {
          setElections(data);
        }
      } catch (error) {
        console.error("Error fetching documents:", error);
      }
    };
    fetchData();
  }, []);

  const generatePDF = (election) => {
    if (!election) return;

    // Get current date
    const currentDate = new Date();
    // Convert election date string to Date object
    const electionDate = new Date(election.election_date);

    // Create a new jsPDF instance with orientation 'p' for portrait mode
    const pdf = new jsPDF("p", "mm", "a4");

    // Add a header with Election Commission of Pakistan logo and title
    // Add announcement if current date is before election date

    // Add a title to the PDF
    pdf.setFontSize(18);
    pdf.setTextColor("#006600"); // Green color for title
    pdf.text("Election Data", 105, 20, { align: "center" });

    if (currentDate < electionDate) {
      // Additional text about the election announcement
      pdf.setFont("times", "normal");
      pdf.setFontSize(12);
      pdf.setTextColor("#000000"); // Black color for text
      pdf.text("Announcement:", 10, 40);
      pdf.text(
        "The Election Commission of Pakistan announces the details of the upcoming election.",
        10,
        50
      );
    }

    // Add election details to the PDF
    pdf.setFont("times", "normal");
    pdf.setFontSize(14);
    pdf.setTextColor("#000000"); // Black color for text
    pdf.text("Election Details:", 10, currentDate < electionDate ? 70 : 40);
    pdf.text(
      `Title: ${election.title}`,
      10,
      currentDate < electionDate ? 80 : 50
    );
    pdf.text(
      `Type: ${election.type}`,
      10,
      currentDate < electionDate ? 90 : 60
    );
    pdf.text(
      `Election Date: ${election.election_date}`,
      10,
      currentDate < electionDate ? 100 : 70
    );

    // Add constituencies and candidates to the PDF
    let yPosition = currentDate < electionDate ? 120 : 90; // Starting y-position for constituency data
    election.constituencies.forEach((constituency) => {
      pdf.setFont("times", "bold");
      pdf.setFontSize(16);
      pdf.text(`Constituency: ${constituency.name}`, 10, yPosition);
      yPosition += 10;
      constituency.candidates.forEach((candidate) => {
        pdf.setFont("times", "normal");
        pdf.setFontSize(14);
        pdf.text(`- ${candidate.name}`, 15, yPosition);
        yPosition += 5;
      });
      yPosition += 5; // Add spacing between constituencies
    });

    // Save the PDF file with a filename
    pdf.save("election_announcement_ecp.pdf");
  };

  // Save the PDF file with a filename

  // const difference = +new Date(election.end_at) - +new Date();
  const renderActions = (elections) => (
    <div className="flex items-center justify-between gap-4">
      <button
        className="bg-regal-blue-700 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-700/80"
        onClick={() => generatePDF(elections)} // Pass the current election item to generatePDF
      >
        <MdOutlineLocalPrintshop />
      </button>
      {
      +new Date(elections.end_at) - +new Date() > 0 ? (
        <button
          className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80"
          onClick={() => openModal(elections.id)} // Pass id to onEdit function
        >
          <FaRegEdit />
        </button>
      ) : null}
      <Link to={`${elections.id}`} className="text-green-600 hover:underline">
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
    </div>
  );

  return (
    <>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Elections Home
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      <EditModal
        isOpen={isOpen}
        closeModal={closeModal}
        electionId={selectedElectionId}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Type
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Start datetime - End datetime
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Election Date
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          -
          {elections.map((item, index) => (
            <tr key={index}>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.title}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{item.type}</div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).getHours() +
                    ":" +
                    new Date(item.start_at).getMinutes() +
                    " - " +
                    new Date(item.end_at).getHours() +
                    ":" +
                    new Date(item.end_at).getMinutes()}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">
                  {new Date(item.start_at).toISOString().split("T")[0]}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                {renderActions(item)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};

export default ElectionHome;

// File: \Side Projects\facecast-vote\src\Pages\Elections\ElectionPreview.jsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { getElectiontById } from "../../utils/elections";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";

const ElectionPreview = () => {
  const { id } = useParams();
  const [election, setElection] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getElectiontById(id);
        if (data) {
          setElection(data);
        }
      } catch (error) {
        console.error("Error fetching election:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!election) {
    return <div>No election found with the provided id.</div>;
  }

  return (
    <section>
      <ElectionDetails
        title={election.title}
        status={election.status}
        startdate={election.start_at}
        enddate={election.end_at}
        election_Date={election.election_date}
      />
      <Tabs>
        <TabList>
          <Tab>Constituencies</Tab>
          {election.constituencies.map((constituency) => (
            <Tab key={constituency.id}>{constituency.name}</Tab>
          ))}
        </TabList>

        <TabPanel>
          <ConstituenciesTabPanel election={election} />
        </TabPanel>
        {election.constituencies.map((constituency) => (
          <TabPanel key={constituency.id}>
            <CandidatesTabPanel candidates={constituency.candidates} />
          </TabPanel>
        ))}
      </Tabs>
    </section>
  );
};

const ElectionDetails = ({ title, startdate, enddate, election_Date }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <StatusBadge electionDate={election_Date} />
          <p className="text-sm text-gray-500">{election_Date}</p>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Start time</p>
            <p className="text-lg font-semibold">{startdate}</p>
          </div>
          <div>
            <p className="text-base font-medium">End time</p>
            <p className="text-lg font-semibold">{enddate}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

const StatusBadge = ({ electionDate }) => {
  const currentDate = new Date().getDate();
  const electionDateObj = new Date(electionDate).getDate();
  console.log("election date obj", electionDateObj, "currentDAte", currentDate);

  if (electionDateObj < currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-blue-500 rounded-full uppercase font-semibold">
        Upcoming
      </span>
    );
  } else if (electionDateObj > currentDate) {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-gray-500 rounded-full uppercase font-semibold">
        Offline
      </span>
    );
  } else {
    return (
      <span className="inline-block text-xs px-2 py-1 leading-none text-white bg-green-500 rounded-full uppercase font-semibold">
        Online
      </span>
    );
  }
};
const ConstituenciesTabPanel = ({ election }) => {
  return (
    <div>
      {election.constituencies.map((constituency) => (
        <div key={constituency.id}>
          <DataLine title={constituency.name} />
        </div>
      ))}
    </div>
  );
};

const CandidatesTabPanel = ({ candidates }) => {
  return (
    <div>
      {candidates.map((candidate) => (
        <div key={candidate.id}>
          <DataLine title="Candidate" value={candidate.name} />
        </div>
      ))}
    </div>
  );
};

export default ElectionPreview;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyCreate.jsx
import React, { useState } from "react";
import { createParty } from "../../utils/parties";
import { uploadImage } from "../../utils/globals";
import Alert from "../../Components/Alert";
import toast from "react-hot-toast";
const PartyCreate = () => {
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const data = {
      name: name,
      acronym: acronym,
      leader: leader,
      ideology: ideology,
      founded: founded,
      headQuaters: headQuaters,
      manifesto: manifesto,
      email: email,
      phone: phone,
      address: address,
      symbol: symbol,
      symbol_url: "",
    };
    try {
      if (image) {
        const url = await uploadImage(image, "images/party");

        console.log(url);
        data.symbol_url = url;
        setImageUrl(url);
        console.log("Image URL:", url);
      }

      const docRef = await createParty(data);
      console.log("Party created with ID:", docRef);
      if (!docRef) {
        console.log("Error creating Party");
        setError("Error creating Party");
      }
      toast.success("Party Created Successfully");
    } catch (error) {
      console.log(error);

      toast.error("Error creating Party");
    }
    setLoading(false);
  };

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Create Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyCreate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyHome.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { FaRegEdit } from "react-icons/fa";
import { MdOpenInNew } from "react-icons/md";
import { getParties, deleteParty } from "../../utils/parties";

const PartyHome = () => {
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [alertMessage, setAlertMessage] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await getParties();
        setParties(response);
      } catch (error) {
        setError("Error Fetching Data");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleDelete = async (id) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this party?"
    );
    if (confirmed) {
      try {
        await deleteParty(id);
        setParties(parties.filter((party) => party.id !== id));
        setAlertMessage("Party deleted successfully");
      } catch (error) {
        setAlertMessage("Error deleting party");
      }
    }
  };

  const renderActions = (id) => (
    <div className="flex items-center justify-between gap-4 ">
      <Link to={`update/${id}`}>
        <button className="bg-regal-blue-600 text-regal-blue-50 p-2 rounded-md hover:bg-regal-blue-600/80">
          <FaRegEdit />
        </button>
      </Link>
      <Link to={`${id}`}>
        <button className="bg-green-600 text-green-50 p-2 rounded-md hover:bg-green-600/80">
          <MdOpenInNew />
        </button>
      </Link>
      <button
        className="bg-red-600 text-red-50 p-2 rounded-md hover:bg-red-600/80"
        onClick={() => handleDelete(id)}
      >
        Delete
      </button>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-semibold text-gray-800 py-4">Party Home</h1>
      <hr className="py-2 border-t-2 border-gray-300" />
      {alertMessage && (
        <div
          className={`alert ${
            alertMessage.includes("successfully")
              ? "alert-success"
              : "alert-error"
          }`}
        >
          {alertMessage}
        </div>
      )}
      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div>{error}</div>
      ) : (
        <table className="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Reg Number
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Foundation Year
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Leader
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {parties.map((item, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.reg_number}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.name}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.founded}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-900">{item.leader}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex justify-end items-center">
                  {renderActions(item.id)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PartyHome;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { getPartybyId, updateParty } from "../../utils/parties";
import { useParams } from "react-router-dom";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";
const PartyUpdate = () => {
  const { id } = useParams();
  const [name, setName] = useState("");
  const [acronym, setAcronym] = useState("");
  const [leader, setLeader] = useState("");
  const [ideology, setIdeology] = useState("");
  const [founded, setFounded] = useState("");
  const [headQuaters, setHeadQuaters] = useState("");
  const [manifesto, setManifesto] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [symbol, setSymbol] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Store the image file in state
  };
  const data = {
    name: name,
    acronym: acronym,
    leader: leader,
    ideology: ideology,
    founded: founded,
    headQuaters: headQuaters,
    manifesto: manifesto,
    email: email,
    phone: phone,
    address: address,
    symbol_url: "",
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const url = await uploadImage(image, "images/party");
      setSuccess("Image uploaded successfully");
      data.symbol_url = url;
      setImageUrl(url);
      console.log("Image URL:", url);
      const docRef = await updateParty(id, data);
      console.log("Party created with ID:", docRef);
      setSuccess("Party updated successfully");
      if (!docRef) {
        console.log("Error creating Party");
        toast.error("Error creating Party");
      }
    } catch (error) {
      console.log(error);
      setError("Error creating Party");
    }
    setLoading(false);
  };
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const partyData = await getPartybyId(id);
        console.log("Party Data:", partyData);
        setName(partyData.name);
        setAcronym(partyData.acronym);
        setLeader(partyData.leader);
        setIdeology(partyData.ideology);
        setFounded(partyData.founded);
        setHeadQuaters(partyData.headQuaters);
        setManifesto(partyData.manifesto);
        setEmail(partyData.email);
        setPhone(partyData.phone);
        setAddress(partyData.address);
        setSymbol(partyData.symbol);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [id]);

  return (
    <section>
      <h1 className="text-3xl font-semibold text-gray-800 py-6">
        Update Party
      </h1>
      <hr className="py-4 border-t-2 border-gray-300" />
      {success && (
        <Alert
          message={success}
          type="success"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      {error && (
        <Alert
          message={error}
          type="error"
          dismissible={true}
          autoHideDelay={3000}
        />
      )}
      <form
        action=""
        onSubmit={handleSubmit}
        className=" mx-auto flex flex-col items-left gap-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol
            </label>
            <input
              type="text"
              id="symbol"
              name="symbol"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Symbol Image
            </label>
            <input
              type="file"
              id="img"
              name="img"
              onChange={handleImageChange}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Acronym
            </label>
            <input
              type="text"
              id="code"
              name="code"
              value={acronym}
              onChange={(e) => setAcronym(e.target.value)}
              maxLength={10}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="leader" className="text-lg font-normal text-slate-900">
              Leader Name
            </label>
            <input
              type="text"
              id="leader"
              name="leader"
              value={leader}
              onChange={(e) => setLeader(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label
              for="ideology"
              className="text-lg font-normal text-slate-900"
            >
              Ideology
            </label>
            <input
              type="text"
              id="ideology"
              name="ideology"
              value={ideology}
              onChange={(e) => setIdeology(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="date" className="text-lg font-normal text-slate-900">
              Foundation Year
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={founded}
              onChange={(e) => setFounded(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="hq" className="text-lg font-normal text-slate-900">
              Head Quaters
            </label>
            <input
              type="text"
              id="hq"
              name="hq"
              value={headQuaters}
              onChange={(e) => setHeadQuaters(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Manifesto
            </label>
            <input
              type="text"
              id="manifesto"
              name="manifesto"
              value={manifesto}
              onChange={(e) => setManifesto(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 py-2">
          Contact Details
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          <div>
            <label for="email" className="text-lg font-normal text-slate-900">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Phone
            </label>
            <input
              type="phone"
              id="phone"
              name="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label for="name1" className="text-lg font-normal text-slate-900">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-1 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        <div className="flex justify-start py-4">
          <button className="bg-regal-blue-700 text-white px-3 py-2 drop-shadow-sm rounded-md hover:bg-regal-blue-700/80">
            <span className="font-semibold text-base">
              {loading ? "Creating..." : "Create Party"}
            </span>
          </button>
        </div>
      </form>
    </section>
  );
};

export default PartyUpdate;

// File: \Side Projects\facecast-vote\src\Pages\Parties\PartyView.jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import DataLine from "../../Components/DataLine";
import { politicalParties } from "../../data/parties.js";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import { getPartybyId } from "../../utils/parties";
const PartyView = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  useEffect(() => {
    const fetchData = async () => {
      try {
        const partyData = await getPartybyId(id);
        if (!partyData) {
          return setError("No Data Found.");
        }
        setMessage("Data Fetched Successfully");
        console.log("Constituency data:", partyData);

        setData(partyData);
      } catch (error) {
        setError("Error fetching data:", error);
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [id]);

  if (!data) return <div>Loading...</div>;

  return (
    <section className="md:px-8 px-4">
      <div className="py-2">
        <HeaderCard title={data.name} data={data} />
      </div>
      <Tabs>
        <TabList>
          <Tab>Overview</Tab>
          <Tab>Contact Information</Tab>
          <Tab>Sybmol</Tab>
        </TabList>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Overview
          </h4>
          <DataLine title="Acronym" value={data.acronym || "N/A"} />
          <DataLine title="Leader" value={data.leader || "N/A"} />
          <DataLine title="Foundation Year" value={data.founded || "N/A"} />
          <DataLine title="Ideology" value={data.ideology || "N/A"} />
          <DataLine title="Headquarters" value={data.headQuaters || "N/A"} />
          <DataLine title="Manifesto" value={data.manifesto || "N/A"} />
        </TabPanel>
        <TabPanel>
          <h4 className="text-lg font-medium border-b-2 border-gray-300 py-2">
            Contact Information
          </h4>
          <DataLine title="Phone" value={data.phone || "N/A"} />
          <DataLine title="Email" value={data.email || "N/A"} />
          <DataLine title="Address" value={data.address || "N/A"} />
        </TabPanel>
        <TabPanel>
          <DataLine title="Party Symbol" value="" />
          <div>
            <img
              src={data.symbol_url}
              alt={data.name}
              className="w-40 h-40 rounded-sm"
            />
          </div>
        </TabPanel>
      </Tabs>
    </section>
  );
};

const HeaderCard = ({ title, data }) => {
  return (
    <div className="border-b border-b-stone-300 mb-0 py-3">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
        </div>
        <div className="flex items-center justify-between gap-6">
          <div>
            <p className="text-base font-medium">Registeration Number</p>
            <p className="text-lg font-semibold">{data.reg_number || "N/A"}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PartyView;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfilePage.jsx
import React, { useState, useEffect } from "react";
import BreadCrumbs from "../../Components/Utils/BreadCrumbs";
import DataLine from "../../Components/DataLine";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail } from "../../utils/profile";
const ProfilePage = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("curr user email", currUser.email);
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile); // Set profile state with fetched data
        console.log("user profile", userProfile);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile(); // Call fetchProfile function inside useEffect
  }, []); // Add currUser as a dependency to useEffect
  return (
    <div class="">
      <div class="p-8 bg-white shadow mt-12 ">
        <div class="grid grid-cols-1 md:grid-cols-3 ">
          <div></div>
          <div class="relative">
            <div className="w-48 h-48 border-2 mx-auto rounded-full absolute inset-x-0 top-0 -mt-24 flex items-center justify-center text-regal-blue-50">
              {profile.image ? (
                <img
                  className="h-44 w-44 rounded-full"
                  src={profile.image}
                  alt={profile.fname + "Profile Image"}
                />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-24 w-24 bg-regal-blue-700 rounded-full"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
              )}
            </div>
          </div>
          <div></div>
        </div>

        <div class="mt-32 text-center border-b pb-10 max-w-xl mx-auto">
          <div class="bg-white overflow-hidden rounded-md border">
            <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
              <div class="sm:divide-y sm:divide-gray-200">
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Full name
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.fname + " " + profile.lname}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Email address
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.email}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">
                    Phone number
                  </span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.phone}
                  </span>
                </div>
                <div class="py-2 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <span class="text-sm font-medium text-gray-500">CNIC</span>
                  <span class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    {profile.cnic}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* <div class="mt-12 flex flex-col justify-center">
          <p class="text-gray-600 text-center font-light lg:px-16">
            An artist of considerable range, Ryan — the name taken by
            Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs and
            records all of his own music, giving it a warm, intimate feel with a
            solid groove structure. An artist of considerable range.
          </p>
          <button class="text-indigo-500 py-2 px-4  font-medium mt-4">
            Show more
          </button>
        </div> */}
      </div>
    </div>
  );
};

export default ProfilePage;

// File: \Side Projects\facecast-vote\src\Pages\Profile\ProfileUpdate.jsx
import React, { useState, useEffect } from "react";
import Alert from "../../Components/Alert";
import { useAuth } from "../../context/AuthContext";
import { getProfileByEmail, updateProfileByEmail } from "../../utils/profile";
import { uploadImage } from "../../utils/globals";
import toast from "react-hot-toast";

const ProfileUpdate = () => {
  const { currUser } = useAuth();
  const [profile, setProfile] = useState({});
  const [fname, setFname] = useState("");
  const [lname, setLname] = useState("");
  const [cnic, setCnic] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const userProfile = await getProfileByEmail(currUser.email);
        setProfile(userProfile);
        setFname(userProfile.fname);
        setLname(userProfile.lname);
        setCnic(userProfile.cnic);
        setPhone(userProfile.phone);
        setImageUrl(userProfile.image);
      } catch (error) {
        console.error("Error fetching profile:", error);
      }
    };

    fetchProfile();
  }, [currUser.email]);
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImageUrl(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage("");
    setSuccessMessage("");
  
    try {
      if (currUser) {
        let updatedProfile = {
          email: currUser.email,
          fname,
          lname,
          cnic,
          phone,
          image: imageUrl, // Use the existing image URL if no new image is uploaded
        };
  
        if (image) {
          // If a new image is uploaded, upload it and update the profile with the new image path
          const imagePath = await uploadImage(image, "/user/profile");
          console.log("Image Path", imagePath);
          updatedProfile = { ...updatedProfile, image: imagePath };
        }
  
        await updateProfileByEmail(currUser.email, updatedProfile);
        setSuccessMessage("Profile updated successfully!");
        toast.success("Profile updated successfully!");
      }
    } catch (error) {
      console.error("Error during profile update:", error);
      setErrorMessage("Failed to update profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div>
      <main>
        <section className="p-6 max-w-4xl mx-auto ">
          <h2 className="text-2xl font-semibold text-left sm:text-3xl mb-6 text-slate-900">
            Update Profile
          </h2>
          {errorMessage && <Alert message={errorMessage} type="error" />}
          {successMessage && <Alert message={successMessage} type="success" />}
          <form
            onSubmit={handleSubmit}
            className="mx-auto flex flex-col items-left gap-4"
          >
            <div>
              <label
                htmlFor="name"
                className="text-lg font-normal text-slate-900"
              >
                Image
              </label>
              <input
                type="file"
                id="image"
                name="image"
                accept="image/*"
                onChange={(e) => handleImageUpload(e)}
                
                className="w-full p-1 border border-gray-300 rounded-md"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="fname"
                  className="text-lg font-normal text-slate-900"
                >
                  First name
                </label>
                <input
                  type="text"
                  id="fname"
                  name="fname"
                  value={fname}
                  onChange={(e) => setFname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your first name"
                />
              </div>
              <div>
                <label
                  htmlFor="lname"
                  className="text-lg font-normal text-slate-900"
                >
                  Last name
                </label>
                <input
                  type="text"
                  id="lname"
                  name="lname"
                  value={lname}
                  onChange={(e) => setLname(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your last name"
                />
              </div>
              <div>
                <label
                  htmlFor="cnic"
                  className="text-lg font-normal text-slate-900"
                >
                  ID number (CNIC)
                </label>
                <input
                  type="number"
                  id="cnic"
                  name="cnic"
                  value={cnic}
                  onChange={(e) => setCnic(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your CNIC number"
                />
              </div>
              <div>
                <label
                  htmlFor="phone"
                  className="text-lg font-normal text-slate-900"
                >
                  Phone
                </label>
                <input
                  type="phone"
                  id="phone"
                  name="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full p-1 border border-gray-300 rounded-md"
                  placeholder="Enter your phone number"
                />
              </div>
            </div>
            <div className="flex items-center justify-between mt-4">
              <button
                className={`bg-regal-blue-700 text-white p-2 px-4 rounded-md w-max text-center ${
                  loading ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={loading}
              >
                {loading ? "Updating..." : "Update"}
              </button>
            </div>
          </form>
        </section>
      </main>
    </div>
  );
};

export default ProfileUpdate;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\AnnounceResult.js
export const AnnounceResults = (id) => {
  console.log("Election has ended. Results will be announced soon.", id);
};

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\Modal.jsx
import React, { useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { checkUserExists } from "../../utils/profile";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const Modal = ({ isOpen, closeModal, onUserExists }) => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const { currUser } = useAuth();
  const navigate = useNavigate();

  // Function to handle input change for email
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
    setError(""); // Clear any previous errors when user types in the email field
  };

  // Function to check if the user exists based on the input email
  const handleCheckUserExists = async () => {
    try {
      const exists = await checkUserExists(email, currUser);
      if (exists) {
        onUserExists(exists);
        toast.success("User exists. Please proceed.");
        closeModal();
        // User exists, navigate or perform desired action
        // For example, navigate to a specific page
        // navigate("/da/shboard");
      } else {
        // User does not exist, display an error message or take appropriate action
        toast.error("User does not exist. Please try again.");
      }
    } catch (error) {
      console.error("Error checking user existence:", error);
      toast.error("Error checking user existence. Please try again.");
    }
  };

  return (
    <Transition show={isOpen} as={React.Fragment}>
      <Dialog
        as="div"
        className="fixed inset-0 z-10 overflow-y-auto"
        onClose={closeModal}
      >
        <div className="min-h-screen px-4 text-center">
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
          </Transition.Child>

          <span
            className="inline-block h-screen align-middle"
            aria-hidden="true"
          >
            &#8203;
          </span>

          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-gray-900"
              >
                Please verify
              </Dialog.Title>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Please verify your identity to proceed
                </p>
              </div>
              <div className="mt-4">
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="mt-1 p-2 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  placeholder="Enter your email"
                  value={email}
                  onChange={handleEmailChange}
                />
              </div>
              {error && <p className="text-sm text-red-500 mt-2">{error}</p>}
              <div className="mt-4">
                <button
                  onClick={handleCheckUserExists}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                >
                  Verify
                </button>
              </div>
            </div>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
};

export default Modal;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteHome.jsx
import React, { useState, useEffect } from "react";
// import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import { getElections } from "../../utils/elections";
import CountdownTimer from "../../Components/CountdownTimer";
import { getProfileByEmail } from "../../utils/profile";
import Instructions from "../../Components/Instructions";
import { Link } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";


const VoteHome = () => {
  const { currUser } = useAuth();
  const [elections, setElections] = useState([]);
  const [userElection, setUserElection] = useState([]);
  const [timeRem, setTimeRem] = useState(0);

  // useEffect(() => {

  //   const fetchElections = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //       } else {
  //         console.log("No data found");
  //         return;
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   fetchElections();
  // }, [currUser]);

  // useEffect(() => {
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       const data = await getElectionData();
  //       console.log("found", data);
  //       if (data) {
  //         console.log("Data found", data);
  //         setElections(data);

  //         const filteredElections = elections.filter((election) => {
  //           const userArea = profile.address.area;

  //           return election.constituencies.some((constituency) => {
  //             const constituencyArea = constituency.name;
  //             return constituencyArea.includes(userArea);
  //           });
  //         });

  //         console.log("filteredElections", filteredElections);
  //         setUserElection(filteredElections); // Update userElection state with filtered elections
  //       } else {
  //         console.log("No data found");
  //       }
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  //   elections && elections.map((election) => {
  //     console.log("constiturenceis", election.constituencies);
  //   });
  //   // console.log(elections.constituencies);
  // }, [currUser.email, setElections]); // Include currUser.email and setElections in the dependency array

  // useEffect(() => {
  //   console.log("elections", elections);
  //   const getElectionsByUserArea = async () => {
  //     try {
  //       const profile = await getProfileByEmail(currUser.email);
  //       if (!profile) {
  //         console.log("No profile found");
  //         return;
  //       }
  //       console.log("user election", elections);
  //       console.log("user election", profile.address.area);

  //       const filteredElections = elections.filter((election) =>
  //         election.constituencies.some(
  //           (constituency) => constituency.name === profile.address.area
  //         )
  //       );
  //       console.log("filteredElections", filteredElections);
  //     } catch (error) {
  //       console.error("Error fetching elections", error);
  //     }
  //   };
  //   getElectionsByUserArea();
  // }, [elections]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const profile = await getProfileByEmail(currUser.email);
        if (!profile) {
          console.log("No profile found");
          return;
        }
        const electionsData = await getElections();
        if (!electionsData) {
          console.log("No election data found");
          return;
        }
        const currentDate = new Date();
        const userArea = profile.address.area;
        console.log("userArea", userArea);
        const filteredElections = electionsData.filter(
          (election) =>
            election.constituencies.some((constituency) =>
              constituency.name.includes(userArea)
            ) &&
            new Date(election.start_at) <= currentDate &&
            currentDate <= new Date(election.end_at)
        );
        console.log("filteredElections", filteredElections);
        setUserElection(filteredElections);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, [currUser.email]);
  return (
    <section className="px-4 py-5 md:py-5">
      <div className="py-5">
        <h1 className="pb-4 text-xl font-medium">Instructions</h1>
        <Instructions
          stepNumber={1}
          description="User Needs to Vderify his identity to vote"
        />
        <Instructions
          stepNumber={2}
          description="You have only 30 seconds to cast a vote"
        />
        <Instructions
          stepNumber={4}
          description="You can only vote once for a candidate"
        />
        <Instructions
          stepNumber={3}
          description="You can only vote for the candidates in your area"
        />
      </div>
      <div className="py-3 border-b border-b-slate-300">
        <h1 className="pb-4 text-3xl font-medium">Elections in your Area</h1>
      </div>
      {userElection.length > 0 ? (
        userElection.map((election) => (
          <div key={election.id}>
            <Link to={`${election.id}`}>
              <ElectionsDetails
                title={election.title}
                end={election.end_at}
                electionType={election.type}
              />
            </Link>
          </div>
        ))
      ) : (
        <div className="flex items-center justify-center mt-32">
          <h1 className="text-2xl font-sans font-semibold select-none">
            No elections found For Your Area
          </h1>
        </div>
      )}
    </section>
  );
};


const ElectionsDetails = ({ title, end, electionType }) => {
  const announceResults = () => {
    console.log("Time's up!");
  };

  return (
    <div className="border-b border-b-stone-300 mb-0 py-4">
      <div className="flex justify-between items-center pt-4">
        <div className="flex flex-col gap-2 items-start">
          {/* title */}
          <h2 className="md:text-2xl md:font-semibold text-xl font-bold">
            {title}
          </h2>
          <h2 className="md:text-md md:font-semibold text-base font-semibold">
            Election Type: {electionType}
          </h2>
        </div>
        <div className="">
          <CountdownTimer
            targetDate={new Date(end)}
            onTimerEnd={announceResults}
          />
        </div>
      </div>
    </div>
  );
};

export default VoteHome;

// File: \Side Projects\facecast-vote\src\Pages\VoteNow\VoteScreen.jsx
// VoteScreen.jsx
import React, { useEffect, useState } from "react";
import ElectionsDetails from "../../Components/Utils/ElectionsDetails";
import ElectionCard from "../../Components/ElectionCard";
// import { AnnounceResults } from "./AnnounceResult";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import { createUserVote, checkIfUserVoted } from "../../utils/userVotes";
import { getElectiontById } from "../../utils/elections";
import { useAuth } from "../../context/AuthContext";
import Alert from "../../Components/Alert";
import Modal from "./Modal";
import { faceio } from "../../config/faceio";
import { useDispatch, useSelector } from "react-redux";
import { decrementVoteAmount } from "../../config/Slices/walletSlice";
import toast from "react-hot-toast";

const VoteScreen = () => {
  const dispatch = useDispatch();
  const walletValue = useSelector((state) => state.voteAmountWallet.value);

  const { id } = useParams();
  const { currUser } = useAuth();
  const navigate = useNavigate();
  const [election, setElection] = useState({});
  const [constituency, setConstituency] = useState({});
  const [voted, setVoted] = useState(false);
  const [verified, setVerified] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [userExists, setUserExists] = useState(false);
  const [message, setMessage] = useState("");
  const [authError, setAuthError] = useState(false);
  const [loading, setLoading] = useState(true);

  const openModal = () => {
    setIsOpen(true);
  };

  const closeModal = () => {
    setIsOpen(false);
  };

  const authenticateUser = async () => {
    try {
      const userData = await faceio.authenticate({
        locale: "auto", // Default user locale
      });
      console.log("Success, user identified", userData);
      setVerified(true);
      faceio.restartSession();
    } catch (error) {
      console.error("Error authenticating user:", error);
      setAuthError(true); // Set authentication error flag
    }
  };

  useEffect(() => {
    authenticateUser();
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      navigate("/voter");
    }, 60000); // 1 minute in milliseconds

    return () => clearTimeout(timer);
  }, [navigate]);

  const handleUserExists = (exists) => {
    if (exists) {
      setUserExists(exists);
      setVerified(true);
    } else {
      setVerified(false);
      setMessage(
        <div className="p-4 bg-red-100 rounded-md">
          Error Validating User Please Try Again.{" "}
          <button onClick={handleNavigateButtonClick} className="text-red-800">
            Go back
          </button>
        </div>
      );
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedElection = await getElectiontById(id);
        const userArea = "Lahore"; // Replace with actual user's area
        const matchingConstituency = fetchedElection.constituencies.find(
          (constituency) => constituency.name.includes(userArea)
        );
        console.log("matchingConstituency", matchingConstituency);
        setElection(fetchedElection);
        setConstituency(matchingConstituency);
      } catch (error) {
        console.error("Error fetching election:", error);
        setMessage("Error fetching election details, please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleNavigateButtonClick = () => {
    navigate("/voter");
  };

  useEffect(() => {
    const difference = +new Date(election.end_at) - +new Date();

    if (difference <= 0) {
      setMessage(
        <div className="p-4 bg-regal-blue-100 rounded-md">
          Election has ended. Results will be announced soon.{" "}
          <button
            onClick={handleNavigateButtonClick}
            className="text-regal-blue-600"
          >
            Go back
          </button>
        </div>
      );
    }
  }, [election, constituency]);

  useEffect(() => {
    const checkIfVoted = async () => {
      try {
        const ifVoted = await checkIfUserVoted(
          currUser.uid,
          constituency.const_id,
          election.id
        );
        setVoted(ifVoted);
        if (ifVoted) {
          setMessage("You have already voted");
        }
      } catch (error) {
        console.error("Error checking if user voted:", error);
        setMessage("Error checking vote status, please try again.");
      }
    };
    if (currUser && constituency.const_id && election.id) {
      checkIfVoted();
    }
  }, [currUser, constituency, election]);

  const handleOtherAuth = () => {
    openModal();
  };

  const handleVote = async (candidateId) => {
    console.log("voted for ", candidateId);
    console.log("user", currUser.uid);
    if (walletValue < 5) {
      toast.error("You don't have enough balance to vote");
      return;
    } else {
      try {
        if (!voted) {
          await createUserVote({
            candidate_id: candidateId,
            election_id: election.id,
            user_id: currUser.uid,
            constituency_id: constituency.const_id,
            dated: new Date().toISOString(),
          });
          dispatch(decrementVoteAmount());
          console.log("voted successfully");
          toast.success("Voted Successfully");
          setVoted(true);
        } else {
          console.log("user has already voted");
        }
      } catch (error) {
        console.log("error", error);
        toast.error("Error voting, please try again.");
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      {isOpen && (
        <Modal
          isOpen={isOpen}
          closeModal={closeModal}
          onUserExists={handleUserExists}
        />
      )}
      {verified ? (
        <section className="md:px-8 py-4 px-4">
          <div>
            <ElectionsDetails
              title={election.title}
              end={election.end_at}
              electionType={election.type}
              id={id}
            />
          </div>

          <div className="py-4 flex items-center justify-between">
            <h3 className="text-lg font-normal">
              Date:{" "}
              <span className="font-semibold">
                {new Date(election.start_at).toLocaleString() || ""}
              </span>
            </h3>
          </div>
          {message.length > 0 && (
            <Alert
              message={message}
              type="success"
              dismissible={true}
              autoHideDelay={8000}
            />
          )}
          {voted && (
            <div className="bg-green-200 p-4 flex items-center rounded-md my-5">
              <p className="text-green-800 font-semibold">
                You have Voted Successfully
              </p>
            </div>
          )}
          <div className="grid px-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
            {constituency.candidates &&
              constituency.candidates.map((candidate) => (
                <ElectionCard
                  key={candidate.id}
                  candidate={candidate}
                  onVote={handleVote}
                  disabled={voted}
                />
              ))}
          </div>
        </section>
      ) : (
        <div className="bg-red-200 p-4 flex items-center rounded-md my-5">
          <p className="text-red-950 font-semibold">
            Auth failed try again later
          </p>
          <button className="mx-2" onClick={handleOtherAuth}>
            Other method
          </button>
        </div>
      )}
    </div>
  );
};

export default VoteScreen;

// File: \Side Projects\facecast-vote\src\utils\candidates.js
import { candidatesRef } from "../config/firebase";
import {
  getCollectionById,
  createDocument,
  getCollections,
  updateDocument,
  deleteDocument, // Ensure you import the deleteDocument function from your globals file
} from "./globals";

export const createCandidate = async (data) => {
  try {
    const docId = await createDocument(candidatesRef, data);
    console.log("Candidate created with ID:", docId);
    if (!docId) {
      console.log("Error creating Candidate");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getCandidates = async () => {
  try {
    const collections = await getCollections(candidatesRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getCandidatesById = async (id) => {
  try {
    const documentData = await getCollectionById(candidatesRef, id);
    console.log("Candidate data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateCandidates = async (id, newData) => {
  try {
    const isSuccess = await updateDocument(candidatesRef, id, newData);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

// Add the deleteCandidate function here
export const deleteCandidate = async (id) => {
  try {
    const isSuccess = await deleteDocument(candidatesRef, id);
    if (isSuccess) {
      alert("Candidate deleted successfully");
      return true;
    } else {
      console.log("Document deletion failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\constituency.js
import { constituenciesRef } from "../config/firebase";
import {
  getCollectionById,
  createDocument,
  getCollections,
  updateDocument,
  deleteDocument, // Import the delete function from globals
} from "./globals";

export const createConstituency = async (data) => {
  try {
    const docId = await createDocument(constituenciesRef, data);
    console.log("Constituency created with ID:", docId);
    if (!docId) {
      console.log("Error creating constituency");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getConstituencies = async () => {
  try {
    const collections = await getCollections(constituenciesRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getConstituencyById = async (id) => {
  // Corrected function name
  try {
    const documentData = await getCollectionById(constituenciesRef, id);
    console.log("Constituency data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateConstituency = async (id, newData) => {
  try {
    const isSuccess = await updateDocument(constituenciesRef, id, newData);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

export const deleteConstituency = async (id) => {
  try {
    const isSuccess = await deleteDocument(constituenciesRef, id);
    if (isSuccess) {
      alert("Constituency deleted successfully");
      return true;
    } else {
      console.log("Document deletion failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\elections.js
import { electionsRef } from "../config/firebase"; // Assuming you've defined electionsRef correctly in your firebase config file
import {
  getDocs,
  getDoc,
  doc,
  query,
  onSnapshot,
  orderBy,
  where,
} from "firebase/firestore"; // Correct import statement
import { createDocument, updateDocument } from "./globals";


export const getElections = async () => {
  try {
    const querySnapshot = await getDocs(electionsRef);
    const data = [];
    querySnapshot.forEach((doc) => {
      data.push({ id: doc.id, ...doc.data() });
    });
    return data;
  } catch (error) {
    console.log("Error Fetching data", error);
  }
};

export const createElections = async (data) => {
  try {
    console.log("Creating document...", data);
    const docId = await createDocument(electionsRef, data);
    if (!docId) {
      console.log("Error creating constituency");
    }
    return docId; // Return the document ID on success
  } catch (e) {
    console.error("Error adding document: ", e);
  }
};

export const getElectionData = () => {
  const currentDateTime = new Date();

  const q = query(
    electionsRef,
    where("start_at", "<=", currentDateTime),
    orderBy("start_at", "asc")
  );

  return new Promise((resolve, reject) => {
    onSnapshot(
      q,
      (snapshot) => {
        let elections = [];
        snapshot.forEach((doc) => {
          elections.push({ ...doc.data(), id: doc.id });
        });
        console.log(elections);
        resolve(elections);
      },
      reject
    );
  });
};
export const getElectionData1 = () => {
  const today = new Date().toISOString().split("T")[0];
  const q = query(
    electionsRef,
    where("election_date", ">=", today),
    where("status", "in", ["online", "upcoming"]),
    orderBy("created_at", "desc")
  );

  return new Promise((resolve, reject) => {
    onSnapshot(
      q,
      (snapshot) => {
        let elections = [];
        snapshot.forEach((doc) => {
          elections.push({ ...doc.data(), id: doc.id });
        });
        console.log(elections);
        resolve(elections);
      },
      reject
    );
  });
};

export const getElectiontById = async (documentId) => {
  try {
    const docRef = doc(electionsRef, documentId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      // Document exists
      return { id: docSnap.id, ...docSnap.data() };
    } else {
      // Document does not exist
      return null;
    }
  } catch (error) {
    console.error("Error getting document:", error);
    throw error; // Handle or propagate the error as needed
  }
};

export const updateElection = async (documentId, data) => {
  try {
    const docRef = await updateDocument(electionsRef, documentId, data);
    if (!docRef) {
      console.log("Error updating document");
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error updating document:", error);
    return false;
  }
};

// File: \Side Projects\facecast-vote\src\utils\globals.js
import {
  getDocs,
  addDoc,
  getDoc,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { storage } from "../config/firebase";
export const createDocument = async (collectionRef, data) => {
  try {
    const docRef = await addDoc(collectionRef, data);
    console.log("Document written with ID: ", docRef.id);
    return docRef.id; // Return the document ID on success
  } catch (error) {
    console.error("Error creating document:", error); // Use console.error for errors
    return null; // Return null or handle errors as needed
  }
};

export const getCollections = async (collectionRef) => {
  try {
    const querySnapshot = await getDocs(collectionRef);
    const collections = [];
    querySnapshot.forEach((doc) => {
      collections.push({ id: doc.id, ...doc.data() });
    });
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
    return []; // Return empty array or handle errors as needed
  }
};

export const getCollectionById = async (collectionRef, id) => {
  try {
    const docRef = doc(collectionRef, id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
      return docSnap.data();
    } else {
      console.log("Document does not exist!");
      return null; // Return null or handle non-existent document
    }
  } catch (error) {
    console.error("Error getting document:", error);
    return null; // Return null or handle errors as needed
  }
};

export const updateDocument = async (collectionRef, id, newData) => {
  try {
    const documentRef = doc(collectionRef, id);
    await updateDoc(documentRef, newData);
    console.log("Document updated successfully");
    return true; // Return true on success
  } catch (error) {
    console.error("Error updating document:", error);
    return false; // Return false or handle errors as needed
  }
};

export const uploadImage = async (file, pathPrefix) => {
  try {
    const fileName = `${generateUniqueFileName()}_${file.name}`;

    // Construct the full path
    const fullPath = `${pathPrefix}/${fileName}`;
    const storageRef = ref(storage, fullPath);
    await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(storageRef);
    console.log("Image uploaded successfully");
    return downloadURL;
  } catch (error) {
    console.error("Error uploading image:", error);
    return null;
  }
};

export const deleteDocument = async (collectionRef, id) => {
  try {
    const docRef = doc(collectionRef, id);
    await deleteDoc(docRef);
    return true;
  } catch (error) {
    console.error("Error deleting document:", error);
    return false;
  }
};

const generateUniqueFileName = () => {
  // Generate a random string
  const randomString = Math.random().toString(36).substring(2, 8);
  // Generate a timestamp
  const timestamp = Date.now();
  // Combine random string and timestamp to create a unique filename
  return `${randomString}_${timestamp}`;
};

// File: \Side Projects\facecast-vote\src\utils\parties.js
import {
  createDocument,
  getCollectionById,
  getCollections,
  updateDocument,
  deleteDocument,
} from "./globals";
import { partyRef } from "../config/firebase";

export const createParty = async (data) => {
  try {
    const docId = await createDocument(partyRef, data);
    console.log("Party created with ID:", docId);
    if (!docId) {
      console.log("Error creating Party");
    }
    return docId;
  } catch (error) {
    console.log(error);
  }
};

export const getParties = async () => {
  try {
    const collections = await getCollections(partyRef);
    console.log("Collections:", collections);
    return collections;
  } catch (error) {
    console.error("Error fetching collections:", error);
  }
};

export const getPartybyId = async (id) => {
  try {
    const documentData = await getCollectionById(partyRef, id);
    console.log("Party data by Id:", documentData);
    return documentData;
  } catch (error) {
    console.error("Error fetching document:", error);
  }
};

export const updateParty = async (id, data) => {
  try {
    const isSuccess = await updateDocument(partyRef, id, data);
    if (isSuccess) {
      console.log("Document updated successfully");
      return true;
    } else {
      console.log("Document update failed");
      return false;
    }
  } catch (error) {
    console.error("Error updating document:", error);
  }
};

export const deleteParty = async (id) => {
  try {
    const isSuccess = await deleteDocument(partyRef, id);
    if (isSuccess) {
      alert("Party deleted successfully");
      return true;
    } else {
      console.log("Document delete failed");
      return false;
    }
  } catch (error) {
    console.error("Error deleting document:", error);
  }
};

// File: \Side Projects\facecast-vote\src\utils\pdgGen.js
import { jsPDF } from "jspdf";
import "jspdf-autotable";

export const generatePDF = async (election) => {
  if (!election) return;

  const doc = new jsPDF();
  let yPos = 50;
  const pageWidth = doc.internal.pageSize.width;

  const img = new Image();
  img.src = process.env.PUBLIC_URL + "/facecast-no-bg.png"; // Use the imported image as the source

  await new Promise((resolve) => {
    img.onload = () => {
      doc.addImage(img, "PNG", 75, 5, 50, 25);
      resolve();
    };
  });

  doc.setFontSize(16);
  doc.setFont("times", "bold");
  doc.text("FaceCast Vote Election System", pageWidth / 2, yPos, {
    align: "center",
  });
  doc.setFontSize(16);
  doc.setFont("times", "bold");
  yPos += 10;
  doc.text(`Election Report ${election.title}`, pageWidth / 2, yPos, {
    align: "center",
  });

  yPos += 20;
  doc.setFontSize(12);
  doc.setFont("times", "normal");
  doc.text("Start at:", 20, yPos);
  doc.text(election.start_at, 50, yPos);

  yPos += 10;
  doc.text("End Time:", 20, yPos);
  doc.text(election.end_at, 50, yPos);

  yPos += 10;
  doc.text("Election type:", 20, yPos);
  doc.text(election.type, 50, yPos);

  yPos += 20;
  doc.setFont("times", "bold");

  // Generate table
  const tableData = [["Constituency", "Candidate Name"]];
  election.constituencies.forEach((constituency) => {
    tableData.push([constituency.name, ""]);
    constituency.candidates.forEach((candidate) => {
      tableData.push(["", candidate.name]);
    });
  });

  doc.autoTable({
    startY: yPos,
    head: [tableData[0]], // Header row
    body: tableData.slice(1), // Data rows
    theme: "striped", // Apply grid theme for table
    styles: { font: "times", fontStyle: "normal" }, // Set font style for table content
    columnStyles: {
      0: { fontStyle: "bold" }, // Bold font style for first column (Constituency)
    },
    didDrawPage: function (data) {
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      doc.setFontSize(10);
      doc.text(
        "Page " + data.pageNumber + " of " + pageCount,
        pageWidth - 20,
        pageHeight - 10,
        { align: "right" }
      );
      doc.text("Election Commissioner FaceCastVote", 20, pageHeight - 20);
      // Add computer-generated image text
      doc.text(
        `This is a computer-generated document by FaceCast Voter for ${
          election.title
        } on ${getCurrentDate()}`,
        20,
        pageHeight - 10,
        { align: "left" }
      );
    },
  });

  doc.save(`${election.title}-${election.type}.pdf`);
};

export async function generateResultPdf(result) {
  console.log("Generating PDF for", result.electionTitle);
  const doc = new jsPDF();
  let yPos = 50;
  const pageWidth = doc.internal.pageSize.width;
  console.log("Page width", pageWidth);

  // Use a different variable name for the dynamically created Image object
  var img = new Image();
  img.src = img.src = process.env.PUBLIC_URL + "/facecast-no-bg.png"; // Use the imported image as the source
  // Use the imported image as the source
  console.log("Image source", img.src);
  // Wait for the image to load before adding it to the PDF
  await new Promise((resolve) => {
    img.onload = () => {
      // Add image to PDF
      doc.addImage(img, "PNG", 75, 5, 50, 25, { align: "center" });
      resolve();
    };
  });
  console.log("Image added to PDF");
  // Set font size and style for title
  doc.setFontSize(16);
  doc.setFont("times", "bold");
  doc.text("FaceCast Vote Election System", pageWidth / 2, yPos, {
    align: "center",
  });
  console.log("Title added to PDF");
  // Set font size and style for election title
  yPos += 20;
  doc.setFontSize(12);
  doc.setFont("times", "normal");
  doc.text(result.electionTitle, 20, yPos);

  // Set font size and style for election date
  yPos += 10;
  doc.setFontSize(12);
  doc.text("Election conducted on " + getCurrentDate(), 20, yPos);

  // Move to next section
  yPos += 20;
  // Set font size and style for table headers
  doc.setFontSize(12);
  doc.setFont("times", "bold");
  const tableData = [["Constituency", "Candidate Name", "Votes", "Winner"]];
  result.constituencies.forEach((constituency) => {
    let maxVotes = 0;
    let winnerName = "";
    constituency.candidates.forEach((candidate) => {
      tableData.push([constituency.name, candidate.name, candidate.votes, ""]);
      if (candidate.votes > maxVotes) {
        maxVotes = candidate.votes;
        winnerName = candidate.name;
      }
    });
    // Tag the winner
    if (winnerName !== "") {
      tableData[tableData.length - 1][3] = "(Winner)";
    }
  });


  // Add table to PDF
  doc.autoTable({
    startY: yPos,
    head: [tableData[0]], // Header row
    body: tableData.slice(1), // Data rows
    theme: "striped", // Apply grid theme for table
    styles: { font: "times", fontStyle: "normal" }, // Set font style for table content
    columnStyles: {
      0: { fontStyle: "bold" }, // Bold font style for first column (Constituency)
    },
    didDrawPage: function (data) {
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      doc.setFontSize(10);
      doc.text(
        "Page " + data.pageNumber + " of " + pageCount,
        pageWidth - 20,
        pageHeight - 10,
        { align: "right" }
      );
      doc.text("Election Commissioner FaceCastVote", 20, pageHeight - 20);
      // Add computer-generated image text
      doc.text(
        `This is a computer-generated document by FaceCast Voter for ${
          result.electionTitle
        } on ${getCurrentDate()}`,
        20,
        pageHeight - 10,
        { align: "left" }
      );
    },
  });

  // Save PDF
  doc.save("election_results.pdf");
  return true;
}
function getCurrentDate() {
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); // January is 0!
  var yyyy = today.getFullYear();
  return mm + "/" + dd + "/" + yyyy;
}

// File: \Side Projects\facecast-vote\src\utils\profile.js
import { getDocs, query, where, updateDoc } from "firebase/firestore";
import { usersRef } from "../config/firebase";
// import { fetchSignInMethodsForEmail } from "firebase/auth";
// import { auth } from "../config/firebase";
import { doc, getDoc } from "firebase/firestore";
// Find profile by email id
export const getProfileByEmail = async (email) => {
  try {
    console.log("Searching for profile with email:", email);
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);
    console.log("Query snapshot:", querySnapshot.docs.length);
    if (!querySnapshot.empty) {
      const doc = querySnapshot.docs[0];
      console.log("Profile document data:", doc.data());
      return doc.data();
    } else {
      console.log("No profile found for email:", email);
      return null;
    }
  } catch (error) {
    console.error("Error fetching profile:", error);
    throw error;
  }
};

export const updateProfileByEmail = async (email, newData) => {
  try {
    // Find the document corresponding to the provided email
    const querySnapshot = await getDocs(
      query(usersRef, where("email", "==", email.toString()))
    );

    if (!querySnapshot.empty) {
      const docRef = querySnapshot.docs[0].ref;
      // Update the document with the new data
      await updateDoc(docRef, newData);
      console.log("Document updated successfully!");
    } else {
      console.log("No document found for the provided email:", email);
    }
  } catch (error) {
    console.error("Error updating document:", error);
    throw error;
  }
};

export const checkUserExists = async (email, currUser) => {
  try {
    if (!currUser) {
      console.log("No user found");
      return false;
    }
    if (currUser.email !== email) {
      console.log("Email does not match");
      return false;
    }
    const findEmail = await getProfileByEmail(email);
    console.log("findEmail", findEmail);
    if (findEmail) {
      return true;
    }
    return false;
  } catch (error) {
    console.error("Error checking if user exists:", error);
    return false;
  }
};
export const getuserByid = async (id) => {
  try {
    const docRef = doc(usersRef, id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
      return docSnap.data();
    } else {
      console.log("No such document!");
    }
  } catch (error) {
    console.log("Error getting document:", error);
  }
};


// File: \Side Projects\facecast-vote\src\utils\userVotes.js
import {
  addDoc,
  getDocs,
  where,
  query,
} from "firebase/firestore";
import { userVoteRef } from "../config/firebase";

export const createUserVote = async (data) => {
  try {
    const docRef = await addDoc(userVoteRef, data);
    console.log("Document written with ID: ", docRef.id);
  } catch (e) {
    console.error("Error adding document: ", e);
  }
};

export const checkIfUserVoted = async (userId, constituencyId, electionId) => {

  try {
    console.log("userId", userId);
    console.log("constituencyId", constituencyId);
    console.log("electionId", electionId);
    const snapshot = await getDocs(
      query(
        userVoteRef, // Reference the "user_vote" collection
        where("user_id", "==", userId),
        where("constituency_id", "==", constituencyId),
        where("election_id", "==", electionId)
      )
    );

    return !snapshot.empty; // Returns true if a document exists, indicating the user has voted for the given constituency in the specified election
  } catch (error) {
    console.error("Error checking if user voted:", error);
    return false; // Return false in case of any error
  }
};

// File: \Side Projects\facecast-vote\src\utils\utilityFunctions.js
import { getDocs } from "firebase/firestore";

export const fetchSpecificFieldsFromCollection = async (
  collectionRef,
  fields,
  filterField,
  filterValue
) => {
  try {
    const querySnapshot = await getDocs(collectionRef);

    const data = [];
    querySnapshot.forEach((doc) => {
      const docData = { id: doc.id }; // Include the document ID in the object
      if (!filterField || doc.data()[filterField] === filterValue) {
        fields.forEach((field) => {
          docData[field] = doc.data()[field];
        });
        data.push(docData);
      }
    });

    return data;
  } catch (error) {
    console.error("Error fetching documents:", error);
    return [];
  }
};

export const fetchSpecificFieldsFromCollectionWithOutFilter = async (
  collectionRef,
  fields
) => {
  try {
    const querySnapshot = await getDocs(collectionRef);

    const data = [];
    querySnapshot.forEach((doc) => {
      const docData = { id: doc.id }; // Include the document ID in the object
      fields.forEach((field) => {
        docData[field] = doc.data()[field];
      });
      data.push(docData);
    });

    return data;
  } catch (error) {
    console.error("Error fetching documents:", error);
    return [];
  }
}


// File: \Side Projects\facecast-vote\public\index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="face cast vote"
      content="Pakistan's only online election app, now you can vote from anywhere in the world."
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/facecast-no-bg.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Elections App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <!-- <script src="https://cdn.faceio.net/fio.js"></script> -->
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="https://cdn.faceio.net/fio.js"></script>
  </body>
</html>

// File: \Side Projects\facecast-vote\public\manifest.json
{
  "short_name": "FaceCast Vote",
  "name": "Pakistan's first Blockchain based voting system",
  "icons": [
    {
      "src": "facecast-no-bg.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "facecast-no-bg.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "facecast-no-bg.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

// File: \Side Projects\facecast-vote\public\robots.txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

// File: package.json
{
  "name": "facecast-vote",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@faceio/fiojs": "^1.1.0",
    "@headlessui/react": "^1.7.19",
    "@react-pdf/renderer": "^3.4.4",
    "@reduxjs/toolkit": "^2.2.4",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "ajv-keywords": "^5.1.0",
    "firebase": "^10.11.1",
    "jspdf": "^2.5.1",
    "jspdf-autotable": "^3.8.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.1.0",
    "react-otp-input": "^3.1.1",
    "react-phone-input-2": "^2.15.1",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.23.0",
    "react-scripts": "5.0.1",
    "react-select": "^5.8.0",
    "react-tabs": "^6.0.2",
    "redux": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "tailwindcss": "^3.4.3"
  }
}

// File: README.md
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

